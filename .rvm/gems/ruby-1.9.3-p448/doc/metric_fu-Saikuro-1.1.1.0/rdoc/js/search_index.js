var search_data = {"index":{"searchIndex":["baseformater","endableparsestate","filter","htmlstylesheet","htmltokencounterformater","parseblock","parseclass","parsecomment","parsecond","parsedef","parsedocond","parsemodule","parsestate","parsestateformater","parsesymbol","rdoc","resultindexgenerator","saikuro","saikurocmdlinerunner","statehtmlcomplexityformater","tokencounter","tokencounterformater","analyze()","calc_complexity()","calc_lines()","compute_state()","compute_state()","compute_state()","compute_state_for_global()","count_token()","count_tokens?()","count_tokens?()","create_def_name()","def_compute_state()","def_compute_state()","do_begin_token()","do_block_token()","do_case_token()","do_class_token()","do_comment_token()","do_conditional_do_control_token()","do_conditional_token()","do_constant_token()","do_constant_token()","do_def_token()","do_else_token()","do_end_token()","do_end_token()","do_identifier_token()","do_module_token()","do_one_line_conditional_token()","do_right_brace_token()","do_right_brace_token()","do_symbol_token()","end()","end()","end()","end()","end_class_compute_state()","end_class_compute_state()","end_count()","end_count()","end_debug()","end_file()","end_file()","error?()","get_ruby_files()","get_token_counter()","ignore?()","lexer=()","lexer_loop?()","line_token_count()","line_token_count()","list_analyzed_files()","list_tokens_per_line()","main_program_file=()","make_state()","make_top_state()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","parse()","parse_token()","parse_token()","parse_token()","parse_token()","parse_token()","parse_token()","print_summary_table_rows()","reset_data()","run()","seperate_file_from_path()","set_current_file()","set_token_counter()","start()","start()","start()","start()","start_class_compute_state()","start_class_compute_state()","start_count()","start_count()","start_file()","start_file()","style_sheet()","style_sheet()","summarize_errors_and_warnings()","top_state?()","usage_no_exit()","warn?()","warn_error?()","write_cyclo_index()","write_index()","write_token_index()","readme"],"longSearchIndex":["baseformater","endableparsestate","filter","htmlstylesheet","htmltokencounterformater","parseblock","parseclass","parsecomment","parsecond","parsedef","parsedocond","parsemodule","parsestate","parsestateformater","parsesymbol","rdoc","resultindexgenerator","saikuro","saikurocmdlinerunner","statehtmlcomplexityformater","tokencounter","tokencounterformater","saikuro::analyze()","parsestate#calc_complexity()","parsestate#calc_lines()","parseclass#compute_state()","parsedef#compute_state()","parsestate#compute_state()","parsestate#compute_state_for_global()","tokencounter#count_token()","parsecomment#count_tokens?()","parsestate#count_tokens?()","parsedef#create_def_name()","parsestateformater#def_compute_state()","statehtmlcomplexityformater#def_compute_state()","parsestate#do_begin_token()","parsestate#do_block_token()","parsestate#do_case_token()","parsestate#do_class_token()","parsestate#do_comment_token()","parsestate#do_conditional_do_control_token()","parsestate#do_conditional_token()","parseclass#do_constant_token()","parsestate#do_constant_token()","parsestate#do_def_token()","parsestate#do_else_token()","endableparsestate#do_end_token()","parsestate#do_end_token()","parsestate#do_identifier_token()","parsestate#do_module_token()","parsestate#do_one_line_conditional_token()","parseblock#do_right_brace_token()","parsestate#do_right_brace_token()","parsestate#do_symbol_token()","htmltokencounterformater#end()","parsestateformater#end()","statehtmlcomplexityformater#end()","tokencounterformater#end()","parsestateformater#end_class_compute_state()","statehtmlcomplexityformater#end_class_compute_state()","htmltokencounterformater#end_count()","tokencounterformater#end_count()","parsestate#end_debug()","htmltokencounterformater#end_file()","tokencounterformater#end_file()","filter#error?()","saikurocmdlinerunner#get_ruby_files()","parsestate::get_token_counter()","filter#ignore?()","parsestate#lexer=()","parsestate#lexer_loop?()","htmltokencounterformater#line_token_count()","tokencounterformater#line_token_count()","resultindexgenerator#list_analyzed_files()","tokencounter#list_tokens_per_line()","rdoc::main_program_file=()","parsestate#make_state()","parsestate::make_top_state()","baseformater::new()","endableparsestate::new()","filter::new()","parseblock::new()","parseclass::new()","parsecond::new()","parsedef::new()","parsedocond::new()","parsemodule::new()","parsestate::new()","parsesymbol::new()","tokencounter::new()","parsestate#parse()","parseblock#parse_token()","parsecomment#parse_token()","parsedef#parse_token()","parsedocond#parse_token()","parsestate#parse_token()","parsesymbol#parse_token()","resultindexgenerator#print_summary_table_rows()","baseformater#reset_data()","saikurocmdlinerunner#run()","saikuro::seperate_file_from_path()","tokencounter#set_current_file()","parsestate::set_token_counter()","htmltokencounterformater#start()","parsestateformater#start()","statehtmlcomplexityformater#start()","tokencounterformater#start()","parsestateformater#start_class_compute_state()","statehtmlcomplexityformater#start_class_compute_state()","htmltokencounterformater#start_count()","tokencounterformater#start_count()","htmltokencounterformater#start_file()","tokencounterformater#start_file()","htmlstylesheet#style_sheet()","htmlstylesheet::style_sheet()","resultindexgenerator#summarize_errors_and_warnings()","parsestate#top_state?()","rdoc::usage_no_exit()","filter#warn?()","baseformater#warn_error?()","resultindexgenerator#write_cyclo_index()","resultindexgenerator#write_index()","resultindexgenerator#write_token_index()",""],"info":[["BaseFormater","","BaseFormater.html","",""],["EndableParseState","","EndableParseState.html","",""],["Filter","","Filter.html","","<p>———— END Analyzer logic ————————————\n"],["HTMLStyleSheet","","HTMLStyleSheet.html","",""],["HTMLTokenCounterFormater","","HTMLTokenCounterFormater.html","",""],["ParseBlock","","ParseBlock.html","",""],["ParseClass","","ParseClass.html","",""],["ParseComment","","ParseComment.html","","<p>Read and consume tokens in comments until a new line.\n"],["ParseCond","","ParseCond.html","",""],["ParseDef","","ParseDef.html","",""],["ParseDoCond","","ParseDoCond.html","",""],["ParseModule","","ParseModule.html","",""],["ParseState","","ParseState.html","","<p>Main class and structure used to compute the cyclomatic complexity of Ruby\nprograms.\n"],["ParseStateFormater","","ParseStateFormater.html","",""],["ParseSymbol","","ParseSymbol.html","",""],["RDoc","","RDoc.html","","<p>This is a patch to RDoc so that when saikuro is installed as a RubyGem\nusage will read the proper file. …\n"],["ResultIndexGenerator","","ResultIndexGenerator.html","",""],["Saikuro","","Saikuro.html","",""],["SaikuroCMDLineRunner","","SaikuroCMDLineRunner.html","","<p>Really ugly command line runner stuff here for now\n"],["StateHTMLComplexityFormater","","StateHTMLComplexityFormater.html","",""],["TokenCounter","","TokenCounter.html","","<p>Counts the number of tokens in each line.\n"],["TokenCounterFormater","","TokenCounterFormater.html","",""],["analyze","Saikuro","Saikuro.html#method-c-analyze","(files, state_formater, token_count_formater, output_dir)",""],["calc_complexity","ParseState","ParseState.html#method-i-calc_complexity","()",""],["calc_lines","ParseState","ParseState.html#method-i-calc_lines","()",""],["compute_state","ParseClass","ParseClass.html#method-i-compute_state","(formater)",""],["compute_state","ParseDef","ParseDef.html#method-i-compute_state","(formater)",""],["compute_state","ParseState","ParseState.html#method-i-compute_state","(formater)",""],["compute_state_for_global","ParseState","ParseState.html#method-i-compute_state_for_global","(formater)",""],["count_token","TokenCounter","TokenCounter.html#method-i-count_token","(line_no,token)","<p>Count the token for the passed line.\n"],["count_tokens?","ParseComment","ParseComment.html#method-i-count_tokens-3F","()","<p>While in a comment state do not count the tokens.\n"],["count_tokens?","ParseState","ParseState.html#method-i-count_tokens-3F","()","<p>Count the tokens parsed if true else ignore them.\n"],["create_def_name","ParseDef","ParseDef.html#method-i-create_def_name","(token)","<p>This way I don’t need to list all possible overload tokens.\n"],["def_compute_state","ParseStateFormater","ParseStateFormater.html#method-i-def_compute_state","(name,complexity,lines)",""],["def_compute_state","StateHTMLComplexityFormater","StateHTMLComplexityFormater.html#method-i-def_compute_state","(name, complexity, lines)",""],["do_begin_token","ParseState","ParseState.html#method-i-do_begin_token","(token)",""],["do_block_token","ParseState","ParseState.html#method-i-do_block_token","(token)",""],["do_case_token","ParseState","ParseState.html#method-i-do_case_token","(token)",""],["do_class_token","ParseState","ParseState.html#method-i-do_class_token","(token)",""],["do_comment_token","ParseState","ParseState.html#method-i-do_comment_token","(token)",""],["do_conditional_do_control_token","ParseState","ParseState.html#method-i-do_conditional_do_control_token","(token)",""],["do_conditional_token","ParseState","ParseState.html#method-i-do_conditional_token","(token)",""],["do_constant_token","ParseClass","ParseClass.html#method-i-do_constant_token","(token)",""],["do_constant_token","ParseState","ParseState.html#method-i-do_constant_token","(token)",""],["do_def_token","ParseState","ParseState.html#method-i-do_def_token","(token)",""],["do_else_token","ParseState","ParseState.html#method-i-do_else_token","(token)",""],["do_end_token","EndableParseState","EndableParseState.html#method-i-do_end_token","(token)",""],["do_end_token","ParseState","ParseState.html#method-i-do_end_token","(token)",""],["do_identifier_token","ParseState","ParseState.html#method-i-do_identifier_token","(token)",""],["do_module_token","ParseState","ParseState.html#method-i-do_module_token","(token)",""],["do_one_line_conditional_token","ParseState","ParseState.html#method-i-do_one_line_conditional_token","(token)",""],["do_right_brace_token","ParseBlock","ParseBlock.html#method-i-do_right_brace_token","(token)",""],["do_right_brace_token","ParseState","ParseState.html#method-i-do_right_brace_token","(token)",""],["do_symbol_token","ParseState","ParseState.html#method-i-do_symbol_token","(token)",""],["end","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-end","()",""],["end","ParseStateFormater","ParseStateFormater.html#method-i-end","()",""],["end","StateHTMLComplexityFormater","StateHTMLComplexityFormater.html#method-i-end","()",""],["end","TokenCounterFormater","TokenCounterFormater.html#method-i-end","()",""],["end_class_compute_state","ParseStateFormater","ParseStateFormater.html#method-i-end_class_compute_state","(name)",""],["end_class_compute_state","StateHTMLComplexityFormater","StateHTMLComplexityFormater.html#method-i-end_class_compute_state","(name)",""],["end_count","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-end_count","()",""],["end_count","TokenCounterFormater","TokenCounterFormater.html#method-i-end_count","()",""],["end_debug","ParseState","ParseState.html#method-i-end_debug","()",""],["end_file","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-end_file","()",""],["end_file","TokenCounterFormater","TokenCounterFormater.html#method-i-end_file","()",""],["error?","Filter","Filter.html#method-i-error-3F","(count)",""],["get_ruby_files","SaikuroCMDLineRunner","SaikuroCMDLineRunner.html#method-i-get_ruby_files","(path)",""],["get_token_counter","ParseState","ParseState.html#method-c-get_token_counter","()",""],["ignore?","Filter","Filter.html#method-i-ignore-3F","(count)",""],["lexer=","ParseState","ParseState.html#method-i-lexer-3D","(lexer)",""],["lexer_loop?","ParseState","ParseState.html#method-i-lexer_loop-3F","(token)","<p>Ruby-Lexer can go into a loop if the file does not end with a newline.\n"],["line_token_count","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-line_token_count","(line_number,number_of_tokens)",""],["line_token_count","TokenCounterFormater","TokenCounterFormater.html#method-i-line_token_count","(line_number,number_of_tokens)",""],["list_analyzed_files","ResultIndexGenerator","ResultIndexGenerator.html#method-i-list_analyzed_files","(files)",""],["list_tokens_per_line","TokenCounter","TokenCounter.html#method-i-list_tokens_per_line","(formater)","<p>Iterate through all tracked files, passing the the provided formater the\ntoken counts.\n"],["main_program_file=","RDoc","RDoc.html#method-c-main_program_file-3D","(file)",""],["make_state","ParseState","ParseState.html#method-i-make_state","(type,parent = nil)",""],["make_top_state","ParseState","ParseState.html#method-c-make_top_state","()",""],["new","BaseFormater","BaseFormater.html#method-c-new","(out, filter = nil)",""],["new","EndableParseState","EndableParseState.html#method-c-new","(lexer,parent=nil)",""],["new","Filter","Filter.html#method-c-new","(limit = -1, error = 11, warn = 8)",""],["new","ParseBlock","ParseBlock.html#method-c-new","(lexer,parent=nil)",""],["new","ParseClass","ParseClass.html#method-c-new","(lexer,parent=nil)",""],["new","ParseCond","ParseCond.html#method-c-new","(lexer,parent=nil)",""],["new","ParseDef","ParseDef.html#method-c-new","(lexer,parent=nil)",""],["new","ParseDoCond","ParseDoCond.html#method-c-new","(lexer,parent=nil)",""],["new","ParseModule","ParseModule.html#method-c-new","(lexer,parent=nil)",""],["new","ParseState","ParseState.html#method-c-new","(lexer,parent=nil)",""],["new","ParseSymbol","ParseSymbol.html#method-c-new","(lexer, parent = nil)",""],["new","TokenCounter","TokenCounter.html#method-c-new","()",""],["parse","ParseState","ParseState.html#method-i-parse","()",""],["parse_token","ParseBlock","ParseBlock.html#method-i-parse_token","(token)","<p>Because the token for a block and hash right brace is the same, we need to\ntrack the hash left braces …\n"],["parse_token","ParseComment","ParseComment.html#method-i-parse_token","(token)",""],["parse_token","ParseDef","ParseDef.html#method-i-parse_token","(token)",""],["parse_token","ParseDoCond","ParseDoCond.html#method-i-parse_token","(token)","<p>Need to consume the do that can appear at the end of these control\nstructures.\n"],["parse_token","ParseState","ParseState.html#method-i-parse_token","(token)",""],["parse_token","ParseSymbol","ParseSymbol.html#method-i-parse_token","(token)",""],["print_summary_table_rows","ResultIndexGenerator","ResultIndexGenerator.html#method-i-print_summary_table_rows","(ewvals, klass_type)",""],["reset_data","BaseFormater","BaseFormater.html#method-i-reset_data","()",""],["run","SaikuroCMDLineRunner","SaikuroCMDLineRunner.html#method-i-run","()",""],["seperate_file_from_path","Saikuro","Saikuro.html#method-c-seperate_file_from_path","(path)","<p>Returns the path without the file\n"],["set_current_file","TokenCounter","TokenCounter.html#method-i-set_current_file","(file)","<p>Mark file to associate with the token count.\n"],["set_token_counter","ParseState","ParseState.html#method-c-set_token_counter","(counter)",""],["start","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-start","(new_out=nil)",""],["start","ParseStateFormater","ParseStateFormater.html#method-i-start","(new_out=nil)",""],["start","StateHTMLComplexityFormater","StateHTMLComplexityFormater.html#method-i-start","(new_out=nil)",""],["start","TokenCounterFormater","TokenCounterFormater.html#method-i-start","(new_out=nil)",""],["start_class_compute_state","ParseStateFormater","ParseStateFormater.html#method-i-start_class_compute_state","(type_name,name,complexity,lines)",""],["start_class_compute_state","StateHTMLComplexityFormater","StateHTMLComplexityFormater.html#method-i-start_class_compute_state","(type_name,name,complexity,lines)",""],["start_count","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-start_count","(number_of_files)",""],["start_count","TokenCounterFormater","TokenCounterFormater.html#method-i-start_count","(number_of_files)",""],["start_file","HTMLTokenCounterFormater","HTMLTokenCounterFormater.html#method-i-start_file","(file_name)",""],["start_file","TokenCounterFormater","TokenCounterFormater.html#method-i-start_file","(file_name)",""],["style_sheet","HTMLStyleSheet","HTMLStyleSheet.html#method-i-style_sheet","()",""],["style_sheet","HTMLStyleSheet","HTMLStyleSheet.html#method-c-style_sheet","()",""],["summarize_errors_and_warnings","ResultIndexGenerator","ResultIndexGenerator.html#method-i-summarize_errors_and_warnings","(enw, header)",""],["top_state?","ParseState","ParseState.html#method-i-top_state-3F","()",""],["usage_no_exit","RDoc","RDoc.html#method-c-usage_no_exit","(*args)","<p>Display usage\n"],["warn?","Filter","Filter.html#method-i-warn-3F","(count)",""],["warn_error?","BaseFormater","BaseFormater.html#method-i-warn_error-3F","(num, marker)",""],["write_cyclo_index","ResultIndexGenerator","ResultIndexGenerator.html#method-i-write_cyclo_index","(files, output_dir)",""],["write_index","ResultIndexGenerator","ResultIndexGenerator.html#method-i-write_index","(files, filename, title, header)",""],["write_token_index","ResultIndexGenerator","ResultIndexGenerator.html#method-i-write_token_index","(files, output_dir)",""],["README","","README.html","","<p>The japgolly fork is a part of an attempt to get metric_fu working in a\nmodern Ruby environment, specifically …\n"]]}}