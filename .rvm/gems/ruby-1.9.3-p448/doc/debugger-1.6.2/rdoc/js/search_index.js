var search_data = {"index":{"searchIndex":["debugger","addbreakpoint","breakpoint","context","continuecommand","deletebreakpointcommand","finishcommand","helpcommand","irbcommand","infocommand","jumpcommand","killcommand","listcommand","localinterface","debugger","methodcommand","methodsigcommand","nextcommand","parsefunctions","processor","quitcommand","reloadcommand","setcommand","showcommand","skipcommand","sourcecommand","stepcommand","varclassvarcommand","varinheritcommand","varlocalcommand","wherecommand","kernel","minitest","assertions","expectations","mocha","call","expectation","mock","module","printerhelpers","printers","base","missedargument","missedpath","plain","testdsl","classmethods","shared","testinterface","+()","__c_frame_binding()","afmt()","aprint()","assert_includes_in_order()","binding()","binding_n()","breakpoint()","breakpoint()","calls()","change_line_in_file()","check_output()","check_output_doesnt_include()","check_output_includes()","close()","confirm()","context()","debug_file()","debug_method()","debugger()","empty?()","enter()","errmsg()","errmsg()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","finalize()","force_set_const()","frame_binding()","fullpath()","get_int()","get_onoff()","handle_post_mortem()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","help_command()","included()","info_args()","info_breakpoints()","info_display()","info_file()","info_files()","info_global_variables()","info_instance_variables()","info_line()","info_locals()","info_program()","info_stack()","info_thread()","info_threads()","info_variables()","inspect()","inspect()","inspect()","interface()","interrupt()","interrupt()","interrupt_last()","invoke()","invoke_with_calls()","invoke_without_calls()","method_missing()","new()","new()","next()","numeric?()","pi()","post_mortem()","post_mortem_method()","pr()","print()","print()","print()","print()","print_collection()","print_variables()","protect()","read_command()","readline_support?()","refute_includes_in_order()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","regexp()","run_init_script()","run_script()","settings()","show_onoff()","source_reload()","split_commands()","start()","start_client()","start_remote()","start_server()","state()","syntax_valid?()","temporary_change_hash_value()","temporary_change_hash_value()","temporary_change_method_value()","temporary_change_method_value()","temporary_set_const()","temporary_set_const()","type()","yaml_file_path()"],"longSearchIndex":["debugger","debugger::addbreakpoint","debugger::breakpoint","debugger::context","debugger::continuecommand","debugger::deletebreakpointcommand","debugger::finishcommand","debugger::helpcommand","debugger::irbcommand","debugger::infocommand","debugger::jumpcommand","debugger::killcommand","debugger::listcommand","debugger::localinterface","debugger::localinterface::debugger","debugger::methodcommand","debugger::methodsigcommand","debugger::nextcommand","debugger::parsefunctions","debugger::processor","debugger::quitcommand","debugger::reloadcommand","debugger::setcommand","debugger::showcommand","debugger::skipcommand","debugger::sourcecommand","debugger::stepcommand","debugger::varclassvarcommand","debugger::varinheritcommand","debugger::varlocalcommand","debugger::wherecommand","kernel","minitest","minitest::assertions","minitest::expectations","mocha","mocha::call","mocha::expectation","mocha::mock","module","printerhelpers","printers","printers::base","printers::base::missedargument","printers::base::missedpath","printers::plain","testdsl","testdsl::classmethods","testdsl::shared","testinterface","mocha::call#+()","debugger::context#__c_frame_binding()","debugger::processor#afmt()","debugger::processor#aprint()","minitest::assertions#assert_includes_in_order()","testdsl#binding()","kernel#binding_n()","kernel#breakpoint()","testdsl#breakpoint()","mocha::expectation#calls()","testdsl#change_line_in_file()","testdsl#check_output()","testdsl#check_output_doesnt_include()","testdsl#check_output_includes()","testinterface#close()","testinterface#confirm()","testdsl#context()","testdsl#debug_file()","module#debug_method()","kernel#debugger()","testinterface#empty?()","testdsl#enter()","debugger::processor#errmsg()","testinterface#errmsg()","debugger::addbreakpoint#execute()","debugger::continuecommand#execute()","debugger::deletebreakpointcommand#execute()","debugger::finishcommand#execute()","debugger::helpcommand#execute()","debugger::irbcommand#execute()","debugger::infocommand#execute()","debugger::jumpcommand#execute()","debugger::killcommand#execute()","debugger::listcommand#execute()","debugger::methodcommand#execute()","debugger::methodsigcommand#execute()","debugger::nextcommand#execute()","debugger::quitcommand#execute()","debugger::reloadcommand#execute()","debugger::setcommand#execute()","debugger::showcommand#execute()","debugger::skipcommand#execute()","debugger::sourcecommand#execute()","debugger::stepcommand#execute()","debugger::varclassvarcommand#execute()","debugger::varinheritcommand#execute()","debugger::varlocalcommand#execute()","debugger::wherecommand#execute()","testinterface#finalize()","testdsl#force_set_const()","debugger::context#frame_binding()","testdsl::shared#fullpath()","debugger::parsefunctions#get_int()","debugger::parsefunctions#get_onoff()","debugger::handle_post_mortem()","debugger::addbreakpoint::help()","debugger::continuecommand::help()","debugger::deletebreakpointcommand::help()","debugger::finishcommand::help()","debugger::helpcommand::help()","debugger::irbcommand::help()","debugger::infocommand::help()","debugger::jumpcommand::help()","debugger::killcommand::help()","debugger::listcommand::help()","debugger::methodcommand::help()","debugger::methodsigcommand::help()","debugger::nextcommand::help()","debugger::quitcommand::help()","debugger::setcommand::help()","debugger::showcommand::help()","debugger::skipcommand::help()","debugger::sourcecommand::help()","debugger::stepcommand::help()","debugger::varclassvarcommand::help()","debugger::varinheritcommand::help()","debugger::varlocalcommand::help()","debugger::wherecommand::help()","debugger::addbreakpoint::help_command()","debugger::continuecommand::help_command()","debugger::deletebreakpointcommand::help_command()","debugger::finishcommand::help_command()","debugger::helpcommand::help_command()","debugger::irbcommand::help_command()","debugger::infocommand::help_command()","debugger::jumpcommand::help_command()","debugger::killcommand::help_command()","debugger::listcommand::help_command()","debugger::methodcommand::help_command()","debugger::methodsigcommand::help_command()","debugger::nextcommand::help_command()","debugger::quitcommand::help_command()","debugger::setcommand::help_command()","debugger::showcommand::help_command()","debugger::skipcommand::help_command()","debugger::sourcecommand::help_command()","debugger::stepcommand::help_command()","debugger::varclassvarcommand::help_command()","debugger::varinheritcommand::help_command()","debugger::varlocalcommand::help_command()","debugger::wherecommand::help_command()","testdsl::included()","debugger::infocommand#info_args()","debugger::infocommand#info_breakpoints()","debugger::infocommand#info_display()","debugger::infocommand#info_file()","debugger::infocommand#info_files()","debugger::infocommand#info_global_variables()","debugger::infocommand#info_instance_variables()","debugger::infocommand#info_line()","debugger::infocommand#info_locals()","debugger::infocommand#info_program()","debugger::infocommand#info_stack()","debugger::infocommand#info_thread()","debugger::infocommand#info_threads()","debugger::infocommand#info_variables()","debugger::breakpoint#inspect()","debugger::context#inspect()","testinterface#inspect()","testdsl#interface()","debugger::interrupt()","debugger::context#interrupt()","debugger::interrupt_last()","mocha::expectation#invoke()","mocha::expectation#invoke_with_calls()","mocha::expectation#invoke_without_calls()","mocha::mock#method_missing()","mocha::call::new()","testinterface::new()","mocha::call#next()","debugger::jumpcommand#numeric?()","testdsl#pi()","debugger::post_mortem()","module#post_mortem_method()","debugger::addbreakpoint#pr()","debugger::processor::print()","debugger::processor#print()","printers::plain#print()","testinterface#print()","printers::plain#print_collection()","printers::plain#print_variables()","debugger::processor::protect()","testinterface#read_command()","testinterface#readline_support?()","minitest::assertions#refute_includes_in_order()","debugger::addbreakpoint#regexp()","debugger::continuecommand#regexp()","debugger::deletebreakpointcommand#regexp()","debugger::finishcommand#regexp()","debugger::helpcommand#regexp()","debugger::irbcommand#regexp()","debugger::infocommand#regexp()","debugger::jumpcommand#regexp()","debugger::killcommand#regexp()","debugger::listcommand#regexp()","debugger::methodcommand#regexp()","debugger::methodsigcommand#regexp()","debugger::nextcommand#regexp()","debugger::quitcommand#regexp()","debugger::reloadcommand#regexp()","debugger::setcommand#regexp()","debugger::showcommand#regexp()","debugger::skipcommand#regexp()","debugger::sourcecommand#regexp()","debugger::stepcommand#regexp()","debugger::varclassvarcommand#regexp()","debugger::varinheritcommand#regexp()","debugger::varlocalcommand#regexp()","debugger::wherecommand#regexp()","debugger::run_init_script()","debugger::run_script()","debugger::settings()","debugger::parsefunctions#show_onoff()","debugger::source_reload()","debugger::processor#split_commands()","debugger::start()","debugger::start_client()","debugger::start_remote()","debugger::start_server()","testdsl#state()","debugger::parsefunctions#syntax_valid?()","testdsl#temporary_change_hash_value()","testdsl::classmethods#temporary_change_hash_value()","testdsl#temporary_change_method_value()","testdsl::classmethods#temporary_change_method_value()","testdsl#temporary_set_const()","testdsl::classmethods#temporary_set_const()","printers::base#type()","printerhelpers#yaml_file_path()"],"info":[["Debugger","","Debugger.html","",""],["Debugger::AddBreakpoint","","Debugger/AddBreakpoint.html","","<p>Implements debugger “break” command.\n"],["Debugger::Breakpoint","","Debugger/Breakpoint.html","",""],["Debugger::Context","","Debugger/Context.html","",""],["Debugger::ContinueCommand","","Debugger/ContinueCommand.html","","<p>Implements debugger “continue” command.\n"],["Debugger::DeleteBreakpointCommand","","Debugger/DeleteBreakpointCommand.html","","<p>Implements debugger “delete” command.\n"],["Debugger::FinishCommand","","Debugger/FinishCommand.html","","<p>Implements the debugger ‘finish’ command.\n"],["Debugger::HelpCommand","","Debugger/HelpCommand.html","","<p>Implements debugger “help” command.\n"],["Debugger::IRBCommand","","Debugger/IRBCommand.html","","<p>Implements debugger “irb” command.\n"],["Debugger::InfoCommand","","Debugger/InfoCommand.html","","<p>Implements debugger “info” command.\n"],["Debugger::JumpCommand","","Debugger/JumpCommand.html","","<p>Implements debugger “jump” command\n"],["Debugger::KillCommand","","Debugger/KillCommand.html","","<p>Implements debugger “kill” command\n"],["Debugger::ListCommand","","Debugger/ListCommand.html","","<p>Implements debugger “list” command.\n"],["Debugger::LocalInterface","","Debugger/LocalInterface.html","",""],["Debugger::LocalInterface::Debugger","","Debugger/LocalInterface/Debugger.html","",""],["Debugger::MethodCommand","","Debugger/MethodCommand.html","","<p>Implements the debugger ‘method’ command.\n"],["Debugger::MethodSigCommand","","Debugger/MethodSigCommand.html","","<p>Implements the debugger ‘method sig’ command.\n"],["Debugger::NextCommand","","Debugger/NextCommand.html","","<p>Implements debugger “next” command.\n"],["Debugger::ParseFunctions","","Debugger/ParseFunctions.html","",""],["Debugger::Processor","","Debugger/Processor.html","","<p>Should this be a mixin?\n"],["Debugger::QuitCommand","","Debugger/QuitCommand.html","","<p>Implements debugger “quit” command\n"],["Debugger::ReloadCommand","","Debugger/ReloadCommand.html","","<p>Implements debugger “reload” command.\n"],["Debugger::SetCommand","","Debugger/SetCommand.html","","<p>Implements debugger “set” command.\n"],["Debugger::ShowCommand","","Debugger/ShowCommand.html","","<p>Implements debugger “show” command.\n"],["Debugger::SkipCommand","","Debugger/SkipCommand.html","","<p>Implements debugger “skip” command\n"],["Debugger::SourceCommand","","Debugger/SourceCommand.html","","<p>Implements debugger “source” command.\n"],["Debugger::StepCommand","","Debugger/StepCommand.html","","<p>Implements debugger “step” command.\n"],["Debugger::VarClassVarCommand","","Debugger/VarClassVarCommand.html","","<p>Implements the debugger ‘var class’ command.\n"],["Debugger::VarInheritCommand","","Debugger/VarInheritCommand.html","",""],["Debugger::VarLocalCommand","","Debugger/VarLocalCommand.html","","<p>Implements the debugger ‘var local’ command.\n"],["Debugger::WhereCommand","","Debugger/WhereCommand.html","","<p>Implements debugger “where” or “backtrace” command.\n"],["Kernel","","Kernel.html","",""],["MiniTest","","MiniTest.html","",""],["MiniTest::Assertions","","MiniTest/Assertions.html","",""],["MiniTest::Expectations","","MiniTest/Expectations.html","",""],["Mocha","","Mocha.html","",""],["Mocha::Call","","Mocha/Call.html","",""],["Mocha::Expectation","","Mocha/Expectation.html","",""],["Mocha::Mock","","Mocha/Mock.html","",""],["Module","","Module.html","",""],["PrinterHelpers","","PrinterHelpers.html","",""],["Printers","","Printers.html","",""],["Printers::Base","","Printers/Base.html","",""],["Printers::Base::MissedArgument","","Printers/Base/MissedArgument.html","",""],["Printers::Base::MissedPath","","Printers/Base/MissedPath.html","",""],["Printers::Plain","","Printers/Plain.html","",""],["TestDsl","","TestDsl.html","",""],["TestDsl::ClassMethods","","TestDsl/ClassMethods.html","",""],["TestDsl::Shared","","TestDsl/Shared.html","",""],["TestInterface","","TestInterface.html","",""],["+","Mocha::Call","Mocha/Call.html#method-i-2B","(other)",""],["__c_frame_binding","Debugger::Context","Debugger/Context.html#method-i-__c_frame_binding","(frame)",""],["afmt","Debugger::Processor","Debugger/Processor.html#method-i-afmt","(msg, newline=\"\\n\")","<p>Format msg with gdb-style annotation header\n"],["aprint","Debugger::Processor","Debugger/Processor.html#method-i-aprint","(msg)",""],["assert_includes_in_order","MiniTest::Assertions","MiniTest/Assertions.html#method-i-assert_includes_in_order","(given_collection, original_collection, msg = nil)","<p>This matcher checks that given collection is included into the original\ncollection, and in correct order. …\n"],["binding","TestDsl","TestDsl.html#method-i-binding","()",""],["binding_n","Kernel","Kernel.html#method-i-binding_n","(n = 0)","<p>Returns a binding of n-th call frame\n"],["breakpoint","Kernel","Kernel.html#method-i-breakpoint","(steps = 1)",""],["breakpoint","TestDsl","TestDsl.html#method-i-breakpoint","()",""],["calls","Mocha::Expectation","Mocha/Expectation.html#method-i-calls","(&block)","<p>Allows to specify a block to execute when expectation will be matched. This\nway, we can specify dynamic …\n"],["change_line_in_file","TestDsl","TestDsl.html#method-i-change_line_in_file","(file, line, new_line_content)",""],["check_output","TestDsl","TestDsl.html#method-i-check_output","(check_method, *args)","<p>Checks the output of the debugger. By default it checks output queue of the\ncurrent interface, but you …\n"],["check_output_doesnt_include","TestDsl","TestDsl.html#method-i-check_output_doesnt_include","(*args)",""],["check_output_includes","TestDsl","TestDsl.html#method-i-check_output_includes","(*args)",""],["close","TestInterface","TestInterface.html#method-i-close","()",""],["confirm","TestInterface","TestInterface.html#method-i-confirm","(message)",""],["context","TestDsl","TestDsl.html#method-i-context","()",""],["debug_file","TestDsl","TestDsl.html#method-i-debug_file","(filename, &block)","<p>Runs a debugger with the provided basename for a file. The file should be\nplaced to the test/new/examples …\n"],["debug_method","Module","Module.html#method-i-debug_method","(meth)","<p>Wraps the <code>meth</code> method with Debugger.start {…} block.\n"],["debugger","Kernel","Kernel.html#method-i-debugger","(steps = 1)","<p>Enters the debugger in the current thread after <em>steps</em> line events\noccur. Before entering the debugger …\n"],["empty?","TestInterface","TestInterface.html#method-i-empty-3F","()",""],["enter","TestDsl","TestDsl.html#method-i-enter","(*messages)","<p>Adds commands to the input queue, so they will be retrieved by Processor\nlater. I.e. it emulates user’s …\n"],["errmsg","Debugger::Processor","Debugger/Processor.html#method-i-errmsg","(*args)","<p>FIXME: use delegate?\n"],["errmsg","TestInterface","TestInterface.html#method-i-errmsg","(value)",""],["execute","Debugger::AddBreakpoint","Debugger/AddBreakpoint.html#method-i-execute","()",""],["execute","Debugger::ContinueCommand","Debugger/ContinueCommand.html#method-i-execute","()",""],["execute","Debugger::DeleteBreakpointCommand","Debugger/DeleteBreakpointCommand.html#method-i-execute","()",""],["execute","Debugger::FinishCommand","Debugger/FinishCommand.html#method-i-execute","()",""],["execute","Debugger::HelpCommand","Debugger/HelpCommand.html#method-i-execute","()",""],["execute","Debugger::IRBCommand","Debugger/IRBCommand.html#method-i-execute","()",""],["execute","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-execute","()",""],["execute","Debugger::JumpCommand","Debugger/JumpCommand.html#method-i-execute","()",""],["execute","Debugger::KillCommand","Debugger/KillCommand.html#method-i-execute","()",""],["execute","Debugger::ListCommand","Debugger/ListCommand.html#method-i-execute","()",""],["execute","Debugger::MethodCommand","Debugger/MethodCommand.html#method-i-execute","()",""],["execute","Debugger::MethodSigCommand","Debugger/MethodSigCommand.html#method-i-execute","()",""],["execute","Debugger::NextCommand","Debugger/NextCommand.html#method-i-execute","()",""],["execute","Debugger::QuitCommand","Debugger/QuitCommand.html#method-i-execute","()",""],["execute","Debugger::ReloadCommand","Debugger/ReloadCommand.html#method-i-execute","()",""],["execute","Debugger::SetCommand","Debugger/SetCommand.html#method-i-execute","()",""],["execute","Debugger::ShowCommand","Debugger/ShowCommand.html#method-i-execute","()",""],["execute","Debugger::SkipCommand","Debugger/SkipCommand.html#method-i-execute","()",""],["execute","Debugger::SourceCommand","Debugger/SourceCommand.html#method-i-execute","()",""],["execute","Debugger::StepCommand","Debugger/StepCommand.html#method-i-execute","()",""],["execute","Debugger::VarClassVarCommand","Debugger/VarClassVarCommand.html#method-i-execute","()",""],["execute","Debugger::VarInheritCommand","Debugger/VarInheritCommand.html#method-i-execute","()",""],["execute","Debugger::VarLocalCommand","Debugger/VarLocalCommand.html#method-i-execute","()",""],["execute","Debugger::WhereCommand","Debugger/WhereCommand.html#method-i-execute","()",""],["finalize","TestInterface","TestInterface.html#method-i-finalize","()",""],["force_set_const","TestDsl","TestDsl.html#method-i-force_set_const","(klass, const, value)",""],["frame_binding","Debugger::Context","Debugger/Context.html#method-i-frame_binding","(frame)",""],["fullpath","TestDsl::Shared","TestDsl/Shared.html#method-i-fullpath","(filename)",""],["get_int","Debugger::ParseFunctions","Debugger/ParseFunctions.html#method-i-get_int","(str, cmd, min=nil, max=nil, default=1)","<p>Parse ‘str’ of command ‘cmd’ as an integer between min and max. If either\nmin or max is nil, that value …\n"],["get_onoff","Debugger::ParseFunctions","Debugger/ParseFunctions.html#method-i-get_onoff","(arg, default=nil, print_error=true)","<p>Return true if arg is ‘on’ or 1 and false arg is ‘off’ or 0. Any other\nvalue raises RuntimeError.\n"],["handle_post_mortem","Debugger","Debugger.html#method-c-handle_post_mortem","(exp)",""],["help","Debugger::AddBreakpoint","Debugger/AddBreakpoint.html#method-c-help","(cmd)",""],["help","Debugger::ContinueCommand","Debugger/ContinueCommand.html#method-c-help","(cmd)",""],["help","Debugger::DeleteBreakpointCommand","Debugger/DeleteBreakpointCommand.html#method-c-help","(cmd)",""],["help","Debugger::FinishCommand","Debugger/FinishCommand.html#method-c-help","(cmd)",""],["help","Debugger::HelpCommand","Debugger/HelpCommand.html#method-c-help","(cmd)",""],["help","Debugger::IRBCommand","Debugger/IRBCommand.html#method-c-help","(cmd)",""],["help","Debugger::InfoCommand","Debugger/InfoCommand.html#method-c-help","(args)",""],["help","Debugger::JumpCommand","Debugger/JumpCommand.html#method-c-help","(cmd)",""],["help","Debugger::KillCommand","Debugger/KillCommand.html#method-c-help","(cmd)",""],["help","Debugger::ListCommand","Debugger/ListCommand.html#method-c-help","(cmd)",""],["help","Debugger::MethodCommand","Debugger/MethodCommand.html#method-c-help","(cmd)",""],["help","Debugger::MethodSigCommand","Debugger/MethodSigCommand.html#method-c-help","(cmd)",""],["help","Debugger::NextCommand","Debugger/NextCommand.html#method-c-help","(cmd)",""],["help","Debugger::QuitCommand","Debugger/QuitCommand.html#method-c-help","(cmd)",""],["help","Debugger::SetCommand","Debugger/SetCommand.html#method-c-help","(args)",""],["help","Debugger::ShowCommand","Debugger/ShowCommand.html#method-c-help","(args)",""],["help","Debugger::SkipCommand","Debugger/SkipCommand.html#method-c-help","(cmd)",""],["help","Debugger::SourceCommand","Debugger/SourceCommand.html#method-c-help","(cmd)",""],["help","Debugger::StepCommand","Debugger/StepCommand.html#method-c-help","(cmd)",""],["help","Debugger::VarClassVarCommand","Debugger/VarClassVarCommand.html#method-c-help","(cmd)",""],["help","Debugger::VarInheritCommand","Debugger/VarInheritCommand.html#method-c-help","(cmd)",""],["help","Debugger::VarLocalCommand","Debugger/VarLocalCommand.html#method-c-help","(cmd)",""],["help","Debugger::WhereCommand","Debugger/WhereCommand.html#method-c-help","(cmd)",""],["help_command","Debugger::AddBreakpoint","Debugger/AddBreakpoint.html#method-c-help_command","()",""],["help_command","Debugger::ContinueCommand","Debugger/ContinueCommand.html#method-c-help_command","()",""],["help_command","Debugger::DeleteBreakpointCommand","Debugger/DeleteBreakpointCommand.html#method-c-help_command","()",""],["help_command","Debugger::FinishCommand","Debugger/FinishCommand.html#method-c-help_command","()",""],["help_command","Debugger::HelpCommand","Debugger/HelpCommand.html#method-c-help_command","()",""],["help_command","Debugger::IRBCommand","Debugger/IRBCommand.html#method-c-help_command","()",""],["help_command","Debugger::InfoCommand","Debugger/InfoCommand.html#method-c-help_command","()",""],["help_command","Debugger::JumpCommand","Debugger/JumpCommand.html#method-c-help_command","()",""],["help_command","Debugger::KillCommand","Debugger/KillCommand.html#method-c-help_command","()",""],["help_command","Debugger::ListCommand","Debugger/ListCommand.html#method-c-help_command","()",""],["help_command","Debugger::MethodCommand","Debugger/MethodCommand.html#method-c-help_command","()",""],["help_command","Debugger::MethodSigCommand","Debugger/MethodSigCommand.html#method-c-help_command","()",""],["help_command","Debugger::NextCommand","Debugger/NextCommand.html#method-c-help_command","()",""],["help_command","Debugger::QuitCommand","Debugger/QuitCommand.html#method-c-help_command","()",""],["help_command","Debugger::SetCommand","Debugger/SetCommand.html#method-c-help_command","()",""],["help_command","Debugger::ShowCommand","Debugger/ShowCommand.html#method-c-help_command","()",""],["help_command","Debugger::SkipCommand","Debugger/SkipCommand.html#method-c-help_command","()",""],["help_command","Debugger::SourceCommand","Debugger/SourceCommand.html#method-c-help_command","()",""],["help_command","Debugger::StepCommand","Debugger/StepCommand.html#method-c-help_command","()",""],["help_command","Debugger::VarClassVarCommand","Debugger/VarClassVarCommand.html#method-c-help_command","()",""],["help_command","Debugger::VarInheritCommand","Debugger/VarInheritCommand.html#method-c-help_command","()",""],["help_command","Debugger::VarLocalCommand","Debugger/VarLocalCommand.html#method-c-help_command","()",""],["help_command","Debugger::WhereCommand","Debugger/WhereCommand.html#method-c-help_command","()",""],["included","TestDsl","TestDsl.html#method-c-included","(base)",""],["info_args","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_args","(*args)",""],["info_breakpoints","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_breakpoints","(*args)",""],["info_display","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_display","(*args)",""],["info_file","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_file","(*args)",""],["info_files","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_files","(*args)",""],["info_global_variables","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_global_variables","(*args)",""],["info_instance_variables","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_instance_variables","(*args)",""],["info_line","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_line","(*args)",""],["info_locals","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_locals","(*args)",""],["info_program","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_program","(*args)",""],["info_stack","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_stack","(*args)",""],["info_thread","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_thread","(*args)",""],["info_threads","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_threads","(*args)",""],["info_variables","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-info_variables","(*args)",""],["inspect","Debugger::Breakpoint","Debugger/Breakpoint.html#method-i-inspect","()",""],["inspect","Debugger::Context","Debugger/Context.html#method-i-inspect","()",""],["inspect","TestInterface","TestInterface.html#method-i-inspect","()",""],["interface","TestDsl","TestDsl.html#method-i-interface","()",""],["interrupt","Debugger","Debugger.html#method-c-interrupt","()","<p>Interrupts the current thread\n"],["interrupt","Debugger::Context","Debugger/Context.html#method-i-interrupt","()",""],["interrupt_last","Debugger","Debugger.html#method-c-interrupt_last","()","<p>Interrupts the last debugged thread\n"],["invoke","Mocha::Expectation","Mocha/Expectation.html#method-i-invoke","(arguments, &block)",""],["invoke_with_calls","Mocha::Expectation","Mocha/Expectation.html#method-i-invoke_with_calls","(arguments, &block)",""],["invoke_without_calls","Mocha::Expectation","Mocha/Expectation.html#method-i-invoke_without_calls","(arguments, &block)",""],["method_missing","Mocha::Mock","Mocha/Mock.html#method-i-method_missing","(symbol, *arguments, &block)","<p>We monkey-patch that method to be able to pass arguments to\nExpectation#invoke method\n"],["new","Mocha::Call","Mocha/Call.html#method-c-new","(*blocks)",""],["new","TestInterface","TestInterface.html#method-c-new","()",""],["next","Mocha::Call","Mocha/Call.html#method-i-next","(arguments, &block)",""],["numeric?","Debugger::JumpCommand","Debugger/JumpCommand.html#method-i-numeric-3F","(object)",""],["pi","TestDsl","TestDsl.html#method-i-pi","()",""],["post_mortem","Debugger","Debugger.html#method-c-post_mortem","()","<p>Activates the post-mortem mode. There are two ways of using it:\n<p>Global post-mortem mode\n<p>By calling Debugger.post_mortem …\n"],["post_mortem_method","Module","Module.html#method-i-post_mortem_method","(meth)","<p>Wraps the <code>meth</code> method with Debugger.post_mortem {…} block.\n"],["pr","Debugger::AddBreakpoint","Debugger/AddBreakpoint.html#method-i-pr","(path, *args)",""],["print","Debugger::Processor","Debugger/Processor.html#method-c-print","(message)",""],["print","Debugger::Processor","Debugger/Processor.html#method-i-print","(*args)","<p>Callers of this routine should make sure to use comma to separate format\nargments rather than %. Otherwise …\n"],["print","Printers::Plain","Printers/Plain.html#method-i-print","(path, args = {})",""],["print","TestInterface","TestInterface.html#method-i-print","(value)",""],["print_collection","Printers::Plain","Printers/Plain.html#method-i-print_collection","(path, collection, &block)",""],["print_variables","Printers::Plain","Printers/Plain.html#method-i-print_variables","(variables, _kind)",""],["protect","Debugger::Processor","Debugger/Processor.html#method-c-protect","(mname)",""],["read_command","TestInterface","TestInterface.html#method-i-read_command","(*args)",""],["readline_support?","TestInterface","TestInterface.html#method-i-readline_support-3F","()",""],["refute_includes_in_order","MiniTest::Assertions","MiniTest/Assertions.html#method-i-refute_includes_in_order","(given_collection, original_collection, msg = nil)",""],["regexp","Debugger::AddBreakpoint","Debugger/AddBreakpoint.html#method-i-regexp","()",""],["regexp","Debugger::ContinueCommand","Debugger/ContinueCommand.html#method-i-regexp","()",""],["regexp","Debugger::DeleteBreakpointCommand","Debugger/DeleteBreakpointCommand.html#method-i-regexp","()",""],["regexp","Debugger::FinishCommand","Debugger/FinishCommand.html#method-i-regexp","()",""],["regexp","Debugger::HelpCommand","Debugger/HelpCommand.html#method-i-regexp","()",""],["regexp","Debugger::IRBCommand","Debugger/IRBCommand.html#method-i-regexp","()",""],["regexp","Debugger::InfoCommand","Debugger/InfoCommand.html#method-i-regexp","()",""],["regexp","Debugger::JumpCommand","Debugger/JumpCommand.html#method-i-regexp","()",""],["regexp","Debugger::KillCommand","Debugger/KillCommand.html#method-i-regexp","()",""],["regexp","Debugger::ListCommand","Debugger/ListCommand.html#method-i-regexp","()",""],["regexp","Debugger::MethodCommand","Debugger/MethodCommand.html#method-i-regexp","()",""],["regexp","Debugger::MethodSigCommand","Debugger/MethodSigCommand.html#method-i-regexp","()",""],["regexp","Debugger::NextCommand","Debugger/NextCommand.html#method-i-regexp","()",""],["regexp","Debugger::QuitCommand","Debugger/QuitCommand.html#method-i-regexp","()",""],["regexp","Debugger::ReloadCommand","Debugger/ReloadCommand.html#method-i-regexp","()",""],["regexp","Debugger::SetCommand","Debugger/SetCommand.html#method-i-regexp","()",""],["regexp","Debugger::ShowCommand","Debugger/ShowCommand.html#method-i-regexp","()",""],["regexp","Debugger::SkipCommand","Debugger/SkipCommand.html#method-i-regexp","()",""],["regexp","Debugger::SourceCommand","Debugger/SourceCommand.html#method-i-regexp","()",""],["regexp","Debugger::StepCommand","Debugger/StepCommand.html#method-i-regexp","()",""],["regexp","Debugger::VarClassVarCommand","Debugger/VarClassVarCommand.html#method-i-regexp","()",""],["regexp","Debugger::VarInheritCommand","Debugger/VarInheritCommand.html#method-i-regexp","()",""],["regexp","Debugger::VarLocalCommand","Debugger/VarLocalCommand.html#method-i-regexp","()",""],["regexp","Debugger::WhereCommand","Debugger/WhereCommand.html#method-i-regexp","()",""],["run_init_script","Debugger","Debugger.html#method-c-run_init_script","(out = handler.interface)","<p>Runs normal debugger initialization scripts Reads and executes the commands\nfrom init file (if any) in …\n"],["run_script","Debugger","Debugger.html#method-c-run_script","(file, out = handler.interface, verbose=false)","<p>Runs a script file\n"],["settings","Debugger","Debugger.html#method-c-settings","()","<p>Returns setting object. Use Debugger.settings[] and Debugger.settings[]=\nmethods to query and set debugger …\n"],["show_onoff","Debugger::ParseFunctions","Debugger/ParseFunctions.html#method-i-show_onoff","(bool)","<p>Return ‘on’ or ‘off’ for supplied parameter. The parmeter should be true,\nfalse or nil.\n"],["source_reload","Debugger","Debugger.html#method-c-source_reload","()",""],["split_commands","Debugger::Processor","Debugger/Processor.html#method-i-split_commands","(input)","<p>Split commands like this: split_commands(“abc;def;ghi;jkl”) =&gt; [“abc”,\n“def;ghi”, …\n"],["start","Debugger","Debugger.html#method-c-start","(options={}, &block)","<p>Debugger.start(options) -&gt; bool Debugger.start(options) { … } -&gt; obj\n<p>If it’s called without a …\n"],["start_client","Debugger","Debugger.html#method-c-start_client","(host = 'localhost', port = PORT)","<p>Connects to the remote debugger\n"],["start_remote","Debugger","Debugger.html#method-c-start_remote","(host = nil, port = PORT)","<p>Starts a remote debugger.\n"],["start_server","Debugger","Debugger.html#method-c-start_server","(host = nil, port = PORT)",""],["state","TestDsl","TestDsl.html#method-i-state","()",""],["syntax_valid?","Debugger::ParseFunctions","Debugger/ParseFunctions.html#method-i-syntax_valid-3F","(code)","<p>Return true if code is syntactically correct for Ruby.\n"],["temporary_change_hash_value","TestDsl","TestDsl.html#method-i-temporary_change_hash_value","(item, key, value)",""],["temporary_change_hash_value","TestDsl::ClassMethods","TestDsl/ClassMethods.html#method-i-temporary_change_hash_value","(item, key, value)",""],["temporary_change_method_value","TestDsl","TestDsl.html#method-i-temporary_change_method_value","(item, method, value)",""],["temporary_change_method_value","TestDsl::ClassMethods","TestDsl/ClassMethods.html#method-i-temporary_change_method_value","(item, method, value)",""],["temporary_set_const","TestDsl","TestDsl.html#method-i-temporary_set_const","(klass, const, value)",""],["temporary_set_const","TestDsl::ClassMethods","TestDsl/ClassMethods.html#method-i-temporary_set_const","(klass, const, value)",""],["type","Printers::Base","Printers/Base.html#method-i-type","()",""],["yaml_file_path","PrinterHelpers","PrinterHelpers.html#method-i-yaml_file_path","(filename)",""]]}}