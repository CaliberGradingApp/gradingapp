var search_data = {"index":{"searchIndex":["synchronizeddelegator","threadsafe","array","atomicreferencecachebackend","node","table","cache","hash","mricachebackend","nonconcurrentcachebackend","synchronizedcachebackend","util","adder","cheaplockable","poweroftwotuple","striped64","cell","volatile","volatiletuple","xorshiftrandom","threadsafe","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","_mon_initialize()","add()","allocate()","attr_volatile()","cas()","cas_computed()","cas_new_node()","clear()","clear()","clear()","clear()","compare_and_set()","compute()","compute()","compute()","compute()","compute_if_absent()","compute_if_absent()","compute_if_absent()","compute_if_absent()","compute_if_present()","compute_if_present()","compute_if_present()","compute_if_present()","decrement()","delete()","delete()","delete()","delete()","delete_node_at()","delete_pair()","delete_pair()","delete_pair()","delete_pair()","each()","each_key()","each_pair()","each_pair()","each_value()","empty?()","empty?()","fetch()","get()","get()","get_and_set()","get_and_set()","get_and_set()","get_and_set()","get_or_default()","get_or_default()","get_or_default()","hash_to_index()","increment()","key?()","key?()","key?()","key?()","keys()","locked?()","marshal_dump()","marshal_load()","matches?()","merge_pair()","merge_pair()","merge_pair()","merge_pair()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","next_in_size_table()","pure_hash()","put_if_absent()","replace_if_exists()","replace_if_exists()","replace_if_exists()","replace_if_exists()","replace_pair()","replace_pair()","replace_pair()","replace_pair()","reset()","retry_update()","size()","size()","size()","size()","size()","sum()","try_await_lock()","try_lock_via_hash()","try_lock_via_hash()","try_to_cas_in_computed()","unlock_via_hash()","value?()","value?()","value?()","values()","volatile_get()","volatile_get_by_hash()","volatile_set()","volatile_set_by_hash()","xorshift()"],"longSearchIndex":["synchronizeddelegator","threadsafe","threadsafe::array","threadsafe::atomicreferencecachebackend","threadsafe::atomicreferencecachebackend::node","threadsafe::atomicreferencecachebackend::table","threadsafe::cache","threadsafe::hash","threadsafe::mricachebackend","threadsafe::nonconcurrentcachebackend","threadsafe::synchronizedcachebackend","threadsafe::util","threadsafe::util::adder","threadsafe::util::cheaplockable","threadsafe::util::poweroftwotuple","threadsafe::util::striped64","threadsafe::util::striped64::cell","threadsafe::util::volatile","threadsafe::util::volatiletuple","threadsafe::util::xorshiftrandom","threadsafe","threadsafe::atomicreferencecachebackend#[]()","threadsafe::cache#[]()","threadsafe::nonconcurrentcachebackend#[]()","threadsafe::synchronizedcachebackend#[]()","threadsafe::atomicreferencecachebackend#[]=()","threadsafe::mricachebackend#[]=()","threadsafe::nonconcurrentcachebackend#[]=()","threadsafe::synchronizedcachebackend#[]=()","threadsafe#_mon_initialize()","threadsafe::util::adder#add()","threadsafe::allocate()","threadsafe::util::volatile#attr_volatile()","threadsafe::util::volatiletuple#cas()","threadsafe::util::striped64::cell#cas_computed()","threadsafe::atomicreferencecachebackend::table#cas_new_node()","threadsafe::atomicreferencecachebackend#clear()","threadsafe::mricachebackend#clear()","threadsafe::nonconcurrentcachebackend#clear()","threadsafe::synchronizedcachebackend#clear()","threadsafe::util::volatiletuple#compare_and_set()","threadsafe::atomicreferencecachebackend#compute()","threadsafe::mricachebackend#compute()","threadsafe::nonconcurrentcachebackend#compute()","threadsafe::synchronizedcachebackend#compute()","threadsafe::atomicreferencecachebackend#compute_if_absent()","threadsafe::mricachebackend#compute_if_absent()","threadsafe::nonconcurrentcachebackend#compute_if_absent()","threadsafe::synchronizedcachebackend#compute_if_absent()","threadsafe::atomicreferencecachebackend#compute_if_present()","threadsafe::mricachebackend#compute_if_present()","threadsafe::nonconcurrentcachebackend#compute_if_present()","threadsafe::synchronizedcachebackend#compute_if_present()","threadsafe::util::adder#decrement()","threadsafe::atomicreferencecachebackend#delete()","threadsafe::mricachebackend#delete()","threadsafe::nonconcurrentcachebackend#delete()","threadsafe::synchronizedcachebackend#delete()","threadsafe::atomicreferencecachebackend::table#delete_node_at()","threadsafe::atomicreferencecachebackend#delete_pair()","threadsafe::mricachebackend#delete_pair()","threadsafe::nonconcurrentcachebackend#delete_pair()","threadsafe::synchronizedcachebackend#delete_pair()","threadsafe::util::volatiletuple#each()","threadsafe::cache#each_key()","threadsafe::atomicreferencecachebackend#each_pair()","threadsafe::nonconcurrentcachebackend#each_pair()","threadsafe::cache#each_value()","threadsafe::atomicreferencecachebackend#empty?()","threadsafe::cache#empty?()","threadsafe::cache#fetch()","threadsafe::cache#get()","threadsafe::util::xorshiftrandom#get()","threadsafe::atomicreferencecachebackend#get_and_set()","threadsafe::mricachebackend#get_and_set()","threadsafe::nonconcurrentcachebackend#get_and_set()","threadsafe::synchronizedcachebackend#get_and_set()","threadsafe::atomicreferencecachebackend#get_or_default()","threadsafe::nonconcurrentcachebackend#get_or_default()","threadsafe::synchronizedcachebackend#get_or_default()","threadsafe::util::poweroftwotuple#hash_to_index()","threadsafe::util::adder#increment()","threadsafe::atomicreferencecachebackend#key?()","threadsafe::atomicreferencecachebackend::node#key?()","threadsafe::nonconcurrentcachebackend#key?()","threadsafe::synchronizedcachebackend#key?()","threadsafe::cache#keys()","threadsafe::atomicreferencecachebackend::node#locked?()","threadsafe::cache#marshal_dump()","threadsafe::cache#marshal_load()","threadsafe::atomicreferencecachebackend::node#matches?()","threadsafe::atomicreferencecachebackend#merge_pair()","threadsafe::mricachebackend#merge_pair()","threadsafe::nonconcurrentcachebackend#merge_pair()","threadsafe::synchronizedcachebackend#merge_pair()","synchronizeddelegator#method_missing()","synchronizeddelegator::new()","threadsafe::atomicreferencecachebackend::new()","threadsafe::atomicreferencecachebackend::node::new()","threadsafe::cache::new()","threadsafe::nonconcurrentcachebackend::new()","threadsafe::util::poweroftwotuple::new()","threadsafe::util::striped64::new()","threadsafe::util::volatiletuple::new()","threadsafe::util::poweroftwotuple#next_in_size_table()","threadsafe::atomicreferencecachebackend::node#pure_hash()","threadsafe::cache#put_if_absent()","threadsafe::atomicreferencecachebackend#replace_if_exists()","threadsafe::mricachebackend#replace_if_exists()","threadsafe::nonconcurrentcachebackend#replace_if_exists()","threadsafe::synchronizedcachebackend#replace_if_exists()","threadsafe::atomicreferencecachebackend#replace_pair()","threadsafe::mricachebackend#replace_pair()","threadsafe::nonconcurrentcachebackend#replace_pair()","threadsafe::synchronizedcachebackend#replace_pair()","threadsafe::util::adder#reset()","threadsafe::util::striped64#retry_update()","threadsafe::atomicreferencecachebackend#size()","threadsafe::cache#size()","threadsafe::nonconcurrentcachebackend#size()","threadsafe::synchronizedcachebackend#size()","threadsafe::util::volatiletuple#size()","threadsafe::util::adder#sum()","threadsafe::atomicreferencecachebackend::node#try_await_lock()","threadsafe::atomicreferencecachebackend::node#try_lock_via_hash()","threadsafe::atomicreferencecachebackend::table#try_lock_via_hash()","threadsafe::atomicreferencecachebackend::table#try_to_cas_in_computed()","threadsafe::atomicreferencecachebackend::node#unlock_via_hash()","threadsafe::cache#value?()","threadsafe::nonconcurrentcachebackend#value?()","threadsafe::synchronizedcachebackend#value?()","threadsafe::cache#values()","threadsafe::util::volatiletuple#volatile_get()","threadsafe::util::poweroftwotuple#volatile_get_by_hash()","threadsafe::util::volatiletuple#volatile_set()","threadsafe::util::poweroftwotuple#volatile_set_by_hash()","threadsafe::util::xorshiftrandom#xorshift()"],"info":[["SynchronizedDelegator","","SynchronizedDelegator.html","",""],["ThreadSafe","","ThreadSafe.html","",""],["ThreadSafe::Array","","ThreadSafe/Array.html","","<p>A thread-safe subclass of Array. This version locks against the object\nitself for every method call, …\n"],["ThreadSafe::AtomicReferenceCacheBackend","","ThreadSafe/AtomicReferenceCacheBackend.html","","<p>A Ruby port of the Doug Lea’s jsr166e.ConcurrentHashMapV8 class version\n1.59 available in public domain. …\n"],["ThreadSafe::AtomicReferenceCacheBackend::Node","","ThreadSafe/AtomicReferenceCacheBackend/Node.html","","<p>Key-value entry. Nodes with a hash field of <code>MOVED</code> are special,\nand do not contain user keys or values. …\n"],["ThreadSafe::AtomicReferenceCacheBackend::Table","","ThreadSafe/AtomicReferenceCacheBackend/Table.html","",""],["ThreadSafe::Cache","","ThreadSafe/Cache.html","",""],["ThreadSafe::Hash","","ThreadSafe/Hash.html","","<p>A thread-safe subclass of Hash. This version locks against the object\nitself for every method call, ensuring …\n"],["ThreadSafe::MriCacheBackend","","ThreadSafe/MriCacheBackend.html","",""],["ThreadSafe::NonConcurrentCacheBackend","","ThreadSafe/NonConcurrentCacheBackend.html","",""],["ThreadSafe::SynchronizedCacheBackend","","ThreadSafe/SynchronizedCacheBackend.html","",""],["ThreadSafe::Util","","ThreadSafe/Util.html","",""],["ThreadSafe::Util::Adder","","ThreadSafe/Util/Adder.html","","<p>A Ruby port of the Doug Lea’s jsr166e.LondAdder class version 1.8 available\nin public domain. Original …\n"],["ThreadSafe::Util::CheapLockable","","ThreadSafe/Util/CheapLockable.html","","<p>Provides a cheapest possible (mainly in terms of memory usage)\n<code>Mutex</code> with the <code>ConditionVariable</code> bundled …\n"],["ThreadSafe::Util::PowerOfTwoTuple","","ThreadSafe/Util/PowerOfTwoTuple.html","",""],["ThreadSafe::Util::Striped64","","ThreadSafe/Util/Striped64.html","","<p>A Ruby port of the Doug Lea’s jsr166e.Striped64 class version 1.6 available\nin public domain. Original …\n"],["ThreadSafe::Util::Striped64::Cell","","ThreadSafe/Util/Striped64/Cell.html","","<p>Padded variant of AtomicLong supporting only raw accesses plus CAS. The\n<code>value</code> field is placed between …\n"],["ThreadSafe::Util::Volatile","","ThreadSafe/Util/Volatile.html","",""],["ThreadSafe::Util::VolatileTuple","","ThreadSafe/Util/VolatileTuple.html","","<p>A fixed size array with volatile volatile getters/setters. Usage:\n\n<pre>arr = VolatileTuple.new(16)\narr.volatile_set(0, ...</pre>\n"],["ThreadSafe::Util::XorShiftRandom","","ThreadSafe/Util/XorShiftRandom.html","","<p>A xorshift random number (positive +Fixnum+s) generator, provides\nreasonably cheap way to generate thread …\n"],["Threadsafe","","Threadsafe.html","",""],["[]","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-5B-5D","(key)",""],["[]","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-5B-5D","(key)",""],["[]","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-5B-5D","(key)",""],["[]","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-5B-5D","(key)","<p>WARNING: Mutex_m is a non-reentrant lock, so the synchronized methods are\nnot allowed to call each other. …\n"],["[]=","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["_mon_initialize","ThreadSafe","ThreadSafe.html#method-i-_mon_initialize","()",""],["add","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-add","(x)","<p>Adds the given value.\n"],["allocate","ThreadSafe","ThreadSafe.html#method-c-allocate","()",""],["attr_volatile","ThreadSafe::Util::Volatile","ThreadSafe/Util/Volatile.html#method-i-attr_volatile","(*attr_names)","<p>Provides <code>volatile</code> (in the JVM’s sense) attribute accessors\nimplemented atop of the +AtomicReference+s. …\n"],["cas","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-cas","(i, old_value, new_value)",""],["cas_computed","ThreadSafe::Util::Striped64::Cell","ThreadSafe/Util/Striped64/Cell.html#method-i-cas_computed","()",""],["cas_new_node","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-cas_new_node","(i, hash, key, value)",""],["clear","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-clear","()","<p>Implementation for clear. Steps through each bin, removing all nodes.\n"],["clear","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-clear","()",""],["clear","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-clear","()",""],["clear","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-clear","()",""],["compare_and_set","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-compare_and_set","(i, old_value, new_value)",""],["compute","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-compute","(key)",""],["compute","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-compute","(key)",""],["compute","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-compute","(key)",""],["compute","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-compute","(key)",""],["compute_if_absent","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_absent","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_absent","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_absent","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_present","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-compute_if_present","(key)",""],["compute_if_present","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-compute_if_present","(key)",""],["compute_if_present","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-compute_if_present","(key)",""],["compute_if_present","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-compute_if_present","(key)",""],["decrement","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-decrement","()",""],["delete","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-delete","(key)",""],["delete","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-delete","(key)",""],["delete","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-delete","(key)",""],["delete","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-delete","(key)",""],["delete_node_at","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-delete_node_at","(i, node, predecessor_node)",""],["delete_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-delete_pair","(key, value)",""],["delete_pair","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-delete_pair","(key, value)",""],["delete_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-delete_pair","(key, value)",""],["delete_pair","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-delete_pair","(key, value)",""],["each","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-each","()",""],["each_key","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-each_key","()",""],["each_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-each_pair","()",""],["each_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-each_pair","()",""],["each_value","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-each_value","()",""],["empty?","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-empty-3F","()",""],["empty?","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-empty-3F","()",""],["fetch","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-fetch","(key, default_value = NULL)",""],["get","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-get","(key)",""],["get","ThreadSafe::Util::XorShiftRandom","ThreadSafe/Util/XorShiftRandom.html#method-i-get","()","<p>Generates an initial non-zero positive <code>Fixnum</code> via\n<code>Kernel.rand</code>.\n"],["get_and_set","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_and_set","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_and_set","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_and_set","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_or_default","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-get_or_default","(key, else_value = nil)",""],["get_or_default","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-get_or_default","(key, default_value)",""],["get_or_default","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-get_or_default","(key, default_value)",""],["hash_to_index","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-hash_to_index","(hash)",""],["increment","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-increment","()",""],["key?","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-key-3F","(key)",""],["key?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-key-3F","(key)",""],["key?","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-key-3F","(key)",""],["key?","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-key-3F","(key)",""],["keys","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-keys","()",""],["locked?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-locked-3F","()",""],["marshal_dump","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-marshal_dump","()",""],["marshal_load","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-marshal_load","(hash)",""],["matches?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-matches-3F","(key, hash)",""],["merge_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-merge_pair","(key, value)",""],["merge_pair","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-merge_pair","(key, value)",""],["merge_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-merge_pair","(key, value)",""],["merge_pair","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-merge_pair","(key, value)",""],["method_missing","SynchronizedDelegator","SynchronizedDelegator.html#method-i-method_missing","(m, *args, &block)",""],["new","SynchronizedDelegator","SynchronizedDelegator.html#method-c-new","(*)",""],["new","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-c-new","(options = nil)",""],["new","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-c-new","(hash, key, value, next_node = nil)",""],["new","ThreadSafe::Cache","ThreadSafe/Cache.html#method-c-new","(options = nil, &block)",""],["new","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-c-new","(options = nil)","<p>WARNING: all public methods of the class must operate on the @backend\ndirectly without calling each other. …\n"],["new","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-c-new","(size)",""],["new","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-c-new","()",""],["new","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-c-new","(size)",""],["next_in_size_table","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-next_in_size_table","()",""],["pure_hash","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-pure_hash","()",""],["put_if_absent","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-put_if_absent","(key, value)",""],["replace_if_exists","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_if_exists","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_if_exists","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_if_exists","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["replace_pair","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["replace_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["replace_pair","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["reset","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-reset","()",""],["retry_update","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-retry_update","(x, hash_code, was_uncontended)","<p>Handles cases of updates involving initialization, resizing, creating new\nCells, and/or contention.  …\n"],["size","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-size","()",""],["size","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-size","()",""],["size","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-size","()",""],["size","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-size","()",""],["size","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-size","()",""],["sum","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-sum","()","<p>Returns the current sum.  The returned value is <em>NOT</em> an atomic\nsnapshot: Invocation in the absence of …\n"],["try_await_lock","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-try_await_lock","(table, i)","<p>Spins a while if <code>LOCKED</code> bit set and this node is the first of\nits bin, and then sets <code>WAITING</code> bits on …\n"],["try_lock_via_hash","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-try_lock_via_hash","(node_hash = hash)",""],["try_lock_via_hash","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-try_lock_via_hash","(i, node, node_hash)",""],["try_to_cas_in_computed","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-try_to_cas_in_computed","(i, hash, key)",""],["unlock_via_hash","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-unlock_via_hash","(locked_hash, node_hash)",""],["value?","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-value-3F","(value)",""],["value?","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-value-3F","(value)",""],["value?","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-value-3F","(value)",""],["values","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-values","()",""],["volatile_get","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-volatile_get","(i)",""],["volatile_get_by_hash","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-volatile_get_by_hash","(hash)",""],["volatile_set","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-volatile_set","(i, value)",""],["volatile_set_by_hash","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-volatile_set_by_hash","(hash, value)",""],["xorshift","ThreadSafe::Util::XorShiftRandom","ThreadSafe/Util/XorShiftRandom.html#method-i-xorshift","(x)","<p>using the “yˆ=y&gt;&gt;a; yˆ=y&lt;&lt;b; yˆ=y&gt;&gt;c;” transform with the\n(a,b,c) tuple with …\n"]]}}