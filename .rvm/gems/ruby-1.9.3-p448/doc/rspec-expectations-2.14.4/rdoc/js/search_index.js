var search_data = {"index":{"searchIndex":["array","rspec","expectations","deprecatedconstants","deprecation","differ","expectationhandler","expectationnotmeterror","expectationtarget","negativeexpectationhandler","positiveexpectationhandler","syntax","expectexpressiongenerator","shouldexpressiongenerator","version","matchers","builtin","basematcher","be","beakindof","beaninstanceof","becomparedto","befalse","behelpers","benil","bepredicate","betrue","bewithin","change","cover","endwith","eq","eql","equal","exist","has","have","include","match","matcharray","negativeoperatormatcher","positiveoperatormatcher","raiseerror","respondto","satisfy","startandendwith","startwith","throwsymbol","yieldcontrol","yieldprobe","yieldsuccessiveargs","yieldwithargs","yieldwithnoargs","configuration","dsl","matcher","extensions","instanceevalwithargs","operatormatcher","pretty","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","__delegate_operator()","__delegate_operator()","_pretty_print()","actual_delta()","add_should_and_should_not_to()","argument()","arguments()","assert_used!()","assert_valid_expect_block!()","at_least()","at_most()","backtrace_formatter()","be()","be_a()","be_a_kind_of()","be_an()","be_an_instance_of()","be_close()","be_false()","be_instance_of()","be_kind_of()","be_nil()","be_true()","be_within()","blue()","by()","by_at_least()","by_at_most()","chain()","change()","check_message()","clear_generated_description()","color()","color?()","color_diff()","configuration()","const_missing()","context_lines()","cover()","default_should_host()","define()","deprecate()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","determine_collection()","determine_query_method()","diff_as_object()","diff_as_string()","diffable()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","differ()","differ=()","disable_deprecated_should()","disable_expect()","disable_should()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","element_matches?()","element_matches?()","enable_deprecated_should()","enable_expect()","enable_should()","end_with()","eq()","eql()","equal()","eval_block()","evaluate_value_proc()","exactly()","exist()","expect()","expect_enabled?()","expected_to_sentence()","expression_generator()","fail_with()","fail_with_message()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","failure_message_for_should_not()","for_expected()","format()","from()","generated_description()","get()","green()","handle_matcher()","handle_matcher()","have()","have_at_least()","have_at_most()","have_exactly()","include()","instance_eval_with_args()","is_a_matcher?()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match_array()","match_for_should()","match_for_should_not()","match_regex()","match_unless_raises()","match_unless_raises()","matcher()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","method_handle_for()","name()","name_to_sentence()","negative_expectation_expression()","negative_expression()","negative_expression()","negative_expression()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","none?()","not_a_collection()","not_to()","object_to_string()","of()","once()","percent_of()","positive_expression()","positive_expression()","positive_expression()","probe()","raise_block_syntax_error()","raise_error()","raise_exception()","red()","register()","registry()","relativities()","respond_to()","respond_to?()","respond_to?()","satisfy()","should()","should()","should_enabled?()","should_not()","should_not()","single_yield_args()","split_words()","start_with()","subset_matches?()","subset_matches?()","successive_yield_args()","syntax()","syntax=()","throw_symbol()","times()","to()","to()","to_not()","to_proc()","to_sentence()","to_word()","twice()","underscore()","unregister()","use_custom_matcher_or_delegate()","verify_message()","with()","yield_control()","yield_successive_args()","yield_with_args()","yield_with_no_args()","yielded_once?()"],"longSearchIndex":["array","rspec","rspec::expectations","rspec::expectations::deprecatedconstants","rspec::expectations::deprecation","rspec::expectations::differ","rspec::expectations::expectationhandler","rspec::expectations::expectationnotmeterror","rspec::expectations::expectationtarget","rspec::expectations::negativeexpectationhandler","rspec::expectations::positiveexpectationhandler","rspec::expectations::syntax","rspec::expectations::syntax::expectexpressiongenerator","rspec::expectations::syntax::shouldexpressiongenerator","rspec::expectations::version","rspec::matchers","rspec::matchers::builtin","rspec::matchers::builtin::basematcher","rspec::matchers::builtin::be","rspec::matchers::builtin::beakindof","rspec::matchers::builtin::beaninstanceof","rspec::matchers::builtin::becomparedto","rspec::matchers::builtin::befalse","rspec::matchers::builtin::behelpers","rspec::matchers::builtin::benil","rspec::matchers::builtin::bepredicate","rspec::matchers::builtin::betrue","rspec::matchers::builtin::bewithin","rspec::matchers::builtin::change","rspec::matchers::builtin::cover","rspec::matchers::builtin::endwith","rspec::matchers::builtin::eq","rspec::matchers::builtin::eql","rspec::matchers::builtin::equal","rspec::matchers::builtin::exist","rspec::matchers::builtin::has","rspec::matchers::builtin::have","rspec::matchers::builtin::include","rspec::matchers::builtin::match","rspec::matchers::builtin::matcharray","rspec::matchers::builtin::negativeoperatormatcher","rspec::matchers::builtin::positiveoperatormatcher","rspec::matchers::builtin::raiseerror","rspec::matchers::builtin::respondto","rspec::matchers::builtin::satisfy","rspec::matchers::builtin::startandendwith","rspec::matchers::builtin::startwith","rspec::matchers::builtin::throwsymbol","rspec::matchers::builtin::yieldcontrol","rspec::matchers::builtin::yieldprobe","rspec::matchers::builtin::yieldsuccessiveargs","rspec::matchers::builtin::yieldwithargs","rspec::matchers::builtin::yieldwithnoargs","rspec::matchers::configuration","rspec::matchers::dsl","rspec::matchers::dsl::matcher","rspec::matchers::extensions","rspec::matchers::extensions::instanceevalwithargs","rspec::matchers::operatormatcher","rspec::matchers::pretty","rspec::matchers::builtin::basematcher#==()","rspec::matchers::builtin::bewithin#==()","rspec::matchers::builtin::change#==()","rspec::matchers::builtin::has#==()","rspec::matchers::builtin::have#==()","rspec::matchers::builtin::raiseerror#==()","rspec::matchers::builtin::respondto#==()","rspec::matchers::builtin::satisfy#==()","rspec::matchers::builtin::throwsymbol#==()","rspec::matchers::builtin::yieldsuccessiveargs#==()","rspec::matchers::builtin::yieldwithargs#==()","rspec::matchers::builtin::bepredicate#===()","rspec::matchers::builtin::negativeoperatormatcher#__delegate_operator()","rspec::matchers::builtin::positiveoperatormatcher#__delegate_operator()","rspec::matchers::pretty#_pretty_print()","rspec::matchers::builtin::change#actual_delta()","rspec::matchers::configuration#add_should_and_should_not_to()","rspec::matchers::builtin::respondto#argument()","rspec::matchers::builtin::respondto#arguments()","rspec::matchers::builtin::yieldprobe#assert_used!()","rspec::matchers::builtin::yieldprobe::assert_valid_expect_block!()","rspec::matchers::builtin::yieldcontrol#at_least()","rspec::matchers::builtin::yieldcontrol#at_most()","rspec::matchers::configuration#backtrace_formatter()","rspec::matchers#be()","rspec::matchers#be_a()","rspec::matchers#be_a_kind_of()","rspec::matchers#be_an()","rspec::matchers#be_an_instance_of()","rspec::matchers#be_close()","rspec::matchers#be_false()","rspec::matchers#be_instance_of()","rspec::matchers#be_kind_of()","rspec::matchers#be_nil()","rspec::matchers#be_true()","rspec::matchers#be_within()","rspec::expectations::differ#blue()","rspec::matchers::builtin::change#by()","rspec::matchers::builtin::change#by_at_least()","rspec::matchers::builtin::change#by_at_most()","rspec::matchers::dsl::matcher#chain()","rspec::matchers#change()","rspec::expectations::expectationhandler::check_message()","rspec::matchers::clear_generated_description()","rspec::expectations::differ#color()","rspec::matchers::configuration#color?()","rspec::expectations::differ#color_diff()","rspec::matchers::configuration()","rspec::expectations::deprecatedconstants#const_missing()","rspec::expectations::differ#context_lines()","rspec::matchers#cover()","rspec::expectations::syntax#default_should_host()","rspec::matchers::dsl#define()","rspec::expectations::deprecation#deprecate()","rspec::matchers::builtin::basematcher#description()","rspec::matchers::builtin::beaninstanceof#description()","rspec::matchers::builtin::becomparedto#description()","rspec::matchers::builtin::bepredicate#description()","rspec::matchers::builtin::bewithin#description()","rspec::matchers::builtin::change#description()","rspec::matchers::builtin::has#description()","rspec::matchers::builtin::have#description()","rspec::matchers::builtin::include#description()","rspec::matchers::builtin::matcharray#description()","rspec::matchers::builtin::raiseerror#description()","rspec::matchers::builtin::respondto#description()","rspec::matchers::builtin::satisfy#description()","rspec::matchers::builtin::throwsymbol#description()","rspec::matchers::builtin::yieldsuccessiveargs#description()","rspec::matchers::builtin::yieldwithargs#description()","rspec::matchers::dsl::matcher#description()","rspec::matchers::operatormatcher#description()","rspec::matchers::builtin::have#determine_collection()","rspec::matchers::builtin::have#determine_query_method()","rspec::expectations::differ#diff_as_object()","rspec::expectations::differ#diff_as_string()","rspec::matchers::dsl::matcher#diffable()","rspec::matchers::builtin::basematcher#diffable?()","rspec::matchers::builtin::eq#diffable?()","rspec::matchers::builtin::eql#diffable?()","rspec::matchers::builtin::equal#diffable?()","rspec::matchers::builtin::include#diffable?()","rspec::matchers::builtin::match#diffable?()","rspec::matchers::dsl::matcher#diffable?()","rspec::expectations::differ()","rspec::expectations#differ=()","rspec::expectations::expectationtarget::disable_deprecated_should()","rspec::expectations::syntax#disable_expect()","rspec::expectations::syntax#disable_should()","rspec::matchers::builtin::cover#does_not_match?()","rspec::matchers::builtin::include#does_not_match?()","rspec::matchers::builtin::raiseerror#does_not_match?()","rspec::matchers::builtin::respondto#does_not_match?()","rspec::matchers::dsl::matcher#does_not_match?()","rspec::matchers::builtin::endwith#element_matches?()","rspec::matchers::builtin::startwith#element_matches?()","rspec::expectations::expectationtarget::enable_deprecated_should()","rspec::expectations::syntax#enable_expect()","rspec::expectations::syntax#enable_should()","rspec::matchers#end_with()","rspec::matchers#eq()","rspec::matchers#eql()","rspec::matchers#equal()","rspec::matchers::builtin::raiseerror#eval_block()","rspec::matchers::builtin::change#evaluate_value_proc()","rspec::matchers::builtin::yieldcontrol#exactly()","rspec::matchers#exist()","rspec::expectations::syntax#expect()","rspec::expectations::syntax#expect_enabled?()","rspec::matchers::pretty#expected_to_sentence()","rspec::expectations::syntax#expression_generator()","rspec::expectations::fail_with()","rspec::matchers::operatormatcher#fail_with_message()","rspec::matchers::builtin::basematcher#failure_message_for_should()","rspec::matchers::builtin::be#failure_message_for_should()","rspec::matchers::builtin::becomparedto#failure_message_for_should()","rspec::matchers::builtin::befalse#failure_message_for_should()","rspec::matchers::builtin::benil#failure_message_for_should()","rspec::matchers::builtin::bepredicate#failure_message_for_should()","rspec::matchers::builtin::betrue#failure_message_for_should()","rspec::matchers::builtin::bewithin#failure_message_for_should()","rspec::matchers::builtin::change#failure_message_for_should()","rspec::matchers::builtin::eq#failure_message_for_should()","rspec::matchers::builtin::eql#failure_message_for_should()","rspec::matchers::builtin::equal#failure_message_for_should()","rspec::matchers::builtin::has#failure_message_for_should()","rspec::matchers::builtin::have#failure_message_for_should()","rspec::matchers::builtin::matcharray#failure_message_for_should()","rspec::matchers::builtin::raiseerror#failure_message_for_should()","rspec::matchers::builtin::respondto#failure_message_for_should()","rspec::matchers::builtin::satisfy#failure_message_for_should()","rspec::matchers::builtin::startandendwith#failure_message_for_should()","rspec::matchers::builtin::throwsymbol#failure_message_for_should()","rspec::matchers::builtin::yieldcontrol#failure_message_for_should()","rspec::matchers::builtin::yieldsuccessiveargs#failure_message_for_should()","rspec::matchers::builtin::yieldwithargs#failure_message_for_should()","rspec::matchers::builtin::yieldwithnoargs#failure_message_for_should()","rspec::matchers::dsl::matcher#failure_message_for_should()","rspec::matchers::builtin::basematcher#failure_message_for_should_not()","rspec::matchers::builtin::be#failure_message_for_should_not()","rspec::matchers::builtin::becomparedto#failure_message_for_should_not()","rspec::matchers::builtin::befalse#failure_message_for_should_not()","rspec::matchers::builtin::benil#failure_message_for_should_not()","rspec::matchers::builtin::bepredicate#failure_message_for_should_not()","rspec::matchers::builtin::betrue#failure_message_for_should_not()","rspec::matchers::builtin::bewithin#failure_message_for_should_not()","rspec::matchers::builtin::change#failure_message_for_should_not()","rspec::matchers::builtin::eq#failure_message_for_should_not()","rspec::matchers::builtin::eql#failure_message_for_should_not()","rspec::matchers::builtin::equal#failure_message_for_should_not()","rspec::matchers::builtin::has#failure_message_for_should_not()","rspec::matchers::builtin::have#failure_message_for_should_not()","rspec::matchers::builtin::matcharray#failure_message_for_should_not()","rspec::matchers::builtin::raiseerror#failure_message_for_should_not()","rspec::matchers::builtin::respondto#failure_message_for_should_not()","rspec::matchers::builtin::satisfy#failure_message_for_should_not()","rspec::matchers::builtin::startandendwith#failure_message_for_should_not()","rspec::matchers::builtin::throwsymbol#failure_message_for_should_not()","rspec::matchers::builtin::yieldcontrol#failure_message_for_should_not()","rspec::matchers::builtin::yieldsuccessiveargs#failure_message_for_should_not()","rspec::matchers::builtin::yieldwithargs#failure_message_for_should_not()","rspec::matchers::builtin::yieldwithnoargs#failure_message_for_should_not()","rspec::matchers::dsl::matcher#failure_message_for_should_not()","rspec::matchers::dsl::matcher#for_expected()","rspec::expectations::differ#format()","rspec::matchers::builtin::change#from()","rspec::matchers::generated_description()","rspec::matchers::operatormatcher::get()","rspec::expectations::differ#green()","rspec::expectations::negativeexpectationhandler::handle_matcher()","rspec::expectations::positiveexpectationhandler::handle_matcher()","rspec::matchers#have()","rspec::matchers#have_at_least()","rspec::matchers#have_at_most()","rspec::matchers#have_exactly()","rspec::matchers#include()","rspec::matchers::extensions::instanceevalwithargs#instance_eval_with_args()","rspec::matchers::is_a_matcher?()","rspec::matchers#match()","rspec::matchers::builtin::be#match()","rspec::matchers::builtin::beakindof#match()","rspec::matchers::builtin::beaninstanceof#match()","rspec::matchers::builtin::befalse#match()","rspec::matchers::builtin::benil#match()","rspec::matchers::builtin::betrue#match()","rspec::matchers::builtin::eq#match()","rspec::matchers::builtin::eql#match()","rspec::matchers::builtin::equal#match()","rspec::matchers::builtin::match#match()","rspec::matchers::builtin::matcharray#match()","rspec::matchers::dsl::matcher#match()","rspec::matchers#match_array()","rspec::matchers::dsl::matcher#match_for_should()","rspec::matchers::dsl::matcher#match_for_should_not()","rspec::matchers#match_regex()","rspec::matchers::builtin::basematcher#match_unless_raises()","rspec::matchers::dsl::matcher#match_unless_raises()","rspec::matchers::dsl#matcher()","rspec::matchers::builtin::basematcher#matches?()","rspec::matchers::builtin::becomparedto#matches?()","rspec::matchers::builtin::bepredicate#matches?()","rspec::matchers::builtin::bewithin#matches?()","rspec::matchers::builtin::change#matches?()","rspec::matchers::builtin::cover#matches?()","rspec::matchers::builtin::exist#matches?()","rspec::matchers::builtin::has#matches?()","rspec::matchers::builtin::have#matches?()","rspec::matchers::builtin::include#matches?()","rspec::matchers::builtin::raiseerror#matches?()","rspec::matchers::builtin::respondto#matches?()","rspec::matchers::builtin::satisfy#matches?()","rspec::matchers::builtin::startandendwith#matches?()","rspec::matchers::builtin::throwsymbol#matches?()","rspec::matchers::builtin::yieldcontrol#matches?()","rspec::matchers::builtin::yieldsuccessiveargs#matches?()","rspec::matchers::builtin::yieldwithargs#matches?()","rspec::matchers::builtin::yieldwithnoargs#matches?()","rspec::matchers::dsl::matcher#matches?()","rspec::expectations::method_handle_for()","rspec::matchers::pretty#name()","rspec::matchers::pretty#name_to_sentence()","rspec::matchers::builtin::becomparedto#negative_expectation_expression()","rspec::expectations::syntax#negative_expression()","rspec::expectations::syntax::expectexpressiongenerator::negative_expression()","rspec::expectations::syntax::shouldexpressiongenerator::negative_expression()","rspec::expectations::expectationtarget::new()","rspec::matchers::builtin::basematcher::new()","rspec::matchers::builtin::be::new()","rspec::matchers::builtin::becomparedto::new()","rspec::matchers::builtin::bepredicate::new()","rspec::matchers::builtin::bewithin::new()","rspec::matchers::builtin::change::new()","rspec::matchers::builtin::cover::new()","rspec::matchers::builtin::exist::new()","rspec::matchers::builtin::has::new()","rspec::matchers::builtin::have::new()","rspec::matchers::builtin::include::new()","rspec::matchers::builtin::raiseerror::new()","rspec::matchers::builtin::respondto::new()","rspec::matchers::builtin::satisfy::new()","rspec::matchers::builtin::startandendwith::new()","rspec::matchers::builtin::throwsymbol::new()","rspec::matchers::builtin::yieldcontrol::new()","rspec::matchers::builtin::yieldprobe::new()","rspec::matchers::builtin::yieldsuccessiveargs::new()","rspec::matchers::builtin::yieldwithargs::new()","rspec::matchers::dsl::matcher::new()","rspec::matchers::operatormatcher::new()","array#none?()","rspec::matchers::builtin::have#not_a_collection()","rspec::expectations::expectationtarget#not_to()","rspec::expectations::differ#object_to_string()","rspec::matchers::builtin::bewithin#of()","rspec::matchers::builtin::yieldcontrol#once()","rspec::matchers::builtin::bewithin#percent_of()","rspec::expectations::syntax#positive_expression()","rspec::expectations::syntax::expectexpressiongenerator::positive_expression()","rspec::expectations::syntax::shouldexpressiongenerator::positive_expression()","rspec::matchers::builtin::yieldprobe::probe()","rspec::matchers::builtin::change#raise_block_syntax_error()","rspec::matchers#raise_error()","rspec::matchers#raise_exception()","rspec::expectations::differ#red()","rspec::matchers::operatormatcher::register()","rspec::matchers::operatormatcher::registry()","rspec::matchers::builtin::have#relativities()","rspec::matchers#respond_to()","rspec::matchers::builtin::have#respond_to?()","rspec::matchers::dsl::matcher#respond_to?()","rspec::matchers#satisfy()","rspec::expectations::expectationtarget#should()","rspec::expectations::syntax#should()","rspec::expectations::syntax#should_enabled?()","rspec::expectations::expectationtarget#should_not()","rspec::expectations::syntax#should_not()","rspec::matchers::builtin::yieldprobe#single_yield_args()","rspec::matchers::pretty#split_words()","rspec::matchers#start_with()","rspec::matchers::builtin::endwith#subset_matches?()","rspec::matchers::builtin::startwith#subset_matches?()","rspec::matchers::builtin::yieldprobe#successive_yield_args()","rspec::matchers::configuration#syntax()","rspec::matchers::configuration#syntax=()","rspec::matchers#throw_symbol()","rspec::matchers::builtin::yieldcontrol#times()","rspec::expectations::expectationtarget#to()","rspec::matchers::builtin::change#to()","rspec::expectations::expectationtarget#to_not()","rspec::matchers::builtin::yieldprobe#to_proc()","rspec::matchers::pretty#to_sentence()","rspec::matchers::pretty#to_word()","rspec::matchers::builtin::yieldcontrol#twice()","rspec::matchers::pretty#underscore()","rspec::matchers::operatormatcher::unregister()","rspec::matchers::operatormatcher::use_custom_matcher_or_delegate()","rspec::matchers::builtin::raiseerror#verify_message()","rspec::matchers::builtin::respondto#with()","rspec::matchers#yield_control()","rspec::matchers#yield_successive_args()","rspec::matchers#yield_with_args()","rspec::matchers#yield_with_no_args()","rspec::matchers::builtin::yieldprobe#yielded_once?()"],"info":[["Array","","Array.html","","<p>@private\n"],["RSpec","","RSpec.html","",""],["RSpec::Expectations","","RSpec/Expectations.html","","<p>RSpec::Expectations adds two instance methods to every object:\n\n<pre>should(matcher=nil)\nshould_not(matcher=nil)</pre>\n"],["RSpec::Expectations::DeprecatedConstants","","RSpec/Expectations/DeprecatedConstants.html","",""],["RSpec::Expectations::Deprecation","","RSpec/Expectations/Deprecation.html","",""],["RSpec::Expectations::Differ","","RSpec/Expectations/Differ.html","",""],["RSpec::Expectations::ExpectationHandler","","RSpec/Expectations/ExpectationHandler.html","",""],["RSpec::Expectations::ExpectationNotMetError","","RSpec/Expectations/ExpectationNotMetError.html","",""],["RSpec::Expectations::ExpectationTarget","","RSpec/Expectations/ExpectationTarget.html","","<p>Wraps the target of an expectation. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expect</span>(<span class=\"ruby-identifier\">something</span>) <span class=\"ruby-comment\"># =&gt; ExpectationTarget wrapping something ...</span>\n</pre>\n"],["RSpec::Expectations::NegativeExpectationHandler","","RSpec/Expectations/NegativeExpectationHandler.html","",""],["RSpec::Expectations::PositiveExpectationHandler","","RSpec/Expectations/PositiveExpectationHandler.html","",""],["RSpec::Expectations::Syntax","","RSpec/Expectations/Syntax.html","","<p>@api private Provides methods for enabling and disabling the available\nsyntaxes provided by rspec-expectations. …\n"],["RSpec::Expectations::Syntax::ExpectExpressionGenerator","","RSpec/Expectations/Syntax/ExpectExpressionGenerator.html","","<p>@api private Generates expectation expressions for the `expect` syntax.\n"],["RSpec::Expectations::Syntax::ShouldExpressionGenerator","","RSpec/Expectations/Syntax/ShouldExpressionGenerator.html","","<p>@api private Generates expectation expressions for the `should` syntax.\n"],["RSpec::Expectations::Version","","RSpec/Expectations/Version.html","","<p>@private\n"],["RSpec::Matchers","","RSpec/Matchers.html","","<p>RSpec::Matchers provides a number of useful matchers we use to define\nexpectations. A matcher is any …\n"],["RSpec::Matchers::BuiltIn","","RSpec/Matchers/BuiltIn.html","",""],["RSpec::Matchers::BuiltIn::BaseMatcher","","RSpec/Matchers/BuiltIn/BaseMatcher.html","","<p>@api private\n<p>Used <em>internally</em> as a base class for matchers that ship with\nrspec-expectations.\n<p>### Warning: …\n"],["RSpec::Matchers::BuiltIn::Be","","RSpec/Matchers/BuiltIn/Be.html","",""],["RSpec::Matchers::BuiltIn::BeAKindOf","","RSpec/Matchers/BuiltIn/BeAKindOf.html","",""],["RSpec::Matchers::BuiltIn::BeAnInstanceOf","","RSpec/Matchers/BuiltIn/BeAnInstanceOf.html","",""],["RSpec::Matchers::BuiltIn::BeComparedTo","","RSpec/Matchers/BuiltIn/BeComparedTo.html","",""],["RSpec::Matchers::BuiltIn::BeFalse","","RSpec/Matchers/BuiltIn/BeFalse.html","",""],["RSpec::Matchers::BuiltIn::BeHelpers","","RSpec/Matchers/BuiltIn/BeHelpers.html","",""],["RSpec::Matchers::BuiltIn::BeNil","","RSpec/Matchers/BuiltIn/BeNil.html","",""],["RSpec::Matchers::BuiltIn::BePredicate","","RSpec/Matchers/BuiltIn/BePredicate.html","",""],["RSpec::Matchers::BuiltIn::BeTrue","","RSpec/Matchers/BuiltIn/BeTrue.html","",""],["RSpec::Matchers::BuiltIn::BeWithin","","RSpec/Matchers/BuiltIn/BeWithin.html","",""],["RSpec::Matchers::BuiltIn::Change","","RSpec/Matchers/BuiltIn/Change.html","",""],["RSpec::Matchers::BuiltIn::Cover","","RSpec/Matchers/BuiltIn/Cover.html","",""],["RSpec::Matchers::BuiltIn::EndWith","","RSpec/Matchers/BuiltIn/EndWith.html","",""],["RSpec::Matchers::BuiltIn::Eq","","RSpec/Matchers/BuiltIn/Eq.html","",""],["RSpec::Matchers::BuiltIn::Eql","","RSpec/Matchers/BuiltIn/Eql.html","",""],["RSpec::Matchers::BuiltIn::Equal","","RSpec/Matchers/BuiltIn/Equal.html","",""],["RSpec::Matchers::BuiltIn::Exist","","RSpec/Matchers/BuiltIn/Exist.html","",""],["RSpec::Matchers::BuiltIn::Has","","RSpec/Matchers/BuiltIn/Has.html","",""],["RSpec::Matchers::BuiltIn::Have","","RSpec/Matchers/BuiltIn/Have.html","",""],["RSpec::Matchers::BuiltIn::Include","","RSpec/Matchers/BuiltIn/Include.html","",""],["RSpec::Matchers::BuiltIn::Match","","RSpec/Matchers/BuiltIn/Match.html","",""],["RSpec::Matchers::BuiltIn::MatchArray","","RSpec/Matchers/BuiltIn/MatchArray.html","",""],["RSpec::Matchers::BuiltIn::NegativeOperatorMatcher","","RSpec/Matchers/BuiltIn/NegativeOperatorMatcher.html","",""],["RSpec::Matchers::BuiltIn::PositiveOperatorMatcher","","RSpec/Matchers/BuiltIn/PositiveOperatorMatcher.html","",""],["RSpec::Matchers::BuiltIn::RaiseError","","RSpec/Matchers/BuiltIn/RaiseError.html","",""],["RSpec::Matchers::BuiltIn::RespondTo","","RSpec/Matchers/BuiltIn/RespondTo.html","",""],["RSpec::Matchers::BuiltIn::Satisfy","","RSpec/Matchers/BuiltIn/Satisfy.html","",""],["RSpec::Matchers::BuiltIn::StartAndEndWith","","RSpec/Matchers/BuiltIn/StartAndEndWith.html","",""],["RSpec::Matchers::BuiltIn::StartWith","","RSpec/Matchers/BuiltIn/StartWith.html","",""],["RSpec::Matchers::BuiltIn::ThrowSymbol","","RSpec/Matchers/BuiltIn/ThrowSymbol.html","",""],["RSpec::Matchers::BuiltIn::YieldControl","","RSpec/Matchers/BuiltIn/YieldControl.html","",""],["RSpec::Matchers::BuiltIn::YieldProbe","","RSpec/Matchers/BuiltIn/YieldProbe.html","",""],["RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html","",""],["RSpec::Matchers::BuiltIn::YieldWithArgs","","RSpec/Matchers/BuiltIn/YieldWithArgs.html","",""],["RSpec::Matchers::BuiltIn::YieldWithNoArgs","","RSpec/Matchers/BuiltIn/YieldWithNoArgs.html","",""],["RSpec::Matchers::Configuration","","RSpec/Matchers/Configuration.html","","<p>Provides configuration options for rspec-expectations.\n"],["RSpec::Matchers::DSL","","RSpec/Matchers/DSL.html","",""],["RSpec::Matchers::DSL::Matcher","","RSpec/Matchers/DSL/Matcher.html","","<p>Provides the context in which the block passed to RSpec::Matchers.define\nwill be evaluated.\n"],["RSpec::Matchers::Extensions","","RSpec/Matchers/Extensions.html","",""],["RSpec::Matchers::Extensions::InstanceEvalWithArgs","","RSpec/Matchers/Extensions/InstanceEvalWithArgs.html","",""],["RSpec::Matchers::OperatorMatcher","","RSpec/Matchers/OperatorMatcher.html","",""],["RSpec::Matchers::Pretty","","RSpec/Matchers/Pretty.html","",""],["==","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-3D-3D","(other)",""],["==","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-3D-3D","(actual)",""],["==","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-3D-3D","(event_proc)",""],["==","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-3D-3D","(actual)",""],["==","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-3D-3D","(collection_or_owner)",""],["==","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-3D-3D","(given_proc, negative_expectation = false)",""],["==","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-3D-3D","(actual)",""],["==","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-3D-3D","(actual, &block)",""],["==","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-3D-3D","(given_proc)",""],["==","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-3D-3D","(block)",""],["==","RSpec::Matchers::BuiltIn::YieldWithArgs","RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-3D-3D","(block)",""],["===","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-3D-3D-3D","(actual)",""],["__delegate_operator","RSpec::Matchers::BuiltIn::NegativeOperatorMatcher","RSpec/Matchers/BuiltIn/NegativeOperatorMatcher.html#method-i-__delegate_operator","(actual, operator, expected)",""],["__delegate_operator","RSpec::Matchers::BuiltIn::PositiveOperatorMatcher","RSpec/Matchers/BuiltIn/PositiveOperatorMatcher.html#method-i-__delegate_operator","(actual, operator, expected)",""],["_pretty_print","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-_pretty_print","(array)",""],["actual_delta","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-actual_delta","()",""],["add_should_and_should_not_to","RSpec::Matchers::Configuration","RSpec/Matchers/Configuration.html#method-i-add_should_and_should_not_to","(*modules)","<p>Adds `should` and `should_not` to the given classes or modules. This can be\nused to ensure `should` works …\n"],["argument","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-argument","()",""],["arguments","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-arguments","()",""],["assert_used!","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-assert_used-21","()",""],["assert_valid_expect_block!","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-c-assert_valid_expect_block-21","(block)",""],["at_least","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-at_least","(number)",""],["at_most","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-at_most","(number)",""],["backtrace_formatter","RSpec::Matchers::Configuration","RSpec/Matchers/Configuration.html#method-i-backtrace_formatter","()",""],["be","RSpec::Matchers","RSpec/Matchers.html#method-i-be","(*args)","<p>@example\n\n<pre>expect(actual).to     be_true\nexpect(actual).to     be_false\nexpect(actual).to     be_nil\nexpect(actual).to ...</pre>\n"],["be_a","RSpec::Matchers","RSpec/Matchers.html#method-i-be_a","(klass)","<p>passes if target.kind_of?(klass)\n"],["be_a_kind_of","RSpec::Matchers","RSpec/Matchers.html#method-i-be_a_kind_of","(expected)","<p>Passes if actual.kind_of?(expected)\n<p>@example\n\n<pre>expect(5).to     be_a_kind_of(Fixnum)\nexpect(5).to     be_a_kind_of(Numeric) ...</pre>\n"],["be_an","RSpec::Matchers","RSpec/Matchers.html#method-i-be_an","(klass)",""],["be_an_instance_of","RSpec::Matchers","RSpec/Matchers.html#method-i-be_an_instance_of","(expected)","<p>Passes if actual.instance_of?(expected)\n<p>@example\n\n<pre>expect(5).to     be_an_instance_of(Fixnum)\nexpect(5).not_to ...</pre>\n"],["be_close","RSpec::Matchers","RSpec/Matchers.html#method-i-be_close","(expected, delta)","<p>@deprecated use <code>be_within</code> instead.\n"],["be_false","RSpec::Matchers","RSpec/Matchers.html#method-i-be_false","()","<p>Passes if actual is falsy (false or nil)\n"],["be_instance_of","RSpec::Matchers","RSpec/Matchers.html#method-i-be_instance_of","(expected)",""],["be_kind_of","RSpec::Matchers","RSpec/Matchers.html#method-i-be_kind_of","(expected)",""],["be_nil","RSpec::Matchers","RSpec/Matchers.html#method-i-be_nil","()","<p>Passes if actual is nil\n"],["be_true","RSpec::Matchers","RSpec/Matchers.html#method-i-be_true","()","<p>Passes if actual is truthy (anything but false or nil)\n"],["be_within","RSpec::Matchers","RSpec/Matchers.html#method-i-be_within","(delta)","<p>Passes if actual == expected +/- delta\n<p>@example\n\n<pre>expect(result).to     be_within(0.5).of(3.0)\nexpect(result).not_to ...</pre>\n"],["blue","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-blue","(text)",""],["by","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-by","(expected_delta)",""],["by_at_least","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-by_at_least","(minimum)",""],["by_at_most","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-by_at_most","(maximum)",""],["chain","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-chain","(method, &block)","<p>Convenience for defining methods on this matcher to create a fluent\ninterface. The trick about fluent …\n"],["change","RSpec::Matchers","RSpec/Matchers.html#method-i-change","(receiver=nil, message=nil, &block)","<p>Applied to a proc, specifies that its execution will cause some value to\nchange.\n<p>@param [Object] receiver …\n"],["check_message","RSpec::Expectations::ExpectationHandler","RSpec/Expectations/ExpectationHandler.html#method-c-check_message","(msg)",""],["clear_generated_description","RSpec::Matchers","RSpec/Matchers.html#method-c-clear_generated_description","()",""],["color","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-color","(text, color_code)",""],["color?","RSpec::Matchers::Configuration","RSpec/Matchers/Configuration.html#method-i-color-3F","()",""],["color_diff","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-color_diff","(diff)",""],["configuration","RSpec::Matchers","RSpec/Matchers.html#method-c-configuration","()","<p>The configuration object @return [RSpec::Matchers::Configuration] the\nconfiguration object\n"],["const_missing","RSpec::Expectations::DeprecatedConstants","RSpec/Expectations/DeprecatedConstants.html#method-i-const_missing","(name)","<p>Displays deprecation warning when it captures Rspec and Spec. Otherwise\ndelegates to super.\n"],["context_lines","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-context_lines","()",""],["cover","RSpec::Matchers","RSpec/Matchers.html#method-i-cover","(*values)","<p>Passes if actual covers expected. This works for Ranges. You can also pass\nin multiple args and it will …\n"],["default_should_host","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-default_should_host","()","<p>@api private Determines where we add `should` and `should_not`.\n"],["define","RSpec::Matchers::DSL","RSpec/Matchers/DSL.html#method-i-define","(name, &declarations)","<p>Defines a custom matcher. @see RSpec::Matchers\n"],["deprecate","RSpec::Expectations::Deprecation","RSpec/Expectations/Deprecation.html#method-i-deprecate","(deprecated, options={})","<p>@private\n<p>Used internally to print deprecation warnings\n"],["description","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::BeAnInstanceOf","RSpec/Matchers/BuiltIn/BeAnInstanceOf.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::MatchArray","RSpec/Matchers/BuiltIn/MatchArray.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-description","()",""],["description","RSpec::Matchers::BuiltIn::YieldWithArgs","RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-description","()",""],["description","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-description","(&block)","<p>Customize the description to use for one-liners.  Only use this when the\ndescription generated by default …\n"],["description","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-i-description","()",""],["determine_collection","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-determine_collection","(collection_or_owner)",""],["determine_query_method","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-determine_query_method","(collection)",""],["diff_as_object","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-diff_as_object","(actual, expected)",""],["diff_as_string","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-diff_as_string","(input_data_new, input_data_old)","<p>This is snagged from diff/lcs/ldiff.rb (which is a commandline tool)\n"],["diffable","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-diffable","()","<p>Tells the matcher to diff the actual and expected values in the failure\nmessage.\n"],["diffable?","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-diffable-3F","()",""],["diffable?","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-diffable-3F","()",""],["diffable?","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-diffable-3F","()",""],["diffable?","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-diffable-3F","()",""],["diffable?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-diffable-3F","()",""],["diffable?","RSpec::Matchers::BuiltIn::Match","RSpec/Matchers/BuiltIn/Match.html#method-i-diffable-3F","()",""],["diffable?","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-diffable-3F","()","<p>@api private Used internally by objects returns by <code>should</code> and\n<code>should_not</code>.\n"],["differ","RSpec::Expectations","RSpec/Expectations.html#method-c-differ","()","<p>@private\n"],["differ=","RSpec::Expectations","RSpec/Expectations.html#method-i-differ-3D","(ignore)","<p>@deprecated (no replacement)\n"],["disable_deprecated_should","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-c-disable_deprecated_should","()",""],["disable_expect","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-disable_expect","(syntax_host = ::RSpec::Matchers)","<p>@api private Disables the `expect` syntax.\n"],["disable_should","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-disable_should","(syntax_host = default_should_host)","<p>@api private Disables the `should` syntax.\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Cover","RSpec/Matchers/BuiltIn/Cover.html#method-i-does_not_match-3F","(range)",""],["does_not_match?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-does_not_match-3F","(actual)",""],["does_not_match?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-does_not_match-3F","(given_proc)",""],["does_not_match?","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-does_not_match-3F","(actual)",""],["does_not_match?","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-does_not_match-3F","(actual)","<p>@api private Used internally by <code>should_not</code>\n"],["element_matches?","RSpec::Matchers::BuiltIn::EndWith","RSpec/Matchers/BuiltIn/EndWith.html#method-i-element_matches-3F","(expected, actual)",""],["element_matches?","RSpec::Matchers::BuiltIn::StartWith","RSpec/Matchers/BuiltIn/StartWith.html#method-i-element_matches-3F","(expected, actual)",""],["enable_deprecated_should","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-c-enable_deprecated_should","()",""],["enable_expect","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-enable_expect","(syntax_host = ::RSpec::Matchers)","<p>@api private Enables the `expect` syntax.\n"],["enable_should","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-enable_should","(syntax_host = default_should_host)","<p>@api private Enables the `should` syntax.\n"],["end_with","RSpec::Matchers","RSpec/Matchers.html#method-i-end_with","(*expected)","<p>Matches if the actual value ends with the expected value(s). In the case of\na string, matches against …\n"],["eq","RSpec::Matchers","RSpec/Matchers.html#method-i-eq","(expected)","<p>Passes if <code>actual == expected</code>.\n<p>See www.ruby-doc.org/core/classes/Object.html#M001057 for more information\n…\n"],["eql","RSpec::Matchers","RSpec/Matchers.html#method-i-eql","(expected)","<p>Passes if +actual.eql?(expected)+\n<p>See www.ruby-doc.org/core/classes/Object.html#M001057 for more information\n…\n"],["equal","RSpec::Matchers","RSpec/Matchers.html#method-i-equal","(expected)","<p>Passes if <code>actual.equal?(expected)</code> (object identity).\n<p>See www.ruby-doc.org/core/classes/Object.html#M001057 …\n"],["eval_block","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-eval_block","()",""],["evaluate_value_proc","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-evaluate_value_proc","()",""],["exactly","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-exactly","(number)",""],["exist","RSpec::Matchers","RSpec/Matchers.html#method-i-exist","(*args)","<p>Passes if `actual.exist?` or `actual.exists?`\n<p>@example\n\n<pre>expect(File).to exist(&quot;path/to/file&quot;)</pre>\n"],["expect","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-expect","(*target, &target_block)",""],["expect_enabled?","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-expect_enabled-3F","(syntax_host = ::RSpec::Matchers)","<p>@api private Indicates whether or not the `expect` syntax is enabled.\n"],["expected_to_sentence","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-expected_to_sentence","()",""],["expression_generator","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-expression_generator","()","<p>@api private Selects which expression generator to use based on the\nconfigured syntax.\n"],["fail_with","RSpec::Expectations","RSpec/Expectations.html#method-c-fail_with","(message, expected=nil, actual=nil)","<p>Raises an RSpec::Expectations::ExpectationNotMetError with message. @param\n[String] message @param [Object] …\n"],["fail_with_message","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-i-fail_with_message","(message)",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BeFalse","RSpec/Matchers/BuiltIn/BeFalse.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BeNil","RSpec/Matchers/BuiltIn/BeNil.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BeTrue","RSpec/Matchers/BuiltIn/BeTrue.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::MatchArray","RSpec/Matchers/BuiltIn/MatchArray.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::YieldWithArgs","RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::BuiltIn::YieldWithNoArgs","RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-failure_message_for_should","()",""],["failure_message_for_should","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-failure_message_for_should","(&block)","<p>Customize the failure messsage to use when this matcher is invoked with\n`should`. Only use this when …\n"],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BeFalse","RSpec/Matchers/BuiltIn/BeFalse.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BeNil","RSpec/Matchers/BuiltIn/BeNil.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BeTrue","RSpec/Matchers/BuiltIn/BeTrue.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::MatchArray","RSpec/Matchers/BuiltIn/MatchArray.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::YieldWithArgs","RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::BuiltIn::YieldWithNoArgs","RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-failure_message_for_should_not","()",""],["failure_message_for_should_not","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-failure_message_for_should_not","(&block)","<p>Customize the failure messsage to use when this matcher is invoked with\n`should_not`. Only use this when …\n"],["for_expected","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-for_expected","(*expected)","<p>@api private\n"],["format","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-format","()",""],["from","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-from","(before)",""],["generated_description","RSpec::Matchers","RSpec/Matchers.html#method-c-generated_description","()",""],["get","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-c-get","(klass, operator)",""],["green","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-green","(text)",""],["handle_matcher","RSpec::Expectations::NegativeExpectationHandler","RSpec/Expectations/NegativeExpectationHandler.html#method-c-handle_matcher","(actual, matcher, message=nil, &block)",""],["handle_matcher","RSpec::Expectations::PositiveExpectationHandler","RSpec/Expectations/PositiveExpectationHandler.html#method-c-handle_matcher","(actual, matcher, message=nil, &block)",""],["have","RSpec::Matchers","RSpec/Matchers.html#method-i-have","(n)","<p>Passes if receiver is a collection with the submitted number of items OR if\nthe receiver OWNS a collection …\n"],["have_at_least","RSpec::Matchers","RSpec/Matchers.html#method-i-have_at_least","(n)","<p>Exactly like have() with &gt;=.\n<p>@example\n\n<pre>expect(&quot;this&quot;).to have_at_least(3).letters</pre>\n"],["have_at_most","RSpec::Matchers","RSpec/Matchers.html#method-i-have_at_most","(n)","<p>Exactly like have() with &lt;=.\n<p>@example\n\n<pre>expect(&quot;this&quot;).to have_at_most(4).letters</pre>\n"],["have_exactly","RSpec::Matchers","RSpec/Matchers.html#method-i-have_exactly","(n)",""],["include","RSpec::Matchers","RSpec/Matchers.html#method-i-include","(*expected)","<p>Passes if actual includes expected. This works for collections and Strings.\nYou can also pass in multiple …\n"],["instance_eval_with_args","RSpec::Matchers::Extensions::InstanceEvalWithArgs","RSpec/Matchers/Extensions/InstanceEvalWithArgs.html#method-i-instance_eval_with_args","(*args, &block)","<p>based on Bounded Spec InstanceExec (Mauricio Fernandez)\neigenclass.org/hiki/bounded+space+instance_exec …\n"],["is_a_matcher?","RSpec::Matchers","RSpec/Matchers.html#method-c-is_a_matcher-3F","(obj)","<p>@api private\n"],["match","RSpec::Matchers","RSpec/Matchers.html#method-i-match","(expected)","<p>Given a Regexp or String, passes if actual.match(pattern)\n<p>@example\n\n<pre>expect(email).to   match(/^([^\\s]+)((?:[-a-z0-9]+\\.)+[a-z]{2,})$/i) ...</pre>\n"],["match","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::BeAKindOf","RSpec/Matchers/BuiltIn/BeAKindOf.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::BeAnInstanceOf","RSpec/Matchers/BuiltIn/BeAnInstanceOf.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::BeFalse","RSpec/Matchers/BuiltIn/BeFalse.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::BeNil","RSpec/Matchers/BuiltIn/BeNil.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::BeTrue","RSpec/Matchers/BuiltIn/BeTrue.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Match","RSpec/Matchers/BuiltIn/Match.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::MatchArray","RSpec/Matchers/BuiltIn/MatchArray.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-match","(&block)","<p>Stores the block that is used to determine whether this matcher passes or\nfails. The block should return …\n"],["match_array","RSpec::Matchers","RSpec/Matchers.html#method-i-match_array","(array)","<p>Passes if actual contains all of the expected regardless of order. This\nworks for collections. Pass in …\n"],["match_for_should","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-match_for_should","(&block)",""],["match_for_should_not","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-match_for_should_not","(&block)","<p>Use this to define the block for a negative expectation (`should_not`) when\nthe positive and negative …\n"],["match_regex","RSpec::Matchers","RSpec/Matchers.html#method-i-match_regex","(expected)",""],["match_unless_raises","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-match_unless_raises","(*exceptions)",""],["match_unless_raises","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-match_unless_raises","(exception=Exception, &block)","<p>Use this instead of `match` when the block will raise an exception rather\nthan returning false to indicate …\n"],["matcher","RSpec::Matchers::DSL","RSpec/Matchers/DSL.html#method-i-matcher","(name, &declarations)",""],["matches?","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-matches-3F","(event_proc)",""],["matches?","RSpec::Matchers::BuiltIn::Cover","RSpec/Matchers/BuiltIn/Cover.html#method-i-matches-3F","(range)",""],["matches?","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-matches-3F","(collection_or_owner)",""],["matches?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-matches-3F","(given_proc, negative_expectation = false)",""],["matches?","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-matches-3F","(actual, &block)",""],["matches?","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-matches-3F","(given_proc)",""],["matches?","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-matches-3F","(block)",""],["matches?","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-matches-3F","(block)",""],["matches?","RSpec::Matchers::BuiltIn::YieldWithArgs","RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-matches-3F","(block)",""],["matches?","RSpec::Matchers::BuiltIn::YieldWithNoArgs","RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-matches-3F","(block)",""],["matches?","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-matches-3F","(actual)","<p>@api private Used internally by <code>should</code> and\n<code>should_not</code>.\n"],["method_handle_for","RSpec::Expectations","RSpec/Expectations.html#method-c-method_handle_for","(object, method_name)",""],["name","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-name","()",""],["name_to_sentence","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-name_to_sentence","()",""],["negative_expectation_expression","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-negative_expectation_expression","()",""],["negative_expression","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-negative_expression","(target_expression, matcher_expression)","<p>@api private Generates a negative expectation expression.\n"],["negative_expression","RSpec::Expectations::Syntax::ExpectExpressionGenerator","RSpec/Expectations/Syntax/ExpectExpressionGenerator.html#method-c-negative_expression","(target_expression, matcher_expression)",""],["negative_expression","RSpec::Expectations::Syntax::ShouldExpressionGenerator","RSpec/Expectations/Syntax/ShouldExpressionGenerator.html#method-c-negative_expression","(target_expression, matcher_expression)",""],["new","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-c-new","(target)","<p>@api private\n"],["new","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-c-new","(expected = nil)",""],["new","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-c-new","(*args, &block)",""],["new","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-c-new","(operand, operator)",""],["new","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-c-new","(*args, &block)",""],["new","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-c-new","(delta)",""],["new","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-c-new","(receiver=nil, message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::Cover","RSpec/Matchers/BuiltIn/Cover.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-c-new","(expected, *args)",""],["new","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-c-new","(expected, relativity=:exactly)",""],["new","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-c-new","(expected_error_or_message=Exception, expected_message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-c-new","(*names)",""],["new","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-c-new","(&block)",""],["new","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-c-new","(expected_symbol = nil, expected_arg=nil)",""],["new","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-c-new","()",""],["new","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-c-new","()",""],["new","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-c-new","(*args)",""],["new","RSpec::Matchers::BuiltIn::YieldWithArgs","RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-c-new","(*args)",""],["new","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-c-new","(name, &declarations)","<p>@api private\n"],["new","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-c-new","(actual)",""],["none?","Array","Array.html#method-i-none-3F","(&block)","<p>Supports <code>none?</code> on early patch levels of Ruby 1.8.6\n"],["not_a_collection","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-not_a_collection","()",""],["not_to","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-not_to","(matcher=nil, message=nil, &block)","<p>Runs the given expectation, passing if `matcher` returns false. @example\n\n<pre>expect(value).not_to eq(5)</pre>\n<p>@param …\n"],["object_to_string","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-object_to_string","(object)",""],["of","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-of","(expected)",""],["once","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-once","()",""],["percent_of","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-percent_of","(expected)",""],["positive_expression","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-positive_expression","(target_expression, matcher_expression)","<p>@api private Generates a positive expectation expression.\n"],["positive_expression","RSpec::Expectations::Syntax::ExpectExpressionGenerator","RSpec/Expectations/Syntax/ExpectExpressionGenerator.html#method-c-positive_expression","(target_expression, matcher_expression)",""],["positive_expression","RSpec::Expectations::Syntax::ShouldExpressionGenerator","RSpec/Expectations/Syntax/ShouldExpressionGenerator.html#method-c-positive_expression","(target_expression, matcher_expression)",""],["probe","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-c-probe","(block)",""],["raise_block_syntax_error","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-raise_block_syntax_error","()",""],["raise_error","RSpec::Matchers","RSpec/Matchers.html#method-i-raise_error","(error=Exception, message=nil, &block)","<p>With no args, matches if any error is raised. With a named error, matches\nonly if that specific error …\n"],["raise_exception","RSpec::Matchers","RSpec/Matchers.html#method-i-raise_exception","(error=Exception, message=nil, &block)",""],["red","RSpec::Expectations::Differ","RSpec/Expectations/Differ.html#method-i-red","(text)",""],["register","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-c-register","(klass, operator, matcher)",""],["registry","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-c-registry","()",""],["relativities","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-relativities","()",""],["respond_to","RSpec::Matchers","RSpec/Matchers.html#method-i-respond_to","(*names)","<p>Matches if the target object responds to all of the names provided. Names\ncan be Strings or Symbols. …\n"],["respond_to?","RSpec::Matchers::BuiltIn::Have","RSpec/Matchers/BuiltIn/Have.html#method-i-respond_to-3F","(m)",""],["respond_to?","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-respond_to-3F","(method, include_private=false)",""],["satisfy","RSpec::Matchers","RSpec/Matchers.html#method-i-satisfy","(&block)","<p>Passes if the submitted block returns true. Yields target to the block.\n<p>Generally speaking, this should …\n"],["should","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-should","(*args)",""],["should","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-should","(matcher=nil, message=nil, &block)",""],["should_enabled?","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-should_enabled-3F","(syntax_host = default_should_host)","<p>@api private Indicates whether or not the `should` syntax is enabled.\n"],["should_not","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-should_not","(*args)",""],["should_not","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-should_not","(matcher=nil, message=nil, &block)",""],["single_yield_args","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-single_yield_args","()",""],["split_words","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-split_words","(sym)",""],["start_with","RSpec::Matchers","RSpec/Matchers.html#method-i-start_with","(*expected)","<p>Matches if the actual value starts with the expected value(s). In the case\nof a string, matches against …\n"],["subset_matches?","RSpec::Matchers::BuiltIn::EndWith","RSpec/Matchers/BuiltIn/EndWith.html#method-i-subset_matches-3F","(expected, actual)",""],["subset_matches?","RSpec::Matchers::BuiltIn::StartWith","RSpec/Matchers/BuiltIn/StartWith.html#method-i-subset_matches-3F","(expected, actual)",""],["successive_yield_args","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-successive_yield_args","()",""],["syntax","RSpec::Matchers::Configuration","RSpec/Matchers/Configuration.html#method-i-syntax","()","<p>The list of configured syntaxes. @return [Array&lt;Symbol&gt;] the list of\nconfigured syntaxes.\n"],["syntax=","RSpec::Matchers::Configuration","RSpec/Matchers/Configuration.html#method-i-syntax-3D","(values)","<p>Configures the supported syntax. @param [Array&lt;Symbol&gt;, Symbol]\nvalues the syntaxes to enable @example …\n"],["throw_symbol","RSpec::Matchers","RSpec/Matchers.html#method-i-throw_symbol","(expected_symbol=nil, expected_arg=nil)","<p>Given no argument, matches if a proc throws any Symbol.\n<p>Given a Symbol, matches if the given proc throws …\n"],["times","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-times","()",""],["to","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-to","(matcher=nil, message=nil, &block)","<p>Runs the given expectation, passing if `matcher` returns true. @example\n\n<pre>expect(value).to eq(5)\nexpect ...</pre>\n"],["to","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-to","(to)",""],["to_not","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-to_not","(matcher=nil, message=nil, &block)",""],["to_proc","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-to_proc","()",""],["to_sentence","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-to_sentence","(words)",""],["to_word","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-to_word","(item)",""],["twice","RSpec::Matchers::BuiltIn::YieldControl","RSpec/Matchers/BuiltIn/YieldControl.html#method-i-twice","()",""],["underscore","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-underscore","(camel_cased_word)","<p>Borrowed from ActiveSupport\n"],["unregister","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-c-unregister","(klass, operator)",""],["use_custom_matcher_or_delegate","RSpec::Matchers::OperatorMatcher","RSpec/Matchers/OperatorMatcher.html#method-c-use_custom_matcher_or_delegate","(operator)",""],["verify_message","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-verify_message","()",""],["with","RSpec::Matchers::BuiltIn::RespondTo","RSpec/Matchers/BuiltIn/RespondTo.html#method-i-with","(n)",""],["yield_control","RSpec::Matchers","RSpec/Matchers.html#method-i-yield_control","()","<p>Passes if the method called in the expect block yields, regardless of\nwhether or not arguments are yielded. …\n"],["yield_successive_args","RSpec::Matchers","RSpec/Matchers.html#method-i-yield_successive_args","(*args)","<p>Designed for use with methods that repeatedly yield (such as iterators).\nPasses if the method called …\n"],["yield_with_args","RSpec::Matchers","RSpec/Matchers.html#method-i-yield_with_args","(*args)","<p>Given no arguments, matches if the method called in the expect block yields\nwith arguments (regardless …\n"],["yield_with_no_args","RSpec::Matchers","RSpec/Matchers.html#method-i-yield_with_no_args","()","<p>Passes if the method called in the expect block yields with no arguments.\nFails if it does not yield, …\n"],["yielded_once?","RSpec::Matchers::BuiltIn::YieldProbe","RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-yielded_once-3F","(matcher_name)",""]]}}