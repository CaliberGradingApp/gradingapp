var search_data = {"index":{"searchIndex":["cane","abccheck","invalidast","rubyast","cli","parser","optionshandled","doccheck","encodingawareiterator","file","jsonformatter","raketask","runner","simpletaskrunner","stylecheck","thresholdcheck","unavailablevalue","violationformatter",">=()","add_banner()","add_cane_options()","add_check_options()","add_checks_shortcut()","add_help()","add_option()","add_threshold()","add_user_defined_checks()","add_version()","assignment_nodes()","branch_nodes()","calculate_abc()","canefile=()","case_insensitive_glob()","class_definition()","class_definition?()","class_definitions_in()","colorize()","column_widths()","comment?()","condition_nodes()","container_label()","container_nodes()","contents()","count_nodes()","default_checks()","default_options()","defaults()","each()","excluded?()","excluded?()","exclusions()","exclusions()","exclusions()","exists?()","extract_class_name()","file_list()","file_names()","file_names()","find_violations()","find_violations()","format_group_header()","format_violation()","format_violations()","formatter()","get_default_options()","iterator()","key()","key()","key()","key()","label_for()","map()","map_lines()","max_allowed_complexity()","measure()","method_definition?()","method_nodes()","missing_file_violations()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","normalized_limit()","open()","options()","options()","options()","options()","options()","order()","outputter()","parse()","parse()","parser()","process_ast()","read_options_from_file()","real?()","run()","run()","run()","single_line_class_definition?()","task_runner()","thresholds()","to_s()","to_s()","to_s()","totals()","use()","value_from_file()","violations()","violations()","violations()","violations()","violations()","violations()","violations()","violations_for_line()","worker()","worker()","worker()"],"longSearchIndex":["cane","cane::abccheck","cane::abccheck::invalidast","cane::abccheck::rubyast","cane::cli","cane::cli::parser","cane::cli::parser::optionshandled","cane::doccheck","cane::encodingawareiterator","cane::file","cane::jsonformatter","cane::raketask","cane::runner","cane::simpletaskrunner","cane::stylecheck","cane::thresholdcheck","cane::thresholdcheck::unavailablevalue","cane::violationformatter","cane::thresholdcheck::unavailablevalue#>=()","cane::cli::parser#add_banner()","cane::cli::parser#add_cane_options()","cane::cli::parser#add_check_options()","cane::cli::parser#add_checks_shortcut()","cane::cli::parser#add_help()","cane::cli::parser#add_option()","cane::raketask#add_threshold()","cane::cli::parser#add_user_defined_checks()","cane::cli::parser#add_version()","cane::abccheck::rubyast#assignment_nodes()","cane::abccheck::rubyast#branch_nodes()","cane::abccheck::rubyast#calculate_abc()","cane::raketask#canefile=()","cane::file::case_insensitive_glob()","cane::doccheck#class_definition()","cane::doccheck#class_definition?()","cane::doccheck#class_definitions_in()","cane::violationformatter#colorize()","cane::violationformatter#column_widths()","cane::doccheck#comment?()","cane::abccheck::rubyast#condition_nodes()","cane::abccheck::rubyast#container_label()","cane::abccheck::rubyast#container_nodes()","cane::file::contents()","cane::abccheck::rubyast#count_nodes()","cane::default_checks()","cane::cli::default_options()","cane::cli::defaults()","cane::encodingawareiterator#each()","cane::doccheck#excluded?()","cane::stylecheck#excluded?()","cane::abccheck::rubyast#exclusions()","cane::doccheck#exclusions()","cane::stylecheck#exclusions()","cane::file::exists?()","cane::doccheck#extract_class_name()","cane::stylecheck#file_list()","cane::abccheck::rubyast#file_names()","cane::doccheck#file_names()","cane::abccheck#find_violations()","cane::doccheck#find_violations()","cane::violationformatter#format_group_header()","cane::violationformatter#format_violation()","cane::violationformatter#format_violations()","cane::runner#formatter()","cane::cli::parser#get_default_options()","cane::file::iterator()","cane::abccheck::key()","cane::doccheck::key()","cane::stylecheck::key()","cane::thresholdcheck::key()","cane::abccheck::rubyast#label_for()","cane::simpletaskrunner::map()","cane::stylecheck#map_lines()","cane::abccheck::rubyast#max_allowed_complexity()","cane::stylecheck#measure()","cane::doccheck#method_definition?()","cane::abccheck::rubyast#method_nodes()","cane::doccheck#missing_file_violations()","cane::abccheck::name()","cane::doccheck::name()","cane::stylecheck::name()","cane::abccheck::rubyast::new()","cane::cli::parser::new()","cane::encodingawareiterator::new()","cane::jsonformatter::new()","cane::raketask::new()","cane::runner::new()","cane::violationformatter::new()","cane::thresholdcheck#normalized_limit()","cane::file::open()","cane::abccheck::options()","cane::cli::parser#options()","cane::doccheck::options()","cane::stylecheck::options()","cane::thresholdcheck::options()","cane::abccheck::rubyast#order()","cane::runner#outputter()","cane::cli::parser#parse()","cane::cli::parser::parse()","cane::cli::parser#parser()","cane::abccheck::rubyast#process_ast()","cane::cli::parser#read_options_from_file()","cane::thresholdcheck::unavailablevalue#real?()","cane::run()","cane::cli::run()","cane::runner#run()","cane::doccheck#single_line_class_definition?()","cane::task_runner()","cane::thresholdcheck#thresholds()","cane::jsonformatter#to_s()","cane::thresholdcheck::unavailablevalue#to_s()","cane::violationformatter#to_s()","cane::violationformatter#totals()","cane::raketask#use()","cane::thresholdcheck#value_from_file()","cane::abccheck#violations()","cane::abccheck::invalidast#violations()","cane::abccheck::rubyast#violations()","cane::doccheck#violations()","cane::runner#violations()","cane::stylecheck#violations()","cane::thresholdcheck#violations()","cane::stylecheck#violations_for_line()","cane::abccheck::rubyast#worker()","cane::doccheck#worker()","cane::stylecheck#worker()"],"info":[["Cane","","Cane.html","","<p>Accepts a parsed configuration and passes those options to a new Runner\n<p>Provides a SimpleTaskRunner or …\n"],["Cane::AbcCheck","","Cane/AbcCheck.html","","<p>Creates violations for methods that are too complicated using a simple\nalgorithm run against the parse …\n"],["Cane::AbcCheck::InvalidAst","","Cane/AbcCheck/InvalidAst.html","","<p>Null object for when the file cannot be parsed.\n"],["Cane::AbcCheck::RubyAst","","Cane/AbcCheck/RubyAst.html","","<p>Wrapper object around sexps returned from ripper.\n"],["Cane::CLI","","Cane/CLI.html","","<p>Command line interface. This passes off arguments to the parser and starts\nthe Cane runner\n<p>Default options …\n"],["Cane::CLI::Parser","","Cane/CLI/Parser.html","","<p>Provides a specification for the command line interface that drives\ndocumentation, parsing, and default …\n"],["Cane::CLI::Parser::OptionsHandled","","Cane/CLI/Parser/OptionsHandled.html","","<p>Exception to indicate that no further processing is required and the\nprogram can exit. This is used to …\n"],["Cane::DocCheck","","Cane/DocCheck.html","","<p>Creates violations for class definitions that do not have an explantory\ncomment immediately preceding. …\n"],["Cane::EncodingAwareIterator","","Cane/EncodingAwareIterator.html","","<p>Provides iteration over lines (from a file), correctly handling encoding.\n"],["Cane::File","","Cane/File.html","","<p>An interface for interacting with files that ensures encoding is handled in\na consistent manner.\n"],["Cane::JsonFormatter","","Cane/JsonFormatter.html","","<p>Computes a machine-readable JSON representation from an array of violations\ncomputed by the checks.\n"],["Cane::RakeTask","","Cane/RakeTask.html","","<p>Creates a rake task to run cane with given configuration.\n<p>Examples\n\n<pre>desc &quot;Run code quality checks&quot;\nCane::RakeTask.new(:quality) ...</pre>\n"],["Cane::Runner","","Cane/Runner.html","","<p>Orchestrates the running of checks per the provided configuration, and\nhands the result to a formatter …\n"],["Cane::SimpleTaskRunner","","Cane/SimpleTaskRunner.html","","<p>Mirrors the Parallel gem’s interface but does not provide any parallelism.\nThis is faster for smaller …\n"],["Cane::StyleCheck","","Cane/StyleCheck.html","","<p>Creates violations for files that do not meet style conventions. Only\nhighly obvious, probable, and non-controversial …\n"],["Cane::ThresholdCheck","","Cane/ThresholdCheck.html","","<p>Configurable check that allows the contents of a file to be compared\nagainst a given value.\n"],["Cane::ThresholdCheck::UnavailableValue","","Cane/ThresholdCheck/UnavailableValue.html","","<p>Null object for all cases when the value to be compared against cannot be\nread.\n"],["Cane::ViolationFormatter","","Cane/ViolationFormatter.html","","<p>Computes a string to be displayed as output from an array of violations\ncomputed by the checks.\n"],[">=","Cane::ThresholdCheck::UnavailableValue","Cane/ThresholdCheck/UnavailableValue.html#method-i-3E-3D","(_)",""],["add_banner","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_banner","()",""],["add_cane_options","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_cane_options","()",""],["add_check_options","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_check_options","(check)",""],["add_checks_shortcut","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_checks_shortcut","()",""],["add_help","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_help","()",""],["add_option","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_option","(option, description, opts={})",""],["add_threshold","Cane::RakeTask","Cane/RakeTask.html#method-i-add_threshold","(file, operator, value)","<p>Add a threshold check. If the file exists and it contains a number, compare\nthat number with the given …\n"],["add_user_defined_checks","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_user_defined_checks","()",""],["add_version","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-add_version","()",""],["assignment_nodes","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-assignment_nodes","()",""],["branch_nodes","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-branch_nodes","()",""],["calculate_abc","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-calculate_abc","(method_node)",""],["canefile=","Cane::RakeTask","Cane/RakeTask.html#method-i-canefile-3D","(file)",""],["case_insensitive_glob","Cane::File","Cane/File.html#method-c-case_insensitive_glob","(glob)",""],["class_definition","Cane::DocCheck","Cane/DocCheck.html#method-i-class_definition","(number, line, last_line)",""],["class_definition?","Cane::DocCheck","Cane/DocCheck.html#method-i-class_definition-3F","(line)",""],["class_definitions_in","Cane::DocCheck","Cane/DocCheck.html#method-i-class_definitions_in","(file_name)",""],["colorize","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-colorize","(string)",""],["column_widths","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-column_widths","(violations, columns)",""],["comment?","Cane::DocCheck","Cane/DocCheck.html#method-i-comment-3F","(line)",""],["condition_nodes","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-condition_nodes","()",""],["container_label","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-container_label","(node)",""],["container_nodes","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-container_nodes","()",""],["contents","Cane::File","Cane/File.html#method-c-contents","(path)",""],["count_nodes","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-count_nodes","(node, types)",""],["default_checks","Cane","Cane.html#method-c-default_checks","()",""],["default_options","Cane::CLI","Cane/CLI.html#method-c-default_options","()",""],["defaults","Cane::CLI","Cane/CLI.html#method-c-defaults","(check)",""],["each","Cane::EncodingAwareIterator","Cane/EncodingAwareIterator.html#method-i-each","(&block)",""],["excluded?","Cane::DocCheck","Cane/DocCheck.html#method-i-excluded-3F","(file)",""],["excluded?","Cane::StyleCheck","Cane/StyleCheck.html#method-i-excluded-3F","(file)",""],["exclusions","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-exclusions","()",""],["exclusions","Cane::DocCheck","Cane/DocCheck.html#method-i-exclusions","()",""],["exclusions","Cane::StyleCheck","Cane/StyleCheck.html#method-i-exclusions","()",""],["exists?","Cane::File","Cane/File.html#method-c-exists-3F","(path)",""],["extract_class_name","Cane::DocCheck","Cane/DocCheck.html#method-i-extract_class_name","(line)",""],["file_list","Cane::StyleCheck","Cane/StyleCheck.html#method-i-file_list","()",""],["file_names","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-file_names","()",""],["file_names","Cane::DocCheck","Cane/DocCheck.html#method-i-file_names","()",""],["find_violations","Cane::AbcCheck","Cane/AbcCheck.html#method-i-find_violations","(file_name)",""],["find_violations","Cane::DocCheck","Cane/DocCheck.html#method-i-find_violations","(file_name)",""],["format_group_header","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-format_group_header","(description, violations)",""],["format_violation","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-format_violation","(v, column_widths)",""],["format_violations","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-format_violations","(violations)",""],["formatter","Cane::Runner","Cane/Runner.html#method-i-formatter","()",""],["get_default_options","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-get_default_options","()",""],["iterator","Cane::File","Cane/File.html#method-c-iterator","(path)",""],["key","Cane::AbcCheck","Cane/AbcCheck.html#method-c-key","()",""],["key","Cane::DocCheck","Cane/DocCheck.html#method-c-key","()",""],["key","Cane::StyleCheck","Cane/StyleCheck.html#method-c-key","()",""],["key","Cane::ThresholdCheck","Cane/ThresholdCheck.html#method-c-key","()",""],["label_for","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-label_for","(node)",""],["map","Cane::SimpleTaskRunner","Cane/SimpleTaskRunner.html#method-c-map","(enumerable, &block)",""],["map_lines","Cane::StyleCheck","Cane/StyleCheck.html#method-i-map_lines","(file_path, &block)",""],["max_allowed_complexity","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-max_allowed_complexity","()",""],["measure","Cane::StyleCheck","Cane/StyleCheck.html#method-i-measure","()",""],["method_definition?","Cane::DocCheck","Cane/DocCheck.html#method-i-method_definition-3F","(line)",""],["method_nodes","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-method_nodes","()",""],["missing_file_violations","Cane::DocCheck","Cane/DocCheck.html#method-i-missing_file_violations","()",""],["name","Cane::AbcCheck","Cane/AbcCheck.html#method-c-name","()",""],["name","Cane::DocCheck","Cane/DocCheck.html#method-c-name","()",""],["name","Cane::StyleCheck","Cane/StyleCheck.html#method-c-name","()",""],["new","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-c-new","(*args)",""],["new","Cane::CLI::Parser","Cane/CLI/Parser.html#method-c-new","(stdout = $stdout)",""],["new","Cane::EncodingAwareIterator","Cane/EncodingAwareIterator.html#method-c-new","(lines)",""],["new","Cane::JsonFormatter","Cane/JsonFormatter.html#method-c-new","(violations, options = {})",""],["new","Cane::RakeTask","Cane/RakeTask.html#method-c-new","(task_name = nil)",""],["new","Cane::Runner","Cane/Runner.html#method-c-new","(spec)",""],["new","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-c-new","(violations, options = {})",""],["normalized_limit","Cane::ThresholdCheck","Cane/ThresholdCheck.html#method-i-normalized_limit","(limit)",""],["open","Cane::File","Cane/File.html#method-c-open","(path)",""],["options","Cane::AbcCheck","Cane/AbcCheck.html#method-c-options","()",""],["options","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-options","()",""],["options","Cane::DocCheck","Cane/DocCheck.html#method-c-options","()",""],["options","Cane::StyleCheck","Cane/StyleCheck.html#method-c-options","()",""],["options","Cane::ThresholdCheck","Cane/ThresholdCheck.html#method-c-options","()",""],["order","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-order","(result)",""],["outputter","Cane::Runner","Cane/Runner.html#method-i-outputter","()",""],["parse","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-parse","(args, ret = true)",""],["parse","Cane::CLI::Parser","Cane/CLI/Parser.html#method-c-parse","(*args)",""],["parser","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-parser","()",""],["process_ast","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-process_ast","(node, complexity = {}, nesting = [])","<p>Recursive function to process an AST. The `complexity` variable mutates,\nwhich is a bit confusing. `nesting` …\n"],["read_options_from_file","Cane::CLI::Parser","Cane/CLI/Parser.html#method-i-read_options_from_file","(file)",""],["real?","Cane::ThresholdCheck::UnavailableValue","Cane/ThresholdCheck/UnavailableValue.html#method-i-real-3F","()",""],["run","Cane","Cane.html#method-c-run","(*args)",""],["run","Cane::CLI","Cane/CLI.html#method-c-run","(args)",""],["run","Cane::Runner","Cane/Runner.html#method-i-run","()",""],["single_line_class_definition?","Cane::DocCheck","Cane/DocCheck.html#method-i-single_line_class_definition-3F","(line)",""],["task_runner","Cane","Cane.html#method-c-task_runner","(opts)",""],["thresholds","Cane::ThresholdCheck","Cane/ThresholdCheck.html#method-i-thresholds","()",""],["to_s","Cane::JsonFormatter","Cane/JsonFormatter.html#method-i-to_s","()",""],["to_s","Cane::ThresholdCheck::UnavailableValue","Cane/ThresholdCheck/UnavailableValue.html#method-i-to_s","()",""],["to_s","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-to_s","()",""],["totals","Cane::ViolationFormatter","Cane/ViolationFormatter.html#method-i-totals","()",""],["use","Cane::RakeTask","Cane/RakeTask.html#method-i-use","(check, options = {})",""],["value_from_file","Cane::ThresholdCheck","Cane/ThresholdCheck.html#method-i-value_from_file","(file)",""],["violations","Cane::AbcCheck","Cane/AbcCheck.html#method-i-violations","()",""],["violations","Cane::AbcCheck::InvalidAst","Cane/AbcCheck/InvalidAst.html#method-i-violations","()",""],["violations","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-violations","()",""],["violations","Cane::DocCheck","Cane/DocCheck.html#method-i-violations","()",""],["violations","Cane::Runner","Cane/Runner.html#method-i-violations","()",""],["violations","Cane::StyleCheck","Cane/StyleCheck.html#method-i-violations","()",""],["violations","Cane::ThresholdCheck","Cane/ThresholdCheck.html#method-i-violations","()",""],["violations_for_line","Cane::StyleCheck","Cane/StyleCheck.html#method-i-violations_for_line","(line)",""],["worker","Cane::AbcCheck::RubyAst","Cane/AbcCheck/RubyAst.html#method-i-worker","()",""],["worker","Cane::DocCheck","Cane/DocCheck.html#method-i-worker","()",""],["worker","Cane::StyleCheck","Cane/StyleCheck.html#method-i-worker","()",""]]}}