var search_data = {"index":{"searchIndex":["coderay","duo","encoders","commentfilter","count","debug","debuglint","div","encoder","filter","html","output","json","linesofcode","lint","null","page","span","statistic","terminal","text","tokenkindfilter","xml","yaml","filetype","forredcloth","plugin","pluginhost","scanners","c","cplusplus","css","clojure","debug","delphi","diff","erb","go","groovy","haml","html","json","java","javascript","lua","php","python","raydebug","ruby","sql","sass","scanner","taskpaper","text","xml","yaml","styles","alpha","style","tokens","tokensproxy","wordlist","caseignoring","<<()","[]()","[]()","[]()","[]()","[]=()","add()","aliases()","all_plugins()","append()","apply_title!()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_group()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","begin_line()","binary_string()","block_token()","break_lines()","call()","check_group_nesting()","check_options!()","close_span()","coderay_path()","column()","compile()","const_missing()","const_missing()","count()","css_class_for_kinds()","default()","each()","each()","encode()","encode()","encode()","encode()","encode()","encode_file()","encode_tokens()","encode_tokens()","encode_with_encoding()","encoder()","encoder()","encoding()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_group()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","end_line()","extended()","fetch()","file_extension()","file_extension()","file_extension()","file_extension()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","get_output()","get_scanner_options()","guess_encoding()","highlight()","highlight()","highlight()","highlight_file()","include_group?()","include_text_token?()","install()","interpreted_string_state()","lang()","lang()","line()","list()","load()","load_all()","load_plugin_map()","make_html_escape_hash()","make_plugin_hash()","make_span_for_kinds()","map()","method_missing()","method_missing()","new()","new()","new()","new()","new()","normalize()","output()","path_to()","plugin_hash()","plugin_host()","plugin_path()","raise_inspect()","raise_inspect_arguments()","register()","register_for()","reset()","reset()","reset_instance()","reset_instance()","reset_instance()","reset_instance()","scan()","scan_css()","scan_file()","scan_java_script()","scan_rest()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scan_tokens()","scanner()","scanner()","scanner()","scanner_state_info()","set_string_from_source()","set_tokens_from_options()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","split_into_parts()","string=()","style_for_kinds()","stylesheet()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","text_token()","title()","to_s()","to_unix()","token()","token_path_to_hint()","tokenize()","tokens()","tokens()","tokens()","tokens_last()","tokens_size()","type_from_shebang()","validate_id()","wrap!()","wrap_in!()","wrapped_in()","wrapped_in?()","xml_scanner()","readme_index"],"longSearchIndex":["coderay","coderay::duo","coderay::encoders","coderay::encoders::commentfilter","coderay::encoders::count","coderay::encoders::debug","coderay::encoders::debuglint","coderay::encoders::div","coderay::encoders::encoder","coderay::encoders::filter","coderay::encoders::html","coderay::encoders::html::output","coderay::encoders::json","coderay::encoders::linesofcode","coderay::encoders::lint","coderay::encoders::null","coderay::encoders::page","coderay::encoders::span","coderay::encoders::statistic","coderay::encoders::terminal","coderay::encoders::text","coderay::encoders::tokenkindfilter","coderay::encoders::xml","coderay::encoders::yaml","coderay::filetype","coderay::forredcloth","coderay::plugin","coderay::pluginhost","coderay::scanners","coderay::scanners::c","coderay::scanners::cplusplus","coderay::scanners::css","coderay::scanners::clojure","coderay::scanners::debug","coderay::scanners::delphi","coderay::scanners::diff","coderay::scanners::erb","coderay::scanners::go","coderay::scanners::groovy","coderay::scanners::haml","coderay::scanners::html","coderay::scanners::json","coderay::scanners::java","coderay::scanners::javascript","coderay::scanners::lua","coderay::scanners::php","coderay::scanners::python","coderay::scanners::raydebug","coderay::scanners::ruby","coderay::scanners::sql","coderay::scanners::sass","coderay::scanners::scanner","coderay::scanners::taskpaper","coderay::scanners::text","coderay::scanners::xml","coderay::scanners::yaml","coderay::styles","coderay::styles::alpha","coderay::styles::style","coderay::tokens","coderay::tokensproxy","coderay::wordlist","coderay::wordlist::caseignoring","coderay::encoders::encoder#<<()","coderay::duo::[]()","coderay::filetype::[]()","coderay::pluginhost#[]()","coderay::wordlist::caseignoring#[]()","coderay::wordlist::caseignoring#[]=()","coderay::wordlist#add()","coderay::plugin#aliases()","coderay::pluginhost#all_plugins()","coderay::encoders::json#append()","coderay::encoders::html::output#apply_title!()","coderay::encoders::count#begin_group()","coderay::encoders::debug#begin_group()","coderay::encoders::debuglint#begin_group()","coderay::encoders::encoder#begin_group()","coderay::encoders::html#begin_group()","coderay::encoders::json#begin_group()","coderay::encoders::lint#begin_group()","coderay::encoders::statistic#begin_group()","coderay::encoders::terminal#begin_group()","coderay::encoders::tokenkindfilter#begin_group()","coderay::encoders::xml#begin_group()","coderay::encoders::yaml#begin_group()","coderay::tokens#begin_group()","coderay::encoders::count#begin_line()","coderay::encoders::debug#begin_line()","coderay::encoders::debuglint#begin_line()","coderay::encoders::encoder#begin_line()","coderay::encoders::html#begin_line()","coderay::encoders::json#begin_line()","coderay::encoders::lint#begin_line()","coderay::encoders::statistic#begin_line()","coderay::encoders::terminal#begin_line()","coderay::encoders::tokenkindfilter#begin_line()","coderay::encoders::yaml#begin_line()","coderay::tokens#begin_line()","coderay::scanners::scanner#binary_string()","coderay::encoders::statistic#block_token()","coderay::encoders::html#break_lines()","coderay::duo#call()","coderay::encoders::html#check_group_nesting()","coderay::encoders::html#check_options!()","coderay::encoders::html#close_span()","coderay::coderay_path()","coderay::scanners::scanner#column()","coderay::encoders::encoder#compile()","coderay::encoders::encoder::const_missing()","coderay::pluginhost#const_missing()","coderay::tokens#count()","coderay::encoders::html#css_class_for_kinds()","coderay::pluginhost#default()","coderay::scanners::scanner#each()","coderay::tokensproxy#each()","coderay::encode()","coderay::duo#encode()","coderay::encoders::encoder#encode()","coderay::tokens#encode()","coderay::tokensproxy#encode()","coderay::encode_file()","coderay::encode_tokens()","coderay::encoders::encoder#encode_tokens()","coderay::scanners::scanner::encode_with_encoding()","coderay::encoder()","coderay::duo#encoder()","coderay::scanners::scanner::encoding()","coderay::encoders::count#end_group()","coderay::encoders::debug#end_group()","coderay::encoders::debuglint#end_group()","coderay::encoders::encoder#end_group()","coderay::encoders::html#end_group()","coderay::encoders::json#end_group()","coderay::encoders::lint#end_group()","coderay::encoders::statistic#end_group()","coderay::encoders::terminal#end_group()","coderay::encoders::tokenkindfilter#end_group()","coderay::encoders::xml#end_group()","coderay::encoders::yaml#end_group()","coderay::tokens#end_group()","coderay::encoders::count#end_line()","coderay::encoders::debug#end_line()","coderay::encoders::debuglint#end_line()","coderay::encoders::encoder#end_line()","coderay::encoders::html#end_line()","coderay::encoders::json#end_line()","coderay::encoders::lint#end_line()","coderay::encoders::statistic#end_line()","coderay::encoders::terminal#end_line()","coderay::encoders::tokenkindfilter#end_line()","coderay::encoders::yaml#end_line()","coderay::tokens#end_line()","coderay::pluginhost::extended()","coderay::filetype::fetch()","coderay::encoders::encoder::file_extension()","coderay::encoders::encoder#file_extension()","coderay::scanners::scanner::file_extension()","coderay::scanners::scanner#file_extension()","coderay::encoders::count#finish()","coderay::encoders::debuglint#finish()","coderay::encoders::encoder#finish()","coderay::encoders::filter#finish()","coderay::encoders::html#finish()","coderay::encoders::json#finish()","coderay::encoders::linesofcode#finish()","coderay::encoders::lint#finish()","coderay::encoders::statistic#finish()","coderay::encoders::xml#finish()","coderay::encoders::yaml#finish()","coderay::encoders::encoder#get_output()","coderay::get_scanner_options()","coderay::scanners::scanner::guess_encoding()","coderay::highlight()","coderay::duo#highlight()","coderay::encoders::encoder#highlight()","coderay::highlight_file()","coderay::encoders::tokenkindfilter#include_group?()","coderay::encoders::tokenkindfilter#include_text_token?()","coderay::forredcloth::install()","coderay::scanners::ruby#interpreted_string_state()","coderay::scanners::scanner#lang()","coderay::scanners::scanner::lang()","coderay::scanners::scanner#line()","coderay::pluginhost#list()","coderay::pluginhost#load()","coderay::pluginhost#load_all()","coderay::pluginhost#load_plugin_map()","coderay::encoders::html::make_html_escape_hash()","coderay::pluginhost#make_plugin_hash()","coderay::encoders::html#make_span_for_kinds()","coderay::pluginhost#map()","coderay::tokens#method_missing()","coderay::tokensproxy#method_missing()","coderay::duo::new()","coderay::encoders::encoder::new()","coderay::scanners::scanner::new()","coderay::tokensproxy::new()","coderay::wordlist::new()","coderay::scanners::scanner::normalize()","coderay::encoders::encoder#output()","coderay::pluginhost#path_to()","coderay::pluginhost#plugin_hash()","coderay::plugin#plugin_host()","coderay::pluginhost#plugin_path()","coderay::scanners::scanner#raise_inspect()","coderay::scanners::scanner#raise_inspect_arguments()","coderay::pluginhost#register()","coderay::plugin#register_for()","coderay::scanners::html#reset()","coderay::scanners::scanner#reset()","coderay::scanners::erb#reset_instance()","coderay::scanners::javascript#reset_instance()","coderay::scanners::php#reset_instance()","coderay::scanners::scanner#reset_instance()","coderay::scan()","coderay::scanners::html#scan_css()","coderay::scan_file()","coderay::scanners::html#scan_java_script()","coderay::scanners::scanner#scan_rest()","coderay::scanners::c#scan_tokens()","coderay::scanners::cplusplus#scan_tokens()","coderay::scanners::css#scan_tokens()","coderay::scanners::clojure#scan_tokens()","coderay::scanners::debug#scan_tokens()","coderay::scanners::delphi#scan_tokens()","coderay::scanners::diff#scan_tokens()","coderay::scanners::erb#scan_tokens()","coderay::scanners::go#scan_tokens()","coderay::scanners::groovy#scan_tokens()","coderay::scanners::haml#scan_tokens()","coderay::scanners::html#scan_tokens()","coderay::scanners::json#scan_tokens()","coderay::scanners::java#scan_tokens()","coderay::scanners::javascript#scan_tokens()","coderay::scanners::lua#scan_tokens()","coderay::scanners::php#scan_tokens()","coderay::scanners::python#scan_tokens()","coderay::scanners::raydebug#scan_tokens()","coderay::scanners::ruby#scan_tokens()","coderay::scanners::sql#scan_tokens()","coderay::scanners::sass#scan_tokens()","coderay::scanners::scanner#scan_tokens()","coderay::scanners::taskpaper#scan_tokens()","coderay::scanners::text#scan_tokens()","coderay::scanners::yaml#scan_tokens()","coderay::scanner()","coderay::duo#scanner()","coderay::tokensproxy#scanner()","coderay::scanners::scanner#scanner_state_info()","coderay::scanners::scanner#set_string_from_source()","coderay::scanners::scanner#set_tokens_from_options()","coderay::encoders::count#setup()","coderay::encoders::debuglint#setup()","coderay::encoders::encoder#setup()","coderay::encoders::filter#setup()","coderay::encoders::html#setup()","coderay::encoders::json#setup()","coderay::encoders::linesofcode#setup()","coderay::encoders::lint#setup()","coderay::encoders::statistic#setup()","coderay::encoders::terminal#setup()","coderay::encoders::text#setup()","coderay::encoders::tokenkindfilter#setup()","coderay::encoders::xml#setup()","coderay::encoders::yaml#setup()","coderay::scanners::css#setup()","coderay::scanners::debug#setup()","coderay::scanners::erb#setup()","coderay::scanners::groovy#setup()","coderay::scanners::haml#setup()","coderay::scanners::html#setup()","coderay::scanners::json#setup()","coderay::scanners::javascript#setup()","coderay::scanners::lua#setup()","coderay::scanners::php#setup()","coderay::scanners::raydebug#setup()","coderay::scanners::ruby#setup()","coderay::scanners::sass#setup()","coderay::scanners::scanner#setup()","coderay::tokens#split_into_parts()","coderay::scanners::scanner#string=()","coderay::encoders::html#style_for_kinds()","coderay::encoders::html::output#stylesheet()","coderay::encoders::count#text_token()","coderay::encoders::debug#text_token()","coderay::encoders::debuglint#text_token()","coderay::encoders::encoder#text_token()","coderay::encoders::html#text_token()","coderay::encoders::json#text_token()","coderay::encoders::lint#text_token()","coderay::encoders::null#text_token()","coderay::encoders::statistic#text_token()","coderay::encoders::terminal#text_token()","coderay::encoders::text#text_token()","coderay::encoders::tokenkindfilter#text_token()","coderay::encoders::xml#text_token()","coderay::encoders::yaml#text_token()","coderay::plugin#title()","coderay::tokens#to_s()","coderay::scanners::scanner::to_unix()","coderay::encoders::encoder#token()","coderay::encoders::html::token_path_to_hint()","coderay::scanners::scanner#tokenize()","coderay::encoders::encoder#tokens()","coderay::scanners::scanner#tokens()","coderay::tokensproxy#tokens()","coderay::scanners::scanner#tokens_last()","coderay::scanners::scanner#tokens_size()","coderay::filetype::type_from_shebang()","coderay::pluginhost#validate_id()","coderay::encoders::html::output#wrap!()","coderay::encoders::html::output#wrap_in!()","coderay::encoders::html::output#wrapped_in()","coderay::encoders::html::output#wrapped_in?()","coderay::scanners::javascript#xml_scanner()",""],"info":[["CodeRay","","CodeRay.html","","<p>CodeRay Library\n<p>CodeRay is a Ruby library for syntax highlighting.\n<p>I try to make CodeRay easy to use and …\n"],["CodeRay::Duo","","CodeRay/Duo.html","","<p>Duo\n<p>A Duo is a convenient way to use CodeRay. You just create a Duo, giving it\na lang (language of the …\n"],["CodeRay::Encoders","","CodeRay/Encoders.html","","<p>This module holds the Encoder class and its subclasses. For example, the\nHTML encoder is named CodeRay::Encoders::HTML …\n"],["CodeRay::Encoders::CommentFilter","","CodeRay/Encoders/CommentFilter.html","","<p>A simple Filter that removes all tokens of the :comment kind.\n<p>Alias: <code>remove_comments</code>\n<p>Usage:\n"],["CodeRay::Encoders::Count","","CodeRay/Encoders/Count.html","","<p>Returns the number of tokens.\n<p>Text and block tokens are counted.\n"],["CodeRay::Encoders::Debug","","CodeRay/Encoders/Debug.html","","<p>Debug Encoder\n<p>Fast encoder producing simple debug output.\n<p>It is readable and diff-able and is used for …\n"],["CodeRay::Encoders::DebugLint","","CodeRay/Encoders/DebugLint.html","","<p>Debug Lint Encoder\n<p>Debug encoder with additional checks for:\n<p>empty tokens\n"],["CodeRay::Encoders::Div","","CodeRay/Encoders/Div.html","","<p>Wraps HTML output into a DIV element, using inline styles by default.\n<p>See Encoders::HTML for available …\n"],["CodeRay::Encoders::Encoder","","CodeRay/Encoders/Encoder.html","","<p>Encoder\n<p>The Encoder base class. Together with Scanner and Tokens, it forms the\nhighlighting triad.\n<p>Encoder …\n"],["CodeRay::Encoders::Filter","","CodeRay/Encoders/Filter.html","","<p>A Filter encoder has another Tokens instance as output. It can be subclass\nto select, remove, or modify …\n"],["CodeRay::Encoders::HTML","","CodeRay/Encoders/HTML.html","","<p>HTML Encoder\n<p>This is CodeRay’s most important highlighter: It provides save, fast XHTML\ngeneration and …\n"],["CodeRay::Encoders::HTML::Output","","CodeRay/Encoders/HTML/Output.html","","<p>This module is included in the output String of the HTML Encoder.\n<p>It provides methods like wrap, div, …\n"],["CodeRay::Encoders::JSON","","CodeRay/Encoders/JSON.html","","<p>A simple JSON Encoder.\n<p>Example:\n\n<pre>CodeRay.scan('puts &quot;Hello world!&quot;', :ruby).json</pre>\n"],["CodeRay::Encoders::LinesOfCode","","CodeRay/Encoders/LinesOfCode.html","","<p>Counts the LoC (Lines of Code). Returns an Integer &gt;= 0.\n<p>Alias: <code>loc</code>\n<p>Everything that is not comment, …\n"],["CodeRay::Encoders::Lint","","CodeRay/Encoders/Lint.html","","<p>Lint Encoder\n<p>Checks for:\n<p>empty tokens\n"],["CodeRay::Encoders::Null","","CodeRay/Encoders/Null.html","","<p>Null Encoder\n<p>Does nothing and returns an empty string.\n"],["CodeRay::Encoders::Page","","CodeRay/Encoders/Page.html","","<p>Wraps the output into a HTML page, using CSS classes and line numbers in\nthe table format by default. …\n"],["CodeRay::Encoders::Span","","CodeRay/Encoders/Span.html","","<p>Wraps HTML output into a SPAN element, using inline styles by default.\n<p>See Encoders::HTML for available …\n"],["CodeRay::Encoders::Statistic","","CodeRay/Encoders/Statistic.html","","<p>Makes a statistic for the given tokens.\n<p>Alias: <code>stats</code>\n"],["CodeRay::Encoders::Terminal","","CodeRay/Encoders/Terminal.html","","<p>Outputs code highlighted for a color terminal.\n<p>Note: This encoder is in beta. It currently doesn’t use …\n"],["CodeRay::Encoders::Text","","CodeRay/Encoders/Text.html","","<p>Concats the tokens into a single string, resulting in the original code\nstring if no tokens were removed. …\n"],["CodeRay::Encoders::TokenKindFilter","","CodeRay/Encoders/TokenKindFilter.html","","<p>A Filter that selects tokens based on their token kind.\n<p>Options\n<p>:exclude\n"],["CodeRay::Encoders::XML","","CodeRay/Encoders/XML.html","","<p>XML Encoder\n<p>Uses REXML. Very slow.\n"],["CodeRay::Encoders::YAML","","CodeRay/Encoders/YAML.html","","<p>YAML Encoder\n<p>Slow.\n"],["CodeRay::FileType","","CodeRay/FileType.html","","<p>FileType\n<p>A simple filetype recognizer.\n<p>Usage\n"],["CodeRay::ForRedCloth","","CodeRay/ForRedCloth.html","","<p>A little hack to enable CodeRay highlighting in RedCloth.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'coderay'</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'coderay/for_redcloth'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["CodeRay::Plugin","","CodeRay/Plugin.html","","<p>Plugin\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Plugins</span> <span class=\"ruby-identifier\">have</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">include</span> <span class=\"ruby-identifier\">this</span> <span class=\"ruby-keyword\">module</span>.\n\n<span class=\"ruby-constant\">IMPORTANT</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-constant\">Use</span> <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">this</span> <span class=\"ruby-keyword\">module</span>.\n\n<span class=\"ruby-constant\">See</span> <span class=\"ruby-constant\">CodeRay</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">PluginHost</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["CodeRay::PluginHost","","CodeRay/PluginHost.html","","<p>PluginHost\n<p>A simple subclass/subfolder plugin system.\n<p>Example:\n"],["CodeRay::Scanners","","CodeRay/Scanners.html","","<p>Scanners\n<p>This module holds the Scanner class and its subclasses. For example, the\nRuby scanner is named …\n"],["CodeRay::Scanners::C","","CodeRay/Scanners/C.html","","<p>Scanner for C.\n"],["CodeRay::Scanners::CPlusPlus","","CodeRay/Scanners/CPlusPlus.html","","<p>Scanner for C++.\n<p>Aliases: <code>cplusplus</code>, c++\n"],["CodeRay::Scanners::CSS","","CodeRay/Scanners/CSS.html","",""],["CodeRay::Scanners::Clojure","","CodeRay/Scanners/Clojure.html","","<p>Clojure scanner by Licenser.\n"],["CodeRay::Scanners::Debug","","CodeRay/Scanners/Debug.html","","<p>Debug Scanner\n<p>Interprets the output of the Encoders::Debug encoder (basically the inverse\nfunction).\n"],["CodeRay::Scanners::Delphi","","CodeRay/Scanners/Delphi.html","","<p>Scanner for the Delphi language (Object Pascal).\n<p>Alias: <code>pascal</code>\n"],["CodeRay::Scanners::Diff","","CodeRay/Scanners/Diff.html","","<p>Scanner for output of the diff command.\n<p>Alias: <code>patch</code>\n"],["CodeRay::Scanners::ERB","","CodeRay/Scanners/ERB.html","","<p>Scanner for HTML ERB templates.\n"],["CodeRay::Scanners::Go","","CodeRay/Scanners/Go.html","",""],["CodeRay::Scanners::Groovy","","CodeRay/Scanners/Groovy.html","","<p>Scanner for Groovy.\n"],["CodeRay::Scanners::HAML","","CodeRay/Scanners/HAML.html","",""],["CodeRay::Scanners::HTML","","CodeRay/Scanners/HTML.html","","<p>HTML Scanner\n<p>Alias: <code>xhtml</code>\n<p>See also: Scanners::XML\n"],["CodeRay::Scanners::JSON","","CodeRay/Scanners/JSON.html","","<p>Scanner for JSON (JavaScript Object Notation).\n"],["CodeRay::Scanners::Java","","CodeRay/Scanners/Java.html","","<p>Scanner for Java.\n"],["CodeRay::Scanners::JavaScript","","CodeRay/Scanners/JavaScript.html","","<p>Scanner for JavaScript.\n<p>Aliases: <code>ecmascript</code>, <code>ecma_script</code>,\n<code>javascript</code>\n"],["CodeRay::Scanners::Lua","","CodeRay/Scanners/Lua.html","","<p>Scanner for the Lua programming lanuage.\n<p>The language’s complete syntax is defined in the Lua manual, …\n"],["CodeRay::Scanners::PHP","","CodeRay/Scanners/PHP.html","","<p>Scanner for PHP.\n<p>Original by Stefan Walk.\n"],["CodeRay::Scanners::Python","","CodeRay/Scanners/Python.html","","<p>Scanner for Python. Supports Python 3.\n<p>Based on pygments’ PythonLexer, see\ndev.pocoo.org/projects/pygments/browser/pygments/lexers/agile.py. …\n"],["CodeRay::Scanners::Raydebug","","CodeRay/Scanners/Raydebug.html","","<p>Raydebug Scanner\n<p>Highlights the output of the Encoders::Debug encoder.\n"],["CodeRay::Scanners::Ruby","","CodeRay/Scanners/Ruby.html","","<p>This scanner is really complex, since Ruby <em>is</em> a complex language!\n<p>It tries to highlight 100% of all common …\n"],["CodeRay::Scanners::SQL","","CodeRay/Scanners/SQL.html","","<p>by Josh Goebel\n"],["CodeRay::Scanners::Sass","","CodeRay/Scanners/Sass.html","","<p>A scanner for Sass.\n"],["CodeRay::Scanners::Scanner","","CodeRay/Scanners/Scanner.html","","<p>Scanner\n<p>The base class for all Scanners.\n<p>It is a subclass of Ruby’s great <code>StringScanner</code>, which makes it\n…\n"],["CodeRay::Scanners::Taskpaper","","CodeRay/Scanners/Taskpaper.html","",""],["CodeRay::Scanners::Text","","CodeRay/Scanners/Text.html","","<p>Scanner for plain text.\n<p>Yields just one token of the kind :plain.\n<p>Alias: <code>plaintext</code>, <code>plain</code>\n"],["CodeRay::Scanners::XML","","CodeRay/Scanners/XML.html","","<p>Scanner for XML.\n<p>Currently this is the same scanner as Scanners::HTML.\n"],["CodeRay::Scanners::YAML","","CodeRay/Scanners/YAML.html","","<p>Scanner for YAML.\n<p>Based on the YAML scanner from Syntax by Jamis Buck.\n"],["CodeRay::Styles","","CodeRay/Styles.html","","<p>This module holds the Style class and its subclasses.\n<p>See Plugin.\n"],["CodeRay::Styles::Alpha","","CodeRay/Styles/Alpha.html","","<p>A colorful theme using CSS 3 colors (with alpha channel).\n"],["CodeRay::Styles::Style","","CodeRay/Styles/Style.html","","<p>Base class for styles.\n<p>Styles are used by Encoders::HTML to colorize tokens.\n"],["CodeRay::Tokens","","CodeRay/Tokens.html","","<p>The Tokens class represents a list of tokens returned from a Scanner. It’s\nactually just an Array with …\n"],["CodeRay::TokensProxy","","CodeRay/TokensProxy.html","","<p>The result of a scan operation is a TokensProxy, but should act like\nTokens.\n<p>This proxy makes it possible …\n"],["CodeRay::WordList","","CodeRay/WordList.html","","<p>WordList\n<p><strong>A Hash subclass designed for mapping word lists to token\ntypes.</strong>\n<p>A WordList is a Hash with some …\n"],["CodeRay::WordList::CaseIgnoring","","CodeRay/WordList/CaseIgnoring.html","","<p>A CaseIgnoring WordList is like a WordList, only that keys are compared\ncase-insensitively (normalizing …\n"],["<<","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-3C-3C","(token)",""],["[]","CodeRay::Duo","CodeRay/Duo.html#method-c-5B-5D","(lang = nil, format = nil, options = {})","<p>To allow calls like Duo[:ruby, :html].highlight.\n"],["[]","CodeRay::FileType","CodeRay/FileType.html#method-c-5B-5D","(filename, read_shebang = false)","<p>Try to determine the file type of the file.\n<p><code>filename</code> is a relative or absolute path to a file.\n<p>The file …\n"],["[]","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-5B-5D","(id, *args, &blk)","<p>Returns the Plugin for <code>id</code>.\n<p>Example:\n\n<pre>yaml_plugin = MyPluginHost[:yaml]</pre>\n"],["[]","CodeRay::WordList::CaseIgnoring","CodeRay/WordList/CaseIgnoring.html#method-i-5B-5D","(key)",""],["[]=","CodeRay::WordList::CaseIgnoring","CodeRay/WordList/CaseIgnoring.html#method-i-5B-5D-3D","(key, value)",""],["add","CodeRay::WordList","CodeRay/WordList.html#method-i-add","(words, value = true)","<p>Add words to the list and associate them with <code>value</code>.\n<p>Returns <code>self</code>, so you can concat add calls.\n"],["aliases","CodeRay::Plugin","CodeRay/Plugin.html#method-i-aliases","()",""],["all_plugins","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-all_plugins","()","<p>Returns an array of all Plugins.\n<p>Note: This loads all plugins using load_all.\n"],["append","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-append","(data)",""],["apply_title!","CodeRay::Encoders::HTML::Output","CodeRay/Encoders/HTML/Output.html#method-i-apply_title-21","(title)",""],["begin_group","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::Debug","CodeRay/Encoders/Debug.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-begin_group","(kind)","<p>Starts a token group with the given <code>kind</code>.\n"],["begin_group","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-begin_group","(kind)","<p>token groups, eg. strings\n"],["begin_group","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::Terminal","CodeRay/Encoders/Terminal.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-begin_group","(kind)","<p>Add the token group to the output stream if <code>kind</code> matches the\nconditions.\n<p>If it does not, all tokens inside …\n"],["begin_group","CodeRay::Encoders::XML","CodeRay/Encoders/XML.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-begin_group","(kind)",""],["begin_group","CodeRay::Tokens","CodeRay/Tokens.html#method-i-begin_group","(kind;)",""],["begin_line","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::Debug","CodeRay/Encoders/Debug.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-begin_line","(kind)","<p>Starts a new line token group with the given <code>kind</code>.\n"],["begin_line","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-begin_line","(kind)","<p>whole lines to be highlighted, eg. a deleted line in a diff\n"],["begin_line","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::Terminal","CodeRay/Encoders/Terminal.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-begin_line","(kind)","<p>See <code>begin_group</code>.\n"],["begin_line","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-begin_line","(kind)",""],["begin_line","CodeRay::Tokens","CodeRay/Tokens.html#method-i-begin_line","(kind;)",""],["binary_string","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-binary_string","()","<p>The string in binary encoding.\n<p>To be used with #pos, which is the index of the byte the scanner will scan\n…\n"],["block_token","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-block_token","(action, kind)",""],["break_lines","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-break_lines","(text, style)",""],["call","CodeRay::Duo","CodeRay/Duo.html#method-i-call","(code, options = {})","<p>Allows to use Duo like a proc object:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">CodeRay</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Duo</span>[:<span class=\"ruby-identifier\">python</span> =<span class=\"ruby-operator\">&gt;</span> :<span class=\"ruby-identifier\">yaml</span>].<span class=\"ruby-identifier\">call</span>(<span class=\"ruby-identifier\">code</span>)\n</pre>\n<p>or, in Ruby 1.9 and later: …\n"],["check_group_nesting","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-check_group_nesting","(name, kind)",""],["check_options!","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-check_options-21","(options)",""],["close_span","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-close_span","()",""],["coderay_path","CodeRay","CodeRay.html#method-c-coderay_path","(*path)","<p>Assuming the path is a subpath of lib/coderay/\n"],["column","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-column","(pos = self.pos)","<p>The current column position of the scanner, starting with 1. See also:\n#line.\n"],["compile","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-compile","(tokens, options = {})","<p>Do the encoding.\n<p>The already created <code>tokens</code> object must be used; it must be a\nTokens object.\n"],["const_missing","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-c-const_missing","(sym)","<p>If FILE_EXTENSION isn’t defined, this method returns the downcase class\nname instead.\n"],["const_missing","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-const_missing","(const)","<p>Tries to <code>load</code> the missing plugin by translating\n<code>const</code> to the underscore form (eg. LinesOfCode becomes …\n"],["count","CodeRay::Tokens","CodeRay/Tokens.html#method-i-count","()","<p>Return the actual number of tokens.\n"],["css_class_for_kinds","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-css_class_for_kinds","(kinds)",""],["default","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-default","(id = nil)","<p>Define the default plugin to use when no plugin is found for a given id, or\nreturn the default plugin. …\n"],["each","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-each","(&block)","<p>Traverse the tokens.\n"],["each","CodeRay::TokensProxy","CodeRay/TokensProxy.html#method-i-each","(*args, &blk)","<p>Overwrite Struct#each.\n"],["encode","CodeRay","CodeRay.html#method-c-encode","(code, lang, format, options = {})","<p>Encode a string.\n<p>This scans <code>code</code> with the the Scanner for <code>lang</code> and\nthen encodes it with the Encoder for …\n"],["encode","CodeRay::Duo","CodeRay/Duo.html#method-i-encode","(code, options = {})","<p>Tokenize and highlight the code using <code>scanner</code> and\n<code>encoder</code>.\n"],["encode","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-encode","(code, lang, options = {})","<p>Encode the given <code>code</code> using the Scanner for <code>lang</code>.\n"],["encode","CodeRay::Tokens","CodeRay/Tokens.html#method-i-encode","(encoder, options = {})","<p>Encode the tokens using encoder.\n<p>encoder can be\n<p>a plugin name like :html oder ‘statistic’\n"],["encode","CodeRay::TokensProxy","CodeRay/TokensProxy.html#method-i-encode","(encoder, options = {})","<p>Call CodeRay.encode if <code>encoder</code> is a Symbol; otherwise, convert\nthe receiver to tokens and call encoder.encode_tokens. …\n"],["encode_file","CodeRay","CodeRay.html#method-c-encode_file","(filename, format, options = {})","<p>Encodes <code>filename</code> (a path to a code file) with the Scanner for\n<code>lang</code>.\n<p>See CodeRay.scan_file. Notice that …\n"],["encode_tokens","CodeRay","CodeRay.html#method-c-encode_tokens","(tokens, format, options = {})","<p>Encode pre-scanned Tokens. Use this together with CodeRay.scan:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'coderay'</span>\n\n<span class=\"ruby-comment\"># Highlight a short ...</span>\n</pre>\n"],["encode_tokens","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-encode_tokens","(tokens, options = {})","<p>Encode a Tokens object.\n"],["encode_with_encoding","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-encode_with_encoding","(code, target_encoding)",""],["encoder","CodeRay","CodeRay.html#method-c-encoder","(format, options = {})","<p>Finds the Encoder class for <code>format</code> and creates an instance,\npassing <code>options</code> to it.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'coderay'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["encoder","CodeRay::Duo","CodeRay/Duo.html#method-i-encoder","()","<p>The encoder of the duo. Only created once.\n"],["encoding","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-encoding","(name = 'UTF-8')","<p>The encoding used internally by this scanner.\n"],["end_group","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::Debug","CodeRay/Encoders/Debug.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-end_group","(kind)","<p>Ends a token group with the given <code>kind</code>.\n"],["end_group","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::Terminal","CodeRay/Encoders/Terminal.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-end_group","(kind)","<p>Take care of re-enabling the delegation of tokens to the output stream if\nan exluded group has ended. …\n"],["end_group","CodeRay::Encoders::XML","CodeRay/Encoders/XML.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-end_group","(kind)",""],["end_group","CodeRay::Tokens","CodeRay/Tokens.html#method-i-end_group","(kind;)",""],["end_line","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::Debug","CodeRay/Encoders/Debug.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-end_line","(kind)","<p>Ends a new line token group with the given <code>kind</code>.\n"],["end_line","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::Terminal","CodeRay/Encoders/Terminal.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-end_line","(kind)","<p>See <code>end_group</code>.\n"],["end_line","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-end_line","(kind)",""],["end_line","CodeRay::Tokens","CodeRay/Tokens.html#method-i-end_line","(kind;)",""],["extended","CodeRay::PluginHost","CodeRay/PluginHost.html#method-c-extended","(mod)","<p>Adds the module/class to the PLUGIN_HOSTS list.\n"],["fetch","CodeRay::FileType","CodeRay/FileType.html#method-c-fetch","(filename, default = nil, read_shebang = false)","<p>This works like Hash#fetch.\n<p>If the filetype cannot be found, the <code>default</code> value is\nreturned.\n"],["file_extension","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-c-file_extension","()","<p>The default file extension for output file of this encoder class.\n"],["file_extension","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-file_extension","()","<p>The default file extension for this encoder.\n"],["file_extension","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-file_extension","(extension = lang)","<p>The typical filename suffix for this scanner’s language.\n"],["file_extension","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-file_extension","()","<p>the default file extension for this scanner\n"],["finish","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-finish","(options)","<p>Called with merged options after encoding starts. The return value is the\nresult of encoding, typically …\n"],["finish","CodeRay::Encoders::Filter","CodeRay/Encoders/Filter.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::LinesOfCode","CodeRay/Encoders/LinesOfCode.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::XML","CodeRay/Encoders/XML.html#method-i-finish","(options)",""],["finish","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-finish","(options)",""],["get_output","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-get_output","(options)",""],["get_scanner_options","CodeRay","CodeRay.html#method-c-get_scanner_options","(options)","<p>Extract the options for the scanner from the <code>options</code> hash.\n<p>Returns an empty Hash if <code>:scanner_options</code> is …\n"],["guess_encoding","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-guess_encoding","(s)",""],["highlight","CodeRay","CodeRay.html#method-c-highlight","(code, lang, options = { :css => :class })","<p>Highlight a string into a HTML &lt;div&gt;.\n<p>CSS styles use classes, so you have to include a stylesheet …\n"],["highlight","CodeRay::Duo","CodeRay/Duo.html#method-i-highlight","(code, options = {})",""],["highlight","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-highlight","(code, lang, options = {})","<p>You can use highlight instead of encode, if that seems more clear to you.\n"],["highlight_file","CodeRay","CodeRay.html#method-c-highlight_file","(filename, options = { :css => :class })","<p>Highlight a file into a HTML &lt;div&gt;.\n<p>CSS styles use classes, so you have to include a stylesheet …\n"],["include_group?","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-include_group-3F","(kind)",""],["include_text_token?","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-include_text_token-3F","(text, kind)",""],["install","CodeRay::ForRedCloth","CodeRay/ForRedCloth.html#method-c-install","()",""],["interpreted_string_state","CodeRay::Scanners::Ruby","CodeRay/Scanners/Ruby.html#method-i-interpreted_string_state","()",""],["lang","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-lang","()","<p>the Plugin ID for this scanner\n"],["lang","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-lang","()","<p>The lang of this Scanner class, which is equal to its Plugin ID.\n"],["line","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-line","(pos = self.pos)","<p>The current line position of the scanner, starting with 1. See also:\n#column.\n<p>Beware, this is implemented …\n"],["list","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-list","()","<p>Returns an array of all .rb files in the plugin path.\n<p>The extension .rb is not included.\n"],["load","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-load","(id, *args, &blk)",""],["load_all","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-load_all","()","<p>Loads all plugins using list and load.\n"],["load_plugin_map","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-load_plugin_map","()","<p>Loads the map file (see map).\n<p>This is done automatically when plugin_path is called.\n"],["make_html_escape_hash","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-c-make_html_escape_hash","()",""],["make_plugin_hash","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-make_plugin_hash","()","<p>Return a plugin hash that automatically loads plugins.\n"],["make_span_for_kinds","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-make_span_for_kinds","(method, hint)",""],["map","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-map","(hash)","<p>Map a plugin_id to another.\n<p>Usage: Put this in a file plugin_path/_map.rb.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyColorHost</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">PluginHost</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["method_missing","CodeRay::Tokens","CodeRay/Tokens.html#method-i-method_missing","(meth, options = {})","<p>Redirects unknown methods to encoder calls.\n<p>For example, if you call <code>tokens.html</code>, the HTML encoder is …\n"],["method_missing","CodeRay::TokensProxy","CodeRay/TokensProxy.html#method-i-method_missing","(method, *args, &blk)","<p>Tries to call encode; delegates to tokens otherwise.\n"],["new","CodeRay::Duo","CodeRay/Duo.html#method-c-new","(lang = nil, format = nil, options = {})","<p>Create a new Duo, holding a lang and a format to highlight code.\n<p>simple:\n\n<pre>CodeRay::Duo[:ruby, :html].highlight ...</pre>\n"],["new","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-c-new","(options = {})","<p>Creates a new Encoder. <code>options</code> is saved and used for all\nencode operations, as long as you don’t overwrite …\n"],["new","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-new","(code = '', options = {})","<p>Create a new Scanner.\n<p><code>code</code> is the input String and is handled by the superclass\nStringScanner.\n<p><code>options</code> ...\n"],["new","CodeRay::TokensProxy","CodeRay/TokensProxy.html#method-c-new","(input, lang, options = {})","<p>Create a new TokensProxy with the arguments of CodeRay.scan.\n"],["new","CodeRay::WordList","CodeRay/WordList.html#method-c-new","(default = false)","<p>Create a new WordList with <code>default</code> as default value.\n"],["normalize","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-normalize","(code)","<p>Normalizes the given code into a string with UNIX newlines, in the\nscanner’s internal encoding, with …\n"],["output","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-output","(data)","<p>Append data.to_s to the output. Returns the argument.\n"],["path_to","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-path_to","(plugin_id)","<p>Returns the expected path to the plugin file for the given id.\n"],["plugin_hash","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-plugin_hash","()","<p>A Hash of plugion_id =&gt; Plugin pairs.\n"],["plugin_host","CodeRay::Plugin","CodeRay/Plugin.html#method-i-plugin_host","(host = nil)","<p>The PluginHost for this Plugin class.\n"],["plugin_path","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-plugin_path","(*args)","<p>The path where the plugins can be found.\n"],["raise_inspect","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-raise_inspect","(message, tokens, state = self.state, ambit = 30, backtrace = caller)","<p>Scanner error with additional status information\n"],["raise_inspect_arguments","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-raise_inspect_arguments","(message, tokens, state, ambit)",""],["register","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-register","(plugin, id)","<p>Every plugin must register itself for <code>id</code> by calling\nregister_for, which calls this method.\n<p>See Plugin#register_for …\n"],["register_for","CodeRay::Plugin","CodeRay/Plugin.html#method-i-register_for","(id)","<p>Register this class for the given <code>id</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyPlugin</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">PluginHost</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">BaseClass</span>\n  <span class=\"ruby-identifier\">register_for</span> :<span class=\"ruby-identifier\">my_id</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reset","CodeRay::Scanners::HTML","CodeRay/Scanners/HTML.html#method-i-reset","()",""],["reset","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-reset","()","<p>Sets back the scanner. Subclasses should redefine the reset_instance method\ninstead of this one.\n"],["reset_instance","CodeRay::Scanners::ERB","CodeRay/Scanners/ERB.html#method-i-reset_instance","()",""],["reset_instance","CodeRay::Scanners::JavaScript","CodeRay/Scanners/JavaScript.html#method-i-reset_instance","()",""],["reset_instance","CodeRay::Scanners::PHP","CodeRay/Scanners/PHP.html#method-i-reset_instance","()",""],["reset_instance","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-reset_instance","()","<p>Resets the scanner.\n"],["scan","CodeRay","CodeRay.html#method-c-scan","(code, lang, options = {})","<p>Scans the given <code>code</code> (a String) with the Scanner for\n<code>lang</code>.\n<p>This is a simple way to use CodeRay. Example: …\n"],["scan_css","CodeRay::Scanners::HTML","CodeRay/Scanners/HTML.html#method-i-scan_css","(encoder, code, state = [:initial])",""],["scan_file","CodeRay","CodeRay.html#method-c-scan_file","(filename, lang = :auto, options = {})","<p>Scans <code>filename</code> (a path to a code file) with the Scanner for\n<code>lang</code>.\n<p>If <code>lang</code> is :auto or omitted, the CodeRay::FileType …\n"],["scan_java_script","CodeRay::Scanners::HTML","CodeRay/Scanners/HTML.html#method-i-scan_java_script","(encoder, code)",""],["scan_rest","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-scan_rest","()","<p>Shorthand for scan_until(/z/). This method also avoids a JRuby 1.9 mode\nbug.\n"],["scan_tokens","CodeRay::Scanners::C","CodeRay/Scanners/C.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::CPlusPlus","CodeRay/Scanners/CPlusPlus.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::CSS","CodeRay/Scanners/CSS.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Clojure","CodeRay/Scanners/Clojure.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Debug","CodeRay/Scanners/Debug.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Delphi","CodeRay/Scanners/Delphi.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Diff","CodeRay/Scanners/Diff.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::ERB","CodeRay/Scanners/ERB.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Go","CodeRay/Scanners/Go.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Groovy","CodeRay/Scanners/Groovy.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::HAML","CodeRay/Scanners/HAML.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::HTML","CodeRay/Scanners/HTML.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::JSON","CodeRay/Scanners/JSON.html#method-i-scan_tokens","(encoder, options)","<p>See json.org/ for a definition of the JSON lexic/grammar.\n"],["scan_tokens","CodeRay::Scanners::Java","CodeRay/Scanners/Java.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::JavaScript","CodeRay/Scanners/JavaScript.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Lua","CodeRay/Scanners/Lua.html#method-i-scan_tokens","(encoder, options)","<p>CodeRay entry hook. Starts parsing.\n"],["scan_tokens","CodeRay::Scanners::PHP","CodeRay/Scanners/PHP.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Python","CodeRay/Scanners/Python.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Raydebug","CodeRay/Scanners/Raydebug.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Ruby","CodeRay/Scanners/Ruby.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::SQL","CodeRay/Scanners/SQL.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Sass","CodeRay/Scanners/Sass.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-scan_tokens","(tokens, options)","<p>This is the central method, and commonly the only one a subclass\nimplements.\n<p>Subclasses must implement …\n"],["scan_tokens","CodeRay::Scanners::Taskpaper","CodeRay/Scanners/Taskpaper.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::Text","CodeRay/Scanners/Text.html#method-i-scan_tokens","(encoder, options)",""],["scan_tokens","CodeRay::Scanners::YAML","CodeRay/Scanners/YAML.html#method-i-scan_tokens","(encoder, options)",""],["scanner","CodeRay","CodeRay.html#method-c-scanner","(lang, options = {})","<p>Finds the Scanner class for <code>lang</code> and creates an instance,\npassing <code>options</code> to it.\n<p>See Scanner.new.\n"],["scanner","CodeRay::Duo","CodeRay/Duo.html#method-i-scanner","()","<p>The scanner of the duo. Only created once.\n"],["scanner","CodeRay::TokensProxy","CodeRay/TokensProxy.html#method-i-scanner","()","<p>A (cached) scanner instance to use for the scan task.\n"],["scanner_state_info","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-scanner_state_info","(state)",""],["set_string_from_source","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-set_string_from_source","(source)",""],["set_tokens_from_options","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-set_tokens_from_options","(options)",""],["setup","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-setup","(options)","<p>Called with merged options before encoding starts. Sets @out to an empty\nstring.\n<p>See the HTML Encoder …\n"],["setup","CodeRay::Encoders::Filter","CodeRay/Encoders/Filter.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::LinesOfCode","CodeRay/Encoders/LinesOfCode.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::Terminal","CodeRay/Encoders/Terminal.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::Text","CodeRay/Encoders/Text.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::XML","CodeRay/Encoders/XML.html#method-i-setup","(options)",""],["setup","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-setup","(options)",""],["setup","CodeRay::Scanners::CSS","CodeRay/Scanners/CSS.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Debug","CodeRay/Scanners/Debug.html#method-i-setup","()",""],["setup","CodeRay::Scanners::ERB","CodeRay/Scanners/ERB.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Groovy","CodeRay/Scanners/Groovy.html#method-i-setup","()",""],["setup","CodeRay::Scanners::HAML","CodeRay/Scanners/HAML.html#method-i-setup","()",""],["setup","CodeRay::Scanners::HTML","CodeRay/Scanners/HTML.html#method-i-setup","()",""],["setup","CodeRay::Scanners::JSON","CodeRay/Scanners/JSON.html#method-i-setup","()",""],["setup","CodeRay::Scanners::JavaScript","CodeRay/Scanners/JavaScript.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Lua","CodeRay/Scanners/Lua.html#method-i-setup","()","<p>Scanner initialization.\n"],["setup","CodeRay::Scanners::PHP","CodeRay/Scanners/PHP.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Raydebug","CodeRay/Scanners/Raydebug.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Ruby","CodeRay/Scanners/Ruby.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Sass","CodeRay/Scanners/Sass.html#method-i-setup","()",""],["setup","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-setup","()","<p>Can be implemented by subclasses to do some initialization that has to be\ndone once per instance.\n<p>Use …\n"],["split_into_parts","CodeRay::Tokens","CodeRay/Tokens.html#method-i-split_into_parts","(*sizes)","<p>Split the tokens into parts of the given <code>sizes</code>.\n<p>The result will be an Array of Tokens objects. The parts …\n"],["string=","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-string-3D","(code)","<p>Set a new string to be scanned.\n"],["style_for_kinds","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-style_for_kinds","(kinds)",""],["stylesheet","CodeRay::Encoders::HTML::Output","CodeRay/Encoders/HTML/Output.html#method-i-stylesheet","(in_tag = false)",""],["text_token","CodeRay::Encoders::Count","CodeRay/Encoders/Count.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Debug","CodeRay/Encoders/Debug.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::DebugLint","CodeRay/Encoders/DebugLint.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-text_token","(text, kind)","<p>Called for each text token ([text, kind]), where text is a String.\n"],["text_token","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::JSON","CodeRay/Encoders/JSON.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Lint","CodeRay/Encoders/Lint.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Null","CodeRay/Encoders/Null.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Statistic","CodeRay/Encoders/Statistic.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Terminal","CodeRay/Encoders/Terminal.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::Text","CodeRay/Encoders/Text.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::TokenKindFilter","CodeRay/Encoders/TokenKindFilter.html#method-i-text_token","(text, kind)","<p>Add the token to the output stream if <code>kind</code> matches the\nconditions.\n"],["text_token","CodeRay::Encoders::XML","CodeRay/Encoders/XML.html#method-i-text_token","(text, kind)",""],["text_token","CodeRay::Encoders::YAML","CodeRay/Encoders/YAML.html#method-i-text_token","(text, kind)",""],["title","CodeRay::Plugin","CodeRay/Plugin.html#method-i-title","(title = nil)","<p>Returns the title of the plugin, or sets it to the optional argument\n<code>title</code>.\n"],["to_s","CodeRay::Tokens","CodeRay/Tokens.html#method-i-to_s","()","<p>Turn tokens into a string by concatenating them.\n"],["to_unix","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-c-to_unix","(code)",""],["token","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-token","(content, kind)","<p>Called with <code>content</code> and <code>kind</code> of the currently\nscanned token. For simple scanners, it’s enougth to implement …\n"],["token_path_to_hint","CodeRay::Encoders::HTML","CodeRay/Encoders/HTML.html#method-c-token_path_to_hint","(hint, kinds)","<p>Generate a hint about the given <code>kinds</code> in a <code>hint</code>\nstyle.\n<p><code>hint</code> may be :info, :info_long or :debug.\n"],["tokenize","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-tokenize","(source = nil, options = {})","<p>Scan the code and returns all tokens in a Tokens object.\n"],["tokens","CodeRay::Encoders::Encoder","CodeRay/Encoders/Encoder.html#method-i-tokens","(tokens, options = {})",""],["tokens","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-tokens","()","<p>Cache the result of tokenize.\n"],["tokens","CodeRay::TokensProxy","CodeRay/TokensProxy.html#method-i-tokens","()","<p>The (cached) result of the tokenized input; a Tokens instance.\n"],["tokens_last","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-tokens_last","(tokens, n)",""],["tokens_size","CodeRay::Scanners::Scanner","CodeRay/Scanners/Scanner.html#method-i-tokens_size","(tokens)",""],["type_from_shebang","CodeRay::FileType","CodeRay/FileType.html#method-c-type_from_shebang","(filename)",""],["validate_id","CodeRay::PluginHost","CodeRay/PluginHost.html#method-i-validate_id","(id)","<p>Converts <code>id</code> to a valid plugin ID String, or returns\n<code>nil</code>.\n<p>Raises <code>ArgumentError</code> for all other objects, or …\n"],["wrap!","CodeRay::Encoders::HTML::Output","CodeRay/Encoders/HTML/Output.html#method-i-wrap-21","(element, *args)",""],["wrap_in!","CodeRay::Encoders::HTML::Output","CodeRay/Encoders/HTML/Output.html#method-i-wrap_in-21","(template)",""],["wrapped_in","CodeRay::Encoders::HTML::Output","CodeRay/Encoders/HTML/Output.html#method-i-wrapped_in","()",""],["wrapped_in?","CodeRay::Encoders::HTML::Output","CodeRay/Encoders/HTML/Output.html#method-i-wrapped_in-3F","(element)",""],["xml_scanner","CodeRay::Scanners::JavaScript","CodeRay/Scanners/JavaScript.html#method-i-xml_scanner","()",""],["README_INDEX","","README_INDEX_rdoc.html","","<p>CodeRay\n<p>Tired of blue’n’gray? Try the original version of this documentation on\ncoderay.rubychan.de :-) …\n"]]}}