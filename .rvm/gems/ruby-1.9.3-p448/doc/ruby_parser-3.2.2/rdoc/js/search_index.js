var search_data = {"index":{"searchIndex":["fixnum","rpstringscanner","regexp","ruby18parser","ruby19parser","ruby20parser","rubylexer","rubyparsergauntlet","rubyparserstuff","environment","keyword","kwtable","ruby18parser","ruby19parser","ruby20parser","rubyparser","syntaxerror","sexp","stackstate","string","[]()","[]=()","add()","add_all()","advance()","all()","arg_add()","arg_ambiguous()","arg_blk_pass()","arg_concat()","argl()","args()","array_to_hash()","aryset()","assignable()","backref_assign_error()","block_append()","block_dup_check()","block_pass?()","block_var()","block_var18()","broke()","call_args()","charpos()","clean_mlhs()","comments()","cond()","current()","current_line()","d()","debug20()","diff_pp()","do_parse()","dynamic()","dynamic?()","expr_beg_push()","extend()","extra_lines_added()","extra_lines_added=()","fix_arg_lex_state()","for_current_ruby()","get_match_node()","getch()","gettable()","grep()","hack_encoding()","handle_encoding()","heredoc()","heredoc_identifier()","in_lex_state?()","inspect()","int_with_base()","is_arg?()","is_beg?()","is_end?()","is_in_state()","is_label_possible?()","is_space_arg?()","keyword18()","keyword19()","lex_state=()","lexpop()","lineno()","lineno()","list_append()","list_prepend()","literal_concat()","logop()","new()","new()","new()","new()","new()","new()","new()","new_aref()","new_body()","new_call()","new_case()","new_class()","new_compstmt()","new_defn()","new_defs()","new_for()","new_if()","new_iter()","new_masgn()","new_module()","new_op_asgn()","new_regexp()","new_resbody()","new_sclass()","new_super()","new_undef()","new_until()","new_until_or_while()","new_when()","new_while()","new_xstring()","new_yield()","next_token()","node_assign()","old_getch()","old_scan()","on_error()","paren()","parse()","parse_number()","parse_quote()","parse_string()","pop()","process()","process()","process()","process_token()","push()","rb_compile_error()","read_escape()","regx_options()","remove_begin()","reset()","reset()","reset()","reset()","ret_args()","ruby18()","ruby19()","run()","s()","scan()","should_skip?()","src=()","string_to_pos()","syntax_error()","to_sym()","tokadd_escape()","tokadd_string()","unescape()","unextend()","unread_many()","use()","used?()","value()","value_expr()","void_stmts()","warning()","warning()","yylex()","yylex_paren18()","yylex_paren19()","yylex_string()","history","manifest","readme"],"longSearchIndex":["fixnum","rpstringscanner","regexp","ruby18parser","ruby19parser","ruby20parser","rubylexer","rubyparsergauntlet","rubyparserstuff","rubyparserstuff::environment","rubyparserstuff::keyword","rubyparserstuff::keyword::kwtable","rubyparserstuff::ruby18parser","rubyparserstuff::ruby19parser","rubyparserstuff::ruby20parser","rubyparserstuff::rubyparser","rubyparserstuff::rubyparser::syntaxerror","rubyparserstuff::sexp","rubyparserstuff::stackstate","rubyparserstuff::string","rubyparserstuff::environment#[]()","rubyparserstuff::environment#[]=()","rubyparserstuff::sexp#add()","rubyparserstuff::sexp#add_all()","rubylexer#advance()","rubyparserstuff::environment#all()","rubyparserstuff#arg_add()","rubylexer#arg_ambiguous()","rubyparserstuff#arg_blk_pass()","rubyparserstuff#arg_concat()","rubyparserstuff#argl()","rubyparserstuff#args()","rubyparserstuff#array_to_hash()","rubyparserstuff#aryset()","rubyparserstuff#assignable()","rubyparserstuff#backref_assign_error()","rubyparserstuff#block_append()","rubyparserstuff#block_dup_check()","rubyparserstuff::sexp#block_pass?()","rubyparserstuff#block_var()","rubyparserstuff#block_var18()","rubyparsergauntlet#broke()","rubyparserstuff#call_args()","rpstringscanner#charpos()","rubyparserstuff#clean_mlhs()","rubylexer#comments()","rubyparserstuff#cond()","rubyparserstuff::environment#current()","rpstringscanner#current_line()","rpstringscanner#d()","rubyparserstuff#debug20()","rubyparsergauntlet#diff_pp()","rubyparserstuff#do_parse()","rubyparserstuff::environment#dynamic()","rubyparserstuff::environment#dynamic?()","rubylexer#expr_beg_push()","rubyparserstuff::environment#extend()","rpstringscanner#extra_lines_added()","rpstringscanner#extra_lines_added=()","rubylexer#fix_arg_lex_state()","rubyparserstuff::rubyparser::for_current_ruby()","rubyparserstuff#get_match_node()","rpstringscanner#getch()","rubyparserstuff#gettable()","rubyparserstuff::string#grep()","rubyparserstuff#hack_encoding()","rubyparserstuff#handle_encoding()","rubylexer#heredoc()","rubylexer#heredoc_identifier()","rubylexer#in_lex_state?()","rubyparserstuff::stackstate#inspect()","rubylexer#int_with_base()","rubylexer#is_arg?()","rubylexer#is_beg?()","rubylexer#is_end?()","rubyparserstuff::stackstate#is_in_state()","rubylexer#is_label_possible?()","rubylexer#is_space_arg?()","rubyparserstuff::keyword::keyword18()","rubyparserstuff::keyword::keyword19()","rubylexer#lex_state=()","rubyparserstuff::stackstate#lexpop()","rpstringscanner#lineno()","rubylexer#lineno()","rubyparserstuff#list_append()","rubyparserstuff#list_prepend()","rubyparserstuff#literal_concat()","rubyparserstuff#logop()","rubylexer::new()","rubyparsergauntlet::new()","rubyparserstuff::new()","rubyparserstuff::environment::new()","rubyparserstuff::keyword::kwtable::new()","rubyparserstuff::rubyparser::new()","rubyparserstuff::stackstate::new()","rubyparserstuff#new_aref()","rubyparserstuff#new_body()","rubyparserstuff#new_call()","rubyparserstuff#new_case()","rubyparserstuff#new_class()","rubyparserstuff#new_compstmt()","rubyparserstuff#new_defn()","rubyparserstuff#new_defs()","rubyparserstuff#new_for()","rubyparserstuff#new_if()","rubyparserstuff#new_iter()","rubyparserstuff#new_masgn()","rubyparserstuff#new_module()","rubyparserstuff#new_op_asgn()","rubyparserstuff#new_regexp()","rubyparserstuff#new_resbody()","rubyparserstuff#new_sclass()","rubyparserstuff#new_super()","rubyparserstuff#new_undef()","rubyparserstuff#new_until()","rubyparserstuff#new_until_or_while()","rubyparserstuff#new_when()","rubyparserstuff#new_while()","rubyparserstuff#new_xstring()","rubyparserstuff#new_yield()","rubyparserstuff#next_token()","rubyparserstuff#node_assign()","rpstringscanner#old_getch()","rpstringscanner#old_scan()","rubyparserstuff#on_error()","rubyparserstuff::sexp#paren()","rubyparserstuff::rubyparser#parse()","rubylexer#parse_number()","rubylexer#parse_quote()","rubylexer#parse_string()","rubyparserstuff::stackstate#pop()","rubyparsergauntlet#process()","rubyparserstuff#process()","rubyparserstuff::rubyparser#process()","rubylexer#process_token()","rubyparserstuff::stackstate#push()","rubylexer#rb_compile_error()","rubylexer#read_escape()","rubylexer#regx_options()","rubyparserstuff#remove_begin()","rubylexer#reset()","rubyparserstuff#reset()","rubyparserstuff::environment#reset()","rubyparserstuff::rubyparser#reset()","rubyparserstuff#ret_args()","rubylexer#ruby18()","rubylexer#ruby19()","rubyparsergauntlet#run()","rubyparserstuff#s()","rpstringscanner#scan()","rubyparsergauntlet#should_skip?()","rubylexer#src=()","rpstringscanner#string_to_pos()","rubyparserstuff#syntax_error()","rubyparserstuff::sexp#to_sym()","rubylexer#tokadd_escape()","rubylexer#tokadd_string()","rubylexer#unescape()","rubyparserstuff::environment#unextend()","rpstringscanner#unread_many()","rubyparserstuff::environment#use()","rubyparserstuff::environment#used?()","rubyparserstuff::sexp#value()","rubyparserstuff#value_expr()","rubyparserstuff#void_stmts()","rubylexer#warning()","rubyparserstuff#warning()","rubylexer#yylex()","rubylexer#yylex_paren18()","rubylexer#yylex_paren19()","rubylexer#yylex_string()","","",""],"info":[["Fixnum","","Fixnum.html","",""],["RPStringScanner","","RPStringScanner.html","",""],["Regexp","","Regexp.html","",""],["Ruby18Parser","","Ruby18Parser.html","",""],["Ruby19Parser","","Ruby19Parser.html","",""],["Ruby20Parser","","Ruby20Parser.html","",""],["RubyLexer","","RubyLexer.html","",""],["RubyParserGauntlet","","RubyParserGauntlet.html","",""],["RubyParserStuff","","RubyParserStuff.html","",""],["RubyParserStuff::Environment","","RubyParserStuff/Environment.html","",""],["RubyParserStuff::Keyword","","RubyParserStuff/Keyword.html","",""],["RubyParserStuff::Keyword::KWtable","","RubyParserStuff/Keyword/KWtable.html","",""],["RubyParserStuff::Ruby18Parser","","RubyParserStuff/Ruby18Parser.html","",""],["RubyParserStuff::Ruby19Parser","","RubyParserStuff/Ruby19Parser.html","",""],["RubyParserStuff::Ruby20Parser","","RubyParserStuff/Ruby20Parser.html","",""],["RubyParserStuff::RubyParser","","RubyParserStuff/RubyParser.html","","<p>RubyParser is a compound parser that first attempts to parse using the 1.9\nsyntax parser and falls back â€¦\n"],["RubyParserStuff::RubyParser::SyntaxError","","RubyParserStuff/RubyParser/SyntaxError.html","",""],["RubyParserStuff::Sexp","","RubyParserStuff/Sexp.html","",""],["RubyParserStuff::StackState","","RubyParserStuff/StackState.html","",""],["RubyParserStuff::String","","RubyParserStuff/String.html","",""],["[]","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-5B-5D","(k)",""],["[]=","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-5B-5D-3D","(k, v)",""],["add","RubyParserStuff::Sexp","RubyParserStuff/Sexp.html#method-i-add","(x)",""],["add_all","RubyParserStuff::Sexp","RubyParserStuff/Sexp.html#method-i-add_all","(x)",""],["advance","RubyLexer","RubyLexer.html#method-i-advance","()","<p>How the parser advances to the next token.\n<p>@return true if not at end of file (EOF).\n"],["all","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-all","()",""],["arg_add","RubyParserStuff","RubyParserStuff.html#method-i-arg_add","(node1, node2)",""],["arg_ambiguous","RubyLexer","RubyLexer.html#method-i-arg_ambiguous","()",""],["arg_blk_pass","RubyParserStuff","RubyParserStuff.html#method-i-arg_blk_pass","(node1, node2)",""],["arg_concat","RubyParserStuff","RubyParserStuff.html#method-i-arg_concat","(node1, node2)",""],["argl","RubyParserStuff","RubyParserStuff.html#method-i-argl","(x)",""],["args","RubyParserStuff","RubyParserStuff.html#method-i-args","(args)",""],["array_to_hash","RubyParserStuff","RubyParserStuff.html#method-i-array_to_hash","(array)",""],["aryset","RubyParserStuff","RubyParserStuff.html#method-i-aryset","(receiver, index)",""],["assignable","RubyParserStuff","RubyParserStuff.html#method-i-assignable","(lhs, value = nil)",""],["backref_assign_error","RubyParserStuff","RubyParserStuff.html#method-i-backref_assign_error","(ref)",""],["block_append","RubyParserStuff","RubyParserStuff.html#method-i-block_append","(head, tail)",""],["block_dup_check","RubyParserStuff","RubyParserStuff.html#method-i-block_dup_check","(call_or_args, block)",""],["block_pass?","RubyParserStuff::Sexp","RubyParserStuff/Sexp.html#method-i-block_pass-3F","()",""],["block_var","RubyParserStuff","RubyParserStuff.html#method-i-block_var","(*args)",""],["block_var18","RubyParserStuff","RubyParserStuff.html#method-i-block_var18","(ary, splat, block)",""],["broke","RubyParserGauntlet","RubyParserGauntlet.html#method-i-broke","(name, file, msg)",""],["call_args","RubyParserStuff","RubyParserStuff.html#method-i-call_args","(args)",""],["charpos","RPStringScanner","RPStringScanner.html#method-i-charpos","()",""],["clean_mlhs","RubyParserStuff","RubyParserStuff.html#method-i-clean_mlhs","(sexp)",""],["comments","RubyLexer","RubyLexer.html#method-i-comments","()",""],["cond","RubyParserStuff","RubyParserStuff.html#method-i-cond","(node)",""],["current","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-current","()",""],["current_line","RPStringScanner","RPStringScanner.html#method-i-current_line","()",""],["d","RPStringScanner","RPStringScanner.html#method-i-d","(o)",""],["debug20","RubyParserStuff","RubyParserStuff.html#method-i-debug20","(n, v = nil, r = nil)",""],["diff_pp","RubyParserGauntlet","RubyParserGauntlet.html#method-i-diff_pp","(o1, o2)",""],["do_parse","RubyParserStuff","RubyParserStuff.html#method-i-do_parse","()","<p>for pure ruby systems only\n"],["dynamic","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-dynamic","()",""],["dynamic?","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-dynamic-3F","()",""],["expr_beg_push","RubyLexer","RubyLexer.html#method-i-expr_beg_push","(val)",""],["extend","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-extend","(dyn = false)",""],["extra_lines_added","RPStringScanner","RPStringScanner.html#method-i-extra_lines_added","()",""],["extra_lines_added=","RPStringScanner","RPStringScanner.html#method-i-extra_lines_added-3D","(val)",""],["fix_arg_lex_state","RubyLexer","RubyLexer.html#method-i-fix_arg_lex_state","()",""],["for_current_ruby","RubyParserStuff::RubyParser","RubyParserStuff/RubyParser.html#method-c-for_current_ruby","()",""],["get_match_node","RubyParserStuff","RubyParserStuff.html#method-i-get_match_node","(lhs, rhs)",""],["getch","RPStringScanner","RPStringScanner.html#method-i-getch","()",""],["gettable","RubyParserStuff","RubyParserStuff.html#method-i-gettable","(id)",""],["grep","RubyParserStuff::String","RubyParserStuff/String.html#method-i-grep","(re)",""],["hack_encoding","RubyParserStuff","RubyParserStuff.html#method-i-hack_encoding","(str, extra = nil)",""],["handle_encoding","RubyParserStuff","RubyParserStuff.html#method-i-handle_encoding","(str)","<p>Returns a UTF-8 encoded string after processing BOMs and magic encoding\ncomments.\n<p>Holy crapâ€¦ ok. Here â€¦\n"],["heredoc","RubyLexer","RubyLexer.html#method-i-heredoc","(here)",""],["heredoc_identifier","RubyLexer","RubyLexer.html#method-i-heredoc_identifier","()",""],["in_lex_state?","RubyLexer","RubyLexer.html#method-i-in_lex_state-3F","(*states)",""],["inspect","RubyParserStuff::StackState","RubyParserStuff/StackState.html#method-i-inspect","()",""],["int_with_base","RubyLexer","RubyLexer.html#method-i-int_with_base","(base)",""],["is_arg?","RubyLexer","RubyLexer.html#method-i-is_arg-3F","()",""],["is_beg?","RubyLexer","RubyLexer.html#method-i-is_beg-3F","()",""],["is_end?","RubyLexer","RubyLexer.html#method-i-is_end-3F","()",""],["is_in_state","RubyParserStuff::StackState","RubyParserStuff/StackState.html#method-i-is_in_state","()",""],["is_label_possible?","RubyLexer","RubyLexer.html#method-i-is_label_possible-3F","(command_state)",""],["is_space_arg?","RubyLexer","RubyLexer.html#method-i-is_space_arg-3F","(c = \"x\")","<p>TODO #define IS_AFTER_OPERATOR() IS_lex_state(EXPR_FNAME | EXPR_DOT)\n"],["keyword18","RubyParserStuff::Keyword","RubyParserStuff/Keyword.html#method-c-keyword18","(str)",""],["keyword19","RubyParserStuff::Keyword","RubyParserStuff/Keyword.html#method-c-keyword19","(str)",""],["lex_state=","RubyLexer","RubyLexer.html#method-i-lex_state-3D","(o)",""],["lexpop","RubyParserStuff::StackState","RubyParserStuff/StackState.html#method-i-lexpop","()",""],["lineno","RPStringScanner","RPStringScanner.html#method-i-lineno","()",""],["lineno","RubyLexer","RubyLexer.html#method-i-lineno","()",""],["list_append","RubyParserStuff","RubyParserStuff.html#method-i-list_append","(list, item)",""],["list_prepend","RubyParserStuff","RubyParserStuff.html#method-i-list_prepend","(item, list)",""],["literal_concat","RubyParserStuff","RubyParserStuff.html#method-i-literal_concat","(head, tail)",""],["logop","RubyParserStuff","RubyParserStuff.html#method-i-logop","(type, left, right)",""],["new","RubyLexer","RubyLexer.html#method-c-new","(v = 18)",""],["new","RubyParserGauntlet","RubyParserGauntlet.html#method-c-new","()",""],["new","RubyParserStuff","RubyParserStuff.html#method-c-new","(options = {})",""],["new","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-c-new","(dyn = false)",""],["new","RubyParserStuff::Keyword::KWtable","RubyParserStuff/Keyword/KWtable.html#method-c-new","(name, id=[], state=nil)",""],["new","RubyParserStuff::RubyParser","RubyParserStuff/RubyParser.html#method-c-new","()",""],["new","RubyParserStuff::StackState","RubyParserStuff/StackState.html#method-c-new","(name)",""],["new_aref","RubyParserStuff","RubyParserStuff.html#method-i-new_aref","(val)",""],["new_body","RubyParserStuff","RubyParserStuff.html#method-i-new_body","(val)",""],["new_call","RubyParserStuff","RubyParserStuff.html#method-i-new_call","(recv, meth, args = nil)",""],["new_case","RubyParserStuff","RubyParserStuff.html#method-i-new_case","(expr, body)",""],["new_class","RubyParserStuff","RubyParserStuff.html#method-i-new_class","(val)",""],["new_compstmt","RubyParserStuff","RubyParserStuff.html#method-i-new_compstmt","(val)",""],["new_defn","RubyParserStuff","RubyParserStuff.html#method-i-new_defn","(val)",""],["new_defs","RubyParserStuff","RubyParserStuff.html#method-i-new_defs","(val)",""],["new_for","RubyParserStuff","RubyParserStuff.html#method-i-new_for","(expr, var, body)",""],["new_if","RubyParserStuff","RubyParserStuff.html#method-i-new_if","(c, t, f)",""],["new_iter","RubyParserStuff","RubyParserStuff.html#method-i-new_iter","(call, args, body)",""],["new_masgn","RubyParserStuff","RubyParserStuff.html#method-i-new_masgn","(lhs, rhs, wrap = false)",""],["new_module","RubyParserStuff","RubyParserStuff.html#method-i-new_module","(val)",""],["new_op_asgn","RubyParserStuff","RubyParserStuff.html#method-i-new_op_asgn","(val)",""],["new_regexp","RubyParserStuff","RubyParserStuff.html#method-i-new_regexp","(val)",""],["new_resbody","RubyParserStuff","RubyParserStuff.html#method-i-new_resbody","(cond, body)",""],["new_sclass","RubyParserStuff","RubyParserStuff.html#method-i-new_sclass","(val)",""],["new_super","RubyParserStuff","RubyParserStuff.html#method-i-new_super","(args)",""],["new_undef","RubyParserStuff","RubyParserStuff.html#method-i-new_undef","(n, m = nil)",""],["new_until","RubyParserStuff","RubyParserStuff.html#method-i-new_until","(block, expr, pre)",""],["new_until_or_while","RubyParserStuff","RubyParserStuff.html#method-i-new_until_or_while","(type, block, expr, pre)",""],["new_when","RubyParserStuff","RubyParserStuff.html#method-i-new_when","(cond, body)",""],["new_while","RubyParserStuff","RubyParserStuff.html#method-i-new_while","(block, expr, pre)",""],["new_xstring","RubyParserStuff","RubyParserStuff.html#method-i-new_xstring","(str)",""],["new_yield","RubyParserStuff","RubyParserStuff.html#method-i-new_yield","(args = nil)",""],["next_token","RubyParserStuff","RubyParserStuff.html#method-i-next_token","()",""],["node_assign","RubyParserStuff","RubyParserStuff.html#method-i-node_assign","(lhs, rhs)",""],["old_getch","RPStringScanner","RPStringScanner.html#method-i-old_getch","()",""],["old_scan","RPStringScanner","RPStringScanner.html#method-i-old_scan","(re)",""],["on_error","RubyParserStuff","RubyParserStuff.html#method-i-on_error","(et, ev, values)",""],["paren","RubyParserStuff::Sexp","RubyParserStuff/Sexp.html#method-i-paren","()",""],["parse","RubyParserStuff::RubyParser","RubyParserStuff/RubyParser.html#method-i-parse","(s, f = \"(string)\", t = 10)",""],["parse_number","RubyLexer","RubyLexer.html#method-i-parse_number","()","\n<pre>Parse a number from the input stream.</pre>\n<p>@param c The first character of the number. @return A int constant â€¦\n"],["parse_quote","RubyLexer","RubyLexer.html#method-i-parse_quote","()",""],["parse_string","RubyLexer","RubyLexer.html#method-i-parse_string","(quote)",""],["pop","RubyParserStuff::StackState","RubyParserStuff/StackState.html#method-i-pop","()",""],["process","RubyParserGauntlet","RubyParserGauntlet.html#method-i-process","(path, name)",""],["process","RubyParserStuff","RubyParserStuff.html#method-i-process","(str, file = \"(string)\", time = 10)","<p>Parse <code>str</code> at path <code>file</code> and return a sexp. Raises\nTimeout::Error if it runs for more than <code>time</code> seconds. â€¦\n"],["process","RubyParserStuff::RubyParser","RubyParserStuff/RubyParser.html#method-i-process","(s, f = \"(string)\", t = 10)",""],["process_token","RubyLexer","RubyLexer.html#method-i-process_token","(command_state)",""],["push","RubyParserStuff::StackState","RubyParserStuff/StackState.html#method-i-push","(val)",""],["rb_compile_error","RubyLexer","RubyLexer.html#method-i-rb_compile_error","(msg)",""],["read_escape","RubyLexer","RubyLexer.html#method-i-read_escape","()",""],["regx_options","RubyLexer","RubyLexer.html#method-i-regx_options","()",""],["remove_begin","RubyParserStuff","RubyParserStuff.html#method-i-remove_begin","(node)",""],["reset","RubyLexer","RubyLexer.html#method-i-reset","()",""],["reset","RubyParserStuff","RubyParserStuff.html#method-i-reset","()",""],["reset","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-reset","()",""],["reset","RubyParserStuff::RubyParser","RubyParserStuff/RubyParser.html#method-i-reset","()",""],["ret_args","RubyParserStuff","RubyParserStuff.html#method-i-ret_args","(node)",""],["ruby18","RubyLexer","RubyLexer.html#method-i-ruby18","()",""],["ruby19","RubyLexer","RubyLexer.html#method-i-ruby19","()",""],["run","RubyParserGauntlet","RubyParserGauntlet.html#method-i-run","(name)",""],["s","RubyParserStuff","RubyParserStuff.html#method-i-s","(*args)",""],["scan","RPStringScanner","RPStringScanner.html#method-i-scan","(re)",""],["should_skip?","RubyParserGauntlet","RubyParserGauntlet.html#method-i-should_skip-3F","(name)",""],["src=","RubyLexer","RubyLexer.html#method-i-src-3D","(src)",""],["string_to_pos","RPStringScanner","RPStringScanner.html#method-i-string_to_pos","()",""],["syntax_error","RubyParserStuff","RubyParserStuff.html#method-i-syntax_error","(msg)",""],["to_sym","RubyParserStuff::Sexp","RubyParserStuff/Sexp.html#method-i-to_sym","()",""],["tokadd_escape","RubyLexer","RubyLexer.html#method-i-tokadd_escape","(term)",""],["tokadd_string","RubyLexer","RubyLexer.html#method-i-tokadd_string","(func, term, paren)",""],["unescape","RubyLexer","RubyLexer.html#method-i-unescape","(s)",""],["unextend","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-unextend","()",""],["unread_many","RPStringScanner","RPStringScanner.html#method-i-unread_many","(str)","<p>TODO: once we get rid of these, we can make things like TODO: current_line\nand lineno much more accurate â€¦\n"],["use","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-use","(id)",""],["used?","RubyParserStuff::Environment","RubyParserStuff/Environment.html#method-i-used-3F","(id)",""],["value","RubyParserStuff::Sexp","RubyParserStuff/Sexp.html#method-i-value","()",""],["value_expr","RubyParserStuff","RubyParserStuff.html#method-i-value_expr","(oldnode)",""],["void_stmts","RubyParserStuff","RubyParserStuff.html#method-i-void_stmts","(node)",""],["warning","RubyLexer","RubyLexer.html#method-i-warning","(s)",""],["warning","RubyParserStuff","RubyParserStuff.html#method-i-warning","(s)",""],["yylex","RubyLexer","RubyLexer.html#method-i-yylex","()","<p>Returns the next token. Also sets yy_val is needed.\n<p>@return Description of the Returned Value\n"],["yylex_paren18","RubyLexer","RubyLexer.html#method-i-yylex_paren18","()",""],["yylex_paren19","RubyLexer","RubyLexer.html#method-i-yylex_paren19","()",""],["yylex_string","RubyLexer","RubyLexer.html#method-i-yylex_string","()",""],["History","","History_txt.html","","<p>3.2.2 / 2013-07-11\n<p>5 bug fixes:\n<p>1.9/2.0: fixed assocs in return args. (presidentbeef)\n"],["Manifest","","Manifest_txt.html","","<p>.autotest History.txt Manifest.txt README.txt Rakefile bin/ruby_parse\nbin/ruby_parse_extract_error lib/gauntlet_rubyparser.rb â€¦\n"],["README","","README_txt.html","","<p>ruby_parser\n<p>home  &mdash; github.com/seattlerb/ruby_parser\n<p>bugs  &mdash; github.com/seattlerb/ruby_parser/issues\n"]]}}