var search_data = {"index":{"searchIndex":["file","hash","io","object","reek","candidatemethod","cli","application","helpcommand","options","quietreport","reekcommand","reportformatter","simplewarningformatter","singlelinewarningformatter","verbosereport","versioncommand","warningformatterwithlinenumbers","yamlcommand","core","codecontext","codeparser","methodcontext","methodparameters","modulecontext","overrides","singletonmethodcontext","smellconfiguration","smellrepository","sniffer","stopcontext","warningcollector","examiner","methodgroup","rake","task","smellwarning","smells","attribute","booleanparameter","classvariable","controlparameter","dataclump","duplicatemethodcall","excludeinitialize","featureenvy","irresponsiblemodule","longparameterlist","longyieldlist","nestediterators","nilcheck","callnodefinder","casenodefinder","nodefinder","repeatedconditional","smelldetector","toomanyinstancevariables","toomanymethods","toomanystatements","uncommunicativemethodname","uncommunicativemodulename","uncommunicativeparametername","uncommunicativevariablename","unusedparameters","utilityfunction","source","codecomment","configfile","referencecollector","sexpextensions","attrasgnnode","callnode","casenode","classnode","cvarnode","cvasgnnode","cvdeclnode","defnnode","defsnode","ifnode","iternode","litnode","methodnode","modulenode","yieldnode","sexpformatter","sexpnode","sourcecode","sourcefile","sourcelocator","sourcerepository","treedresser","spec","string","<=>()","add_to_config()","adopt()","adopt!()","all_active_smells()","all_smells()","all_sources()","arg_names()","arg_names()","arg_names()","arg_names()","args()","args()","args()","args()","argslist()","argslist()","banner()","block()","body()","body()","call()","class_variables_in()","clumps()","clumps_containing()","collect_clumps_in()","condition()","condition()","conditional_counts()","config()","config()","config_for()","configure()","configure()","configure()","configure()","configure()","configure_with()","contains_all?()","context()","contexts()","contexts()","count_clause()","count_statements()","count_statements()","count_statements()","create()","create()","deep_copy()","deep_copy()","default_assignments()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","default_config()","delete()","delete_infrequent_parameters()","delete_small_methods()","dress()","each()","each_node()","each_node()","enabled?()","enabled?()","envious_receivers()","envious_receivers()","eq_nil_use?()","eql?()","err_io=()","examine()","examine()","examine()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","examine_context()","exception?()","execute()","execute()","execute()","execute()","execute()","extensions_for()","find_assignment_variable_names()","find_block_argument_variable_names()","find_class()","for_context()","format()","format()","format()","format()","format()","format_list()","format_ruby()","found_smell()","full_name()","full_name()","full_name()","full_name()","full_name()","get_sources()","has_type?()","hash()","hash()","header()","include_eq?()","is_active()","is_bad_name?()","is_bad_name?()","is_descriptive?()","is_language_node?()","line()","lines()","load()","local_config()","local_nodes()","look_for()","matches?()","matches?()","merge!()","message()","method_missing()","method_missing()","method_name()","name()","name()","name()","name()","name()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nilq_use?()","nil_chk?()","nil_chk?()","num_active_smells()","num_masked_smells()","num_methods()","num_refs_to_self()","output()","output_smells_total()","overrides_for()","parameter_names()","parameter_names()","parameters()","parse()","parse()","print_clump()","problem()","process()","process_args()","process_attrasgn()","process_block()","process_call()","process_case()","process_class()","process_default()","process_defn()","process_defs()","process_for()","process_iasgn()","process_if()","process_ivar()","process_module()","process_op_asgn1()","process_resbody()","process_rescue()","process_self()","process_until()","process_when()","process_while()","process_zsuper()","push_keys()","receiver()","receiver()","record_call_to()","record_use_of_self()","record_variable_name()","recursively_record_variable_names()","reek()","reek_of()","reek_only_of()","register()","report()","report()","report_on()","report_on()","report_on()","report_on()","report_smells()","report_success()","set_options()","simple_name()","smell_class()","smell_classes()","smells()","smells_count()","smelly()","smelly()","smelly?()","sort_key()","source()","subclass()","superclass()","syntax_tree()","text_name()","to_reek_source()","to_reek_source()","to_reek_source()","value()","value()","value()","variable_names()","warnings()","changelog","license"],"longSearchIndex":["file","hash","io","object","reek","reek::candidatemethod","reek::cli","reek::cli::application","reek::cli::helpcommand","reek::cli::options","reek::cli::quietreport","reek::cli::reekcommand","reek::cli::reportformatter","reek::cli::simplewarningformatter","reek::cli::singlelinewarningformatter","reek::cli::verbosereport","reek::cli::versioncommand","reek::cli::warningformatterwithlinenumbers","reek::cli::yamlcommand","reek::core","reek::core::codecontext","reek::core::codeparser","reek::core::methodcontext","reek::core::methodparameters","reek::core::modulecontext","reek::core::overrides","reek::core::singletonmethodcontext","reek::core::smellconfiguration","reek::core::smellrepository","reek::core::sniffer","reek::core::stopcontext","reek::core::warningcollector","reek::examiner","reek::methodgroup","reek::rake","reek::rake::task","reek::smellwarning","reek::smells","reek::smells::attribute","reek::smells::booleanparameter","reek::smells::classvariable","reek::smells::controlparameter","reek::smells::dataclump","reek::smells::duplicatemethodcall","reek::smells::excludeinitialize","reek::smells::featureenvy","reek::smells::irresponsiblemodule","reek::smells::longparameterlist","reek::smells::longyieldlist","reek::smells::nestediterators","reek::smells::nilcheck","reek::smells::nilcheck::callnodefinder","reek::smells::nilcheck::casenodefinder","reek::smells::nilcheck::nodefinder","reek::smells::repeatedconditional","reek::smells::smelldetector","reek::smells::toomanyinstancevariables","reek::smells::toomanymethods","reek::smells::toomanystatements","reek::smells::uncommunicativemethodname","reek::smells::uncommunicativemodulename","reek::smells::uncommunicativeparametername","reek::smells::uncommunicativevariablename","reek::smells::unusedparameters","reek::smells::utilityfunction","reek::source","reek::source::codecomment","reek::source::configfile","reek::source::referencecollector","reek::source::sexpextensions","reek::source::sexpextensions::attrasgnnode","reek::source::sexpextensions::callnode","reek::source::sexpextensions::casenode","reek::source::sexpextensions::classnode","reek::source::sexpextensions::cvarnode","reek::source::sexpextensions::cvasgnnode","reek::source::sexpextensions::cvdeclnode","reek::source::sexpextensions::defnnode","reek::source::sexpextensions::defsnode","reek::source::sexpextensions::ifnode","reek::source::sexpextensions::iternode","reek::source::sexpextensions::litnode","reek::source::sexpextensions::methodnode","reek::source::sexpextensions::modulenode","reek::source::sexpextensions::yieldnode","reek::source::sexpformatter","reek::source::sexpnode","reek::source::sourcecode","reek::source::sourcefile","reek::source::sourcelocator","reek::source::sourcerepository","reek::source::treedresser","reek::spec","string","reek::smellwarning#<=>()","reek::source::codecomment#add_to_config()","hash#adopt()","hash#adopt!()","reek::examiner#all_active_smells()","reek::examiner#all_smells()","reek::source::sourcelocator#all_sources()","reek::candidatemethod#arg_names()","reek::source::sexpextensions::callnode#arg_names()","reek::source::sexpextensions::methodnode#arg_names()","reek::source::sexpextensions::yieldnode#arg_names()","reek::source::sexpextensions::attrasgnnode#args()","reek::source::sexpextensions::callnode#args()","reek::source::sexpextensions::iternode#args()","reek::source::sexpextensions::yieldnode#args()","reek::source::sexpextensions::defnnode#argslist()","reek::source::sexpextensions::defsnode#argslist()","reek::cli::options#banner()","reek::source::sexpextensions::iternode#block()","reek::source::sexpextensions::defnnode#body()","reek::source::sexpextensions::defsnode#body()","reek::source::sexpextensions::iternode#call()","reek::smells::classvariable#class_variables_in()","reek::methodgroup#clumps()","reek::methodgroup#clumps_containing()","reek::methodgroup#collect_clumps_in()","reek::source::sexpextensions::casenode#condition()","reek::source::sexpextensions::ifnode#condition()","reek::smells::repeatedconditional#conditional_counts()","reek::core::stopcontext#config()","reek::source::codecomment#config()","reek::smells::smelldetector#config_for()","reek::core::smellrepository#configure()","reek::core::sniffer#configure()","reek::source::configfile#configure()","reek::source::sourcecode#configure()","reek::source::sourcefile#configure()","reek::smells::smelldetector#configure_with()","reek::smellwarning#contains_all?()","reek::smellwarning#context()","reek::smells::dataclump::contexts()","reek::smells::smelldetector::contexts()","reek::core::codeparser#count_clause()","reek::core::codeparser::count_statements()","reek::core::methodcontext#count_statements()","reek::core::stopcontext#count_statements()","reek::cli::reekcommand::create()","reek::cli::yamlcommand::create()","hash#deep_copy()","reek::source::sexpnode#deep_copy()","reek::core::methodparameters#default_assignments()","reek::smells::attribute::default_config()","reek::smells::dataclump::default_config()","reek::smells::duplicatemethodcall::default_config()","reek::smells::excludeinitialize::default_config()","reek::smells::longparameterlist::default_config()","reek::smells::longyieldlist::default_config()","reek::smells::nestediterators::default_config()","reek::smells::repeatedconditional::default_config()","reek::smells::smelldetector::default_config()","reek::smells::toomanyinstancevariables::default_config()","reek::smells::toomanymethods::default_config()","reek::smells::toomanystatements::default_config()","reek::smells::uncommunicativemethodname::default_config()","reek::smells::uncommunicativemodulename::default_config()","reek::smells::uncommunicativeparametername::default_config()","reek::smells::uncommunicativevariablename::default_config()","reek::smells::utilityfunction::default_config()","reek::candidatemethod#delete()","reek::methodgroup#delete_infrequent_parameters()","reek::methodgroup#delete_small_methods()","reek::source::treedresser#dress()","reek::source::sourcerepository#each()","reek::core::codecontext#each_node()","reek::source::sexpnode#each_node()","reek::core::smellconfiguration#enabled?()","reek::smells::smelldetector#enabled?()","reek::core::methodcontext#envious_receivers()","reek::core::singletonmethodcontext#envious_receivers()","reek::smells::nilcheck::callnodefinder#eq_nil_use?()","reek::smellwarning#eql?()","reek::source::sourcecode::err_io=()","reek::core::smellrepository#examine()","reek::core::sniffer#examine()","reek::smells::smelldetector#examine()","reek::smells::attribute#examine_context()","reek::smells::booleanparameter#examine_context()","reek::smells::classvariable#examine_context()","reek::smells::controlparameter#examine_context()","reek::smells::dataclump#examine_context()","reek::smells::duplicatemethodcall#examine_context()","reek::smells::featureenvy#examine_context()","reek::smells::irresponsiblemodule#examine_context()","reek::smells::longparameterlist#examine_context()","reek::smells::longyieldlist#examine_context()","reek::smells::nestediterators#examine_context()","reek::smells::nilcheck#examine_context()","reek::smells::repeatedconditional#examine_context()","reek::smells::toomanyinstancevariables#examine_context()","reek::smells::toomanymethods#examine_context()","reek::smells::toomanystatements#examine_context()","reek::smells::uncommunicativemethodname#examine_context()","reek::smells::uncommunicativemodulename#examine_context()","reek::smells::uncommunicativeparametername#examine_context()","reek::smells::uncommunicativevariablename#examine_context()","reek::smells::unusedparameters#examine_context()","reek::smells::utilityfunction#examine_context()","reek::smells::smelldetector#exception?()","reek::cli::application#execute()","reek::cli::helpcommand#execute()","reek::cli::reekcommand#execute()","reek::cli::versioncommand#execute()","reek::cli::yamlcommand#execute()","reek::source::treedresser#extensions_for()","reek::smells::uncommunicativevariablename#find_assignment_variable_names()","reek::smells::uncommunicativevariablename#find_block_argument_variable_names()","reek::source::configfile#find_class()","reek::core::overrides#for_context()","reek::cli::simplewarningformatter::format()","reek::cli::singlelinewarningformatter::format()","reek::cli::warningformatterwithlinenumbers::format()","reek::source::sexpformatter::format()","reek::source::sexpnode::format()","reek::cli::reportformatter::format_list()","reek::source::sexpnode#format_ruby()","reek::core::warningcollector#found_smell()","reek::core::codecontext#full_name()","reek::core::stopcontext#full_name()","reek::source::sexpextensions::defnnode#full_name()","reek::source::sexpextensions::defsnode#full_name()","reek::source::sexpextensions::modulenode#full_name()","reek::cli::options#get_sources()","reek::source::sexpnode#has_type?()","reek::smellwarning#hash()","reek::source::sexpnode#hash()","reek::cli::reportformatter::header()","reek::smells::nilcheck::callnodefinder#include_eq?()","reek::smellwarning#is_active()","reek::smells::uncommunicativeparametername#is_bad_name?()","reek::smells::uncommunicativevariablename#is_bad_name?()","reek::source::codecomment#is_descriptive?()","reek::source::sexpnode#is_language_node?()","reek::candidatemethod#line()","reek::smellwarning#lines()","reek::source::configfile#load()","reek::core::codecontext#local_config()","reek::core::codecontext#local_nodes()","reek::source::sexpnode#look_for()","reek::core::codecontext#matches?()","reek::smellwarning#matches?()","reek::core::smellconfiguration#merge!()","reek::smellwarning#message()","reek::core::codecontext#method_missing()","reek::core::stopcontext#method_missing()","reek::source::sexpextensions::callnode#method_name()","reek::candidatemethod#name()","reek::core::codecontext#name()","reek::source::sexpextensions::cvarnode#name()","reek::source::sexpextensions::cvarnode#name()","reek::source::sexpextensions::cvarnode#name()","reek::source::sexpextensions::defnnode#name()","reek::source::sexpextensions::defsnode#name()","reek::source::sexpextensions::modulenode#name()","reek::candidatemethod::new()","reek::cli::application::new()","reek::cli::helpcommand::new()","reek::cli::options::new()","reek::cli::reekcommand::new()","reek::cli::verbosereport::new()","reek::cli::versioncommand::new()","reek::cli::yamlcommand::new()","reek::core::codecontext::new()","reek::core::codeparser::new()","reek::core::methodcontext::new()","reek::core::modulecontext::new()","reek::core::overrides::new()","reek::core::singletonmethodcontext::new()","reek::core::smellconfiguration::new()","reek::core::smellrepository::new()","reek::core::sniffer::new()","reek::core::stopcontext::new()","reek::core::warningcollector::new()","reek::examiner::new()","reek::methodgroup::new()","reek::rake::task::new()","reek::smellwarning::new()","reek::smells::nilcheck::callnodefinder::new()","reek::smells::nilcheck::casenodefinder::new()","reek::smells::nilcheck::nodefinder::new()","reek::smells::smelldetector::new()","reek::source::codecomment::new()","reek::source::configfile::new()","reek::source::referencecollector::new()","reek::source::sourcecode::new()","reek::source::sourcefile::new()","reek::source::sourcelocator::new()","reek::source::sourcerepository::new()","reek::smells::nilcheck::callnodefinder#nilq_use?()","reek::smells::nilcheck::callnodefinder#nil_chk?()","reek::smells::nilcheck::casenodefinder#nil_chk?()","reek::examiner#num_active_smells()","reek::examiner#num_masked_smells()","reek::core::codecontext#num_methods()","reek::source::referencecollector#num_refs_to_self()","reek::cli::application#output()","reek::cli::application#output_smells_total()","reek::core::smellconfiguration#overrides_for()","reek::source::sexpextensions::iternode#parameter_names()","reek::source::sexpextensions::methodnode#parameter_names()","reek::source::sexpextensions::iternode#parameters()","reek::cli::options#parse()","reek::source::sourcerepository::parse()","reek::smells::dataclump::print_clump()","reek::source::configfile#problem()","reek::core::codeparser#process()","reek::core::codeparser#process_args()","reek::core::codeparser#process_attrasgn()","reek::core::codeparser#process_block()","reek::core::codeparser#process_call()","reek::core::codeparser#process_case()","reek::core::codeparser#process_class()","reek::core::codeparser#process_default()","reek::core::codeparser#process_defn()","reek::core::codeparser#process_defs()","reek::core::codeparser#process_for()","reek::core::codeparser#process_iasgn()","reek::core::codeparser#process_if()","reek::core::codeparser#process_ivar()","reek::core::codeparser#process_module()","reek::core::codeparser#process_op_asgn1()","reek::core::codeparser#process_resbody()","reek::core::codeparser#process_rescue()","reek::core::codeparser#process_self()","reek::core::codeparser#process_until()","reek::core::codeparser#process_when()","reek::core::codeparser#process_while()","reek::core::codeparser#process_zsuper()","hash#push_keys()","reek::source::sexpextensions::callnode#receiver()","reek::source::sexpextensions::defsnode#receiver()","reek::core::methodcontext#record_call_to()","reek::core::methodcontext#record_use_of_self()","reek::smells::uncommunicativevariablename#record_variable_name()","reek::smells::uncommunicativevariablename#recursively_record_variable_names()","reek::spec#reek()","reek::spec#reek_of()","reek::spec#reek_only_of()","reek::smells::smelldetector#register()","reek::cli::quietreport#report()","reek::cli::verbosereport#report()","reek::core::smellrepository#report_on()","reek::core::sniffer#report_on()","reek::smellwarning#report_on()","reek::smells::smelldetector#report_on()","reek::cli::application#report_smells()","reek::cli::application#report_success()","reek::cli::options#set_options()","reek::source::sexpextensions::modulenode#simple_name()","reek::smellwarning#smell_class()","reek::core::smellrepository::smell_classes()","reek::examiner#smells()","reek::examiner#smells_count()","reek::smells::nilcheck::callnodefinder#smelly()","reek::smells::nilcheck::casenodefinder#smelly()","reek::examiner#smelly?()","reek::smellwarning#sort_key()","reek::smellwarning#source()","reek::smellwarning#subclass()","reek::source::sexpextensions::classnode#superclass()","reek::source::sourcecode#syntax_tree()","reek::source::sexpextensions::modulenode#text_name()","file#to_reek_source()","io#to_reek_source()","string#to_reek_source()","reek::core::smellconfiguration#value()","reek::smells::smelldetector#value()","reek::source::sexpextensions::litnode#value()","reek::smells::uncommunicativevariablename#variable_names()","reek::core::warningcollector#warnings()","",""],"info":[["File","","File.html","","<p>Extensions to <code>File</code> needed by Reek.\n"],["Hash","","Hash.html","","<p>Extensions to <code>Hash</code> needed by Reek.\n"],["IO","","IO.html","","<p>Extensions to <code>IO</code> needed by Reek.\n"],["Object","","Object.html","",""],["Reek","","Reek.html","","<p>SMELL: Duplication – all these should be found automagically\n"],["Reek::CandidateMethod","","Reek/CandidateMethod.html","","<p>A method definition and a copy of its parameters @private\n"],["Reek::Cli","","Reek/Cli.html","",""],["Reek::Cli::Application","","Reek/Cli/Application.html","","<p>Represents an instance of a Reek application. This is the entry point for\nall invocations of Reek from …\n"],["Reek::Cli::HelpCommand","","Reek/Cli/HelpCommand.html","","<p>A command to display usage information for this application.\n"],["Reek::Cli::Options","","Reek/Cli/Options.html","","<p>Parses the command line\n"],["Reek::Cli::QuietReport","","Reek/Cli/QuietReport.html","","<p>A report that lists a section for each source that has smells.\n"],["Reek::Cli::ReekCommand","","Reek/Cli/ReekCommand.html","","<p>A command to collect smells from a set of sources and write them out in\ntext report format.\n"],["Reek::Cli::ReportFormatter","","Reek/Cli/ReportFormatter.html","",""],["Reek::Cli::SimpleWarningFormatter","","Reek/Cli/SimpleWarningFormatter.html","",""],["Reek::Cli::SingleLineWarningFormatter","","Reek/Cli/SingleLineWarningFormatter.html","",""],["Reek::Cli::VerboseReport","","Reek/Cli/VerboseReport.html","","<p>A report that lists every source, including those that have no smells.\n"],["Reek::Cli::VersionCommand","","Reek/Cli/VersionCommand.html","","<p>A command to report the application’s current version number.\n"],["Reek::Cli::WarningFormatterWithLineNumbers","","Reek/Cli/WarningFormatterWithLineNumbers.html","",""],["Reek::Cli::YamlCommand","","Reek/Cli/YamlCommand.html","","<p>A command to collect smells from a set of sources and write them out in\nYAML format.\n"],["Reek::Core","","Reek/Core.html","",""],["Reek::Core::CodeContext","","Reek/Core/CodeContext.html","","<p>Superclass for all types of source code context. Each instance represents a\ncode element of some kind, …\n"],["Reek::Core::CodeParser","","Reek/Core/CodeParser.html","","<p>Traverses a Sexp abstract syntax tree and fires events whenever it\nencounters specific node types.\n"],["Reek::Core::MethodContext","","Reek/Core/MethodContext.html","","<p>A context wrapper for any method definition found in a syntax tree.\n"],["Reek::Core::MethodParameters","","Reek/Core/MethodParameters.html","","<p>The parameters in a method’s definition.\n"],["Reek::Core::ModuleContext","","Reek/Core/ModuleContext.html","","<p>A context wrapper for any module found in a syntax tree.\n"],["Reek::Core::Overrides","","Reek/Core/Overrides.html","","<p>A set of context-specific overrides for smell detectors.\n"],["Reek::Core::SingletonMethodContext","","Reek/Core/SingletonMethodContext.html","","<p>A context wrapper for any singleton method definition found in a syntax\ntree.\n"],["Reek::Core::SmellConfiguration","","Reek/Core/SmellConfiguration.html","","<p>Represents a single set of configuration options for a smell detector\n"],["Reek::Core::SmellRepository","","Reek/Core/SmellRepository.html","",""],["Reek::Core::Sniffer","","Reek/Core/Sniffer.html","","<p>Configures all available smell detectors and applies them to a source.\n"],["Reek::Core::StopContext","","Reek/Core/StopContext.html","","<p>A context wrapper representing the root of an abstract syntax tree.\n"],["Reek::Core::WarningCollector","","Reek/Core/WarningCollector.html","","<p>Collects and sorts smells warnings.\n"],["Reek::Examiner","","Reek/Examiner.html","","<p>Finds the active code smells in Ruby source code.\n"],["Reek::MethodGroup","","Reek/MethodGroup.html","","<p>Represents a group of methods @private\n"],["Reek::Rake","","Reek/Rake.html","","<p>Defines a task library for running reek. (Classes here will be configured\nvia the Rakefile, and therefore …\n"],["Reek::Rake::Task","","Reek/Rake/Task.html","","<p>A Rake task that runs reek on a set of source files.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'reek/rake/task'</span>\n\n<span class=\"ruby-constant\">Reek</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Rake</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Task</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Reek::SmellWarning","","Reek/SmellWarning.html","","<p>Reports a warning that a smell has been found. This object is essentially a\nDTO, and therefore contains …\n"],["Reek::Smells","","Reek/Smells.html","","<p>This module contains the various smell detectors.\n"],["Reek::Smells::Attribute","","Reek/Smells/Attribute.html","","<p>A class that publishes a getter or setter for an instance variable invites\nclient classes to become too …\n"],["Reek::Smells::BooleanParameter","","Reek/Smells/BooleanParameter.html","","<p>A Boolean parameter effectively permits a method’s caller to decide which\nexecution path to take. The …\n"],["Reek::Smells::ClassVariable","","Reek/Smells/ClassVariable.html","","<p>Class variables form part of the global runtime state, and as such make it\neasy for one part of the system …\n"],["Reek::Smells::ControlParameter","","Reek/Smells/ControlParameter.html","","<p>Control Coupling occurs when a method or block checks the value of a\nparameter in order to decide which …\n"],["Reek::Smells::DataClump","","Reek/Smells/DataClump.html","","<p>A Data Clump occurs when the same two or three items frequently appear\ntogether in classes and parameter …\n"],["Reek::Smells::DuplicateMethodCall","","Reek/Smells/DuplicateMethodCall.html","","<p>Duplication occurs when two fragments of code look nearly identical, or\nwhen two fragments of code have …\n"],["Reek::Smells::ExcludeInitialize","","Reek/Smells/ExcludeInitialize.html","",""],["Reek::Smells::FeatureEnvy","","Reek/Smells/FeatureEnvy.html","","<p>Feature Envy occurs when a code fragment references another object more\noften than it references itself, …\n"],["Reek::Smells::IrresponsibleModule","","Reek/Smells/IrresponsibleModule.html","","<p>It is considered good practice to annotate every class and module with a\nbrief comment outlining its …\n"],["Reek::Smells::LongParameterList","","Reek/Smells/LongParameterList.html","","<p>A Long Parameter List occurs when a method has more than one or two\nparameters, or when a method yields …\n"],["Reek::Smells::LongYieldList","","Reek/Smells/LongYieldList.html","","<p>A variant on LongParameterList that checks the number of items passed to a\nblock by a <code>yield</code> call.\n"],["Reek::Smells::NestedIterators","","Reek/Smells/NestedIterators.html","","<p>A Nested Iterator occurs when a block contains another block.\n<p><code>NestedIterators</code> reports failing methods ...\n"],["Reek::Smells::NilCheck","","Reek/Smells/NilCheck.html","","<p>Checking for nil is a special kind of type check, and therefore a case of\nSimulatedPolymorphism.\n"],["Reek::Smells::NilCheck::CallNodeFinder","","Reek/Smells/NilCheck/CallNodeFinder.html","",""],["Reek::Smells::NilCheck::CaseNodeFinder","","Reek/Smells/NilCheck/CaseNodeFinder.html","",""],["Reek::Smells::NilCheck::NodeFinder","","Reek/Smells/NilCheck/NodeFinder.html","",""],["Reek::Smells::RepeatedConditional","","Reek/Smells/RepeatedConditional.html","","<p>Simulated Polymorphism occurs when\n<p>code uses a case statement (especially on a type field);\n<p>or code has …\n"],["Reek::Smells::SmellDetector","","Reek/Smells/SmellDetector.html","","<p>Shared responsibilities of all smell detectors.\n"],["Reek::Smells::TooManyInstanceVariables","","Reek/Smells/TooManyInstanceVariables.html","","<p>A Large Class is a class or module that has a large number of instance\nvariables, methods or lines of …\n"],["Reek::Smells::TooManyMethods","","Reek/Smells/TooManyMethods.html","","<p>A Large Class is a class or module that has a large number of instance\nvariables, methods or lines of …\n"],["Reek::Smells::TooManyStatements","","Reek/Smells/TooManyStatements.html","","<p>A Long Method is any method that has a large number of lines.\n<p><code>TooManyStatements</code> reports any method with ...\n"],["Reek::Smells::UncommunicativeMethodName","","Reek/Smells/UncommunicativeMethodName.html","","<p>An Uncommunicative Name is a name that doesn’t communicate its intent well\nenough.\n<p>Poor names make it …\n"],["Reek::Smells::UncommunicativeModuleName","","Reek/Smells/UncommunicativeModuleName.html","","<p>An Uncommunicative Name is a name that doesn’t communicate its intent well\nenough.\n<p>Poor names make it …\n"],["Reek::Smells::UncommunicativeParameterName","","Reek/Smells/UncommunicativeParameterName.html","","<p>An Uncommunicative Name is a name that doesn’t communicate its intent well\nenough.\n<p>Poor names make it …\n"],["Reek::Smells::UncommunicativeVariableName","","Reek/Smells/UncommunicativeVariableName.html","","<p>An Uncommunicative Name is a name that doesn’t communicate its intent well\nenough.\n<p>Poor names make it …\n"],["Reek::Smells::UnusedParameters","","Reek/Smells/UnusedParameters.html","","<p>Methods should use their parameters.\n"],["Reek::Smells::UtilityFunction","","Reek/Smells/UtilityFunction.html","","<p>A Utility Function is any instance method that has no dependency on the\nstate of the instance.\n<p>Currently …\n"],["Reek::Source","","Reek/Source.html","",""],["Reek::Source::CodeComment","","Reek/Source/CodeComment.html","","<p>A comment header from an abstract syntax tree; found directly above module,\nclass and method definitions. …\n"],["Reek::Source::ConfigFile","","Reek/Source/ConfigFile.html","","<p>A file called &lt;something&gt;.reek containing configuration settings for\nany or all of the smell detectors. …\n"],["Reek::Source::ReferenceCollector","","Reek/Source/ReferenceCollector.html","","<p>Locates references to the current object within a portion of an abstract\nsyntax tree.\n"],["Reek::Source::SexpExtensions","","Reek/Source/SexpExtensions.html","",""],["Reek::Source::SexpExtensions::AttrasgnNode","","Reek/Source/SexpExtensions/AttrasgnNode.html","",""],["Reek::Source::SexpExtensions::CallNode","","Reek/Source/SexpExtensions/CallNode.html","",""],["Reek::Source::SexpExtensions::CaseNode","","Reek/Source/SexpExtensions/CaseNode.html","",""],["Reek::Source::SexpExtensions::ClassNode","","Reek/Source/SexpExtensions/ClassNode.html","",""],["Reek::Source::SexpExtensions::CvarNode","","Reek/Source/SexpExtensions/CvarNode.html","",""],["Reek::Source::SexpExtensions::CvasgnNode","","Reek/Source/SexpExtensions/CvarNode.html","",""],["Reek::Source::SexpExtensions::CvdeclNode","","Reek/Source/SexpExtensions/CvarNode.html","",""],["Reek::Source::SexpExtensions::DefnNode","","Reek/Source/SexpExtensions/DefnNode.html","",""],["Reek::Source::SexpExtensions::DefsNode","","Reek/Source/SexpExtensions/DefsNode.html","",""],["Reek::Source::SexpExtensions::IfNode","","Reek/Source/SexpExtensions/IfNode.html","",""],["Reek::Source::SexpExtensions::IterNode","","Reek/Source/SexpExtensions/IterNode.html","",""],["Reek::Source::SexpExtensions::LitNode","","Reek/Source/SexpExtensions/LitNode.html","",""],["Reek::Source::SexpExtensions::MethodNode","","Reek/Source/SexpExtensions/MethodNode.html","",""],["Reek::Source::SexpExtensions::ModuleNode","","Reek/Source/SexpExtensions/ModuleNode.html","",""],["Reek::Source::SexpExtensions::YieldNode","","Reek/Source/SexpExtensions/YieldNode.html","",""],["Reek::Source::SexpFormatter","","Reek/Source/SexpFormatter.html","","<p>Formats snippets of syntax tree back into Ruby source code.\n"],["Reek::Source::SexpNode","","Reek/Source/SexpNode.html","","<p>Extensions to <code>Sexp</code> to allow <code>CodeParser</code> to\nnavigate the abstract syntax tree more easily.\n"],["Reek::Source::SourceCode","","Reek/Source/SourceCode.html","","<p>A <code>Source</code> object represents a chunk of Ruby source code.\n"],["Reek::Source::SourceFile","","Reek/Source/SourceFile.html","","<p>Represents a file of Ruby source, whose contents will be examined for code\nsmells.\n"],["Reek::Source::SourceLocator","","Reek/Source/SourceLocator.html","","<p>Finds Ruby source files in a filesystem.\n"],["Reek::Source::SourceRepository","","Reek/Source/SourceRepository.html","",""],["Reek::Source::TreeDresser","","Reek/Source/TreeDresser.html","","<p>Adorns an abstract syntax tree with mix-in modules to make accessing the\ntree more understandable and …\n"],["Reek::Spec","","Reek/Spec.html","","<p>Provides matchers for Rspec, making it easy to check code quality.\n<p>If you require this module somewhere …\n"],["String","","String.html","","<p>Extensions to <code>String</code> needed by Reek.\n"],["<=>","Reek::SmellWarning","Reek/SmellWarning.html#method-i-3C-3D-3E","(other)",""],["add_to_config","Reek::Source::CodeComment","Reek/Source/CodeComment.html#method-i-add_to_config","(smell, options)",""],["adopt","Hash","Hash.html#method-i-adopt","(other)",""],["adopt!","Hash","Hash.html#method-i-adopt-21","(other)",""],["all_active_smells","Reek::Examiner","Reek/Examiner.html#method-i-all_active_smells","()","<p>Returns an Array of SmellWarning objects, one for each non-masked smell in\nthe source.\n<p>@deprecated Use …\n"],["all_smells","Reek::Examiner","Reek/Examiner.html#method-i-all_smells","()","<p>Returns an Array of SmellWarning objects, one for each smell in the source;\nincludes active smells and …\n"],["all_sources","Reek::Source::SourceLocator","Reek/Source/SourceLocator.html#method-i-all_sources","()",""],["arg_names","Reek::CandidateMethod","Reek/CandidateMethod.html#method-i-arg_names","()",""],["arg_names","Reek::Source::SexpExtensions::CallNode","Reek/Source/SexpExtensions/CallNode.html#method-i-arg_names","()",""],["arg_names","Reek::Source::SexpExtensions::MethodNode","Reek/Source/SexpExtensions/MethodNode.html#method-i-arg_names","()",""],["arg_names","Reek::Source::SexpExtensions::YieldNode","Reek/Source/SexpExtensions/YieldNode.html#method-i-arg_names","()",""],["args","Reek::Source::SexpExtensions::AttrasgnNode","Reek/Source/SexpExtensions/AttrasgnNode.html#method-i-args","()",""],["args","Reek::Source::SexpExtensions::CallNode","Reek/Source/SexpExtensions/CallNode.html#method-i-args","()",""],["args","Reek::Source::SexpExtensions::IterNode","Reek/Source/SexpExtensions/IterNode.html#method-i-args","()",""],["args","Reek::Source::SexpExtensions::YieldNode","Reek/Source/SexpExtensions/YieldNode.html#method-i-args","()",""],["argslist","Reek::Source::SexpExtensions::DefnNode","Reek/Source/SexpExtensions/DefnNode.html#method-i-argslist","()",""],["argslist","Reek::Source::SexpExtensions::DefsNode","Reek/Source/SexpExtensions/DefsNode.html#method-i-argslist","()",""],["banner","Reek::Cli::Options","Reek/Cli/Options.html#method-i-banner","()",""],["block","Reek::Source::SexpExtensions::IterNode","Reek/Source/SexpExtensions/IterNode.html#method-i-block","()",""],["body","Reek::Source::SexpExtensions::DefnNode","Reek/Source/SexpExtensions/DefnNode.html#method-i-body","()",""],["body","Reek::Source::SexpExtensions::DefsNode","Reek/Source/SexpExtensions/DefsNode.html#method-i-body","()",""],["call","Reek::Source::SexpExtensions::IterNode","Reek/Source/SexpExtensions/IterNode.html#method-i-call","()",""],["class_variables_in","Reek::Smells::ClassVariable","Reek/Smells/ClassVariable.html#method-i-class_variables_in","(ast)","<p>Collects the names of the class variables declared and/or used in the given\nmodule.\n"],["clumps","Reek::MethodGroup","Reek/MethodGroup.html#method-i-clumps","()",""],["clumps_containing","Reek::MethodGroup","Reek/MethodGroup.html#method-i-clumps_containing","(method, methods, results)",""],["collect_clumps_in","Reek::MethodGroup","Reek/MethodGroup.html#method-i-collect_clumps_in","(methods, results)",""],["condition","Reek::Source::SexpExtensions::CaseNode","Reek/Source/SexpExtensions/CaseNode.html#method-i-condition","()",""],["condition","Reek::Source::SexpExtensions::IfNode","Reek/Source/SexpExtensions/IfNode.html#method-i-condition","()",""],["conditional_counts","Reek::Smells::RepeatedConditional","Reek/Smells/RepeatedConditional.html#method-i-conditional_counts","(sexp)","<p>Returns a Hash listing all of the conditional expressions in the given\nsyntax tree together with the …\n"],["config","Reek::Core::StopContext","Reek/Core/StopContext.html#method-i-config","()",""],["config","Reek::Source::CodeComment","Reek/Source/CodeComment.html#method-i-config","()",""],["config_for","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-config_for","(ctx)",""],["configure","Reek::Core::SmellRepository","Reek/Core/SmellRepository.html#method-i-configure","(klass, config)",""],["configure","Reek::Core::Sniffer","Reek/Core/Sniffer.html#method-i-configure","(klass, config)",""],["configure","Reek::Source::ConfigFile","Reek/Source/ConfigFile.html#method-i-configure","(sniffer)","<p>Configure the given sniffer using the contents of the config file.\n"],["configure","Reek::Source::SourceCode","Reek/Source/SourceCode.html#method-i-configure","(sniffer)",""],["configure","Reek::Source::SourceFile","Reek/Source/SourceFile.html#method-i-configure","(sniffer)",""],["configure_with","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-configure_with","(config)",""],["contains_all?","Reek::SmellWarning","Reek/SmellWarning.html#method-i-contains_all-3F","(patterns)",""],["context","Reek::SmellWarning","Reek/SmellWarning.html#method-i-context","()",""],["contexts","Reek::Smells::DataClump","Reek/Smells/DataClump.html#method-c-contexts","()","<p>@private\n"],["contexts","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-c-contexts","()",""],["count_clause","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-count_clause","(sexp)",""],["count_statements","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-c-count_statements","(stmts)",""],["count_statements","Reek::Core::MethodContext","Reek/Core/MethodContext.html#method-i-count_statements","(num)",""],["count_statements","Reek::Core::StopContext","Reek/Core/StopContext.html#method-i-count_statements","(num)",""],["create","Reek::Cli::ReekCommand","Reek/Cli/ReekCommand.html#method-c-create","(sources, reporter, config_files = [])",""],["create","Reek::Cli::YamlCommand","Reek/Cli/YamlCommand.html#method-c-create","(sources, config_files)",""],["deep_copy","Hash","Hash.html#method-i-deep_copy","()",""],["deep_copy","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-deep_copy","()",""],["default_assignments","Reek::Core::MethodParameters","Reek/Core/MethodParameters.html#method-i-default_assignments","()",""],["default_config","Reek::Smells::Attribute","Reek/Smells/Attribute.html#method-c-default_config","()",""],["default_config","Reek::Smells::DataClump","Reek/Smells/DataClump.html#method-c-default_config","()",""],["default_config","Reek::Smells::DuplicateMethodCall","Reek/Smells/DuplicateMethodCall.html#method-c-default_config","()",""],["default_config","Reek::Smells::ExcludeInitialize","Reek/Smells/ExcludeInitialize.html#method-c-default_config","()",""],["default_config","Reek::Smells::LongParameterList","Reek/Smells/LongParameterList.html#method-c-default_config","()",""],["default_config","Reek::Smells::LongYieldList","Reek/Smells/LongYieldList.html#method-c-default_config","()",""],["default_config","Reek::Smells::NestedIterators","Reek/Smells/NestedIterators.html#method-c-default_config","()",""],["default_config","Reek::Smells::RepeatedConditional","Reek/Smells/RepeatedConditional.html#method-c-default_config","()",""],["default_config","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-c-default_config","()",""],["default_config","Reek::Smells::TooManyInstanceVariables","Reek/Smells/TooManyInstanceVariables.html#method-c-default_config","()",""],["default_config","Reek::Smells::TooManyMethods","Reek/Smells/TooManyMethods.html#method-c-default_config","()",""],["default_config","Reek::Smells::TooManyStatements","Reek/Smells/TooManyStatements.html#method-c-default_config","()",""],["default_config","Reek::Smells::UncommunicativeMethodName","Reek/Smells/UncommunicativeMethodName.html#method-c-default_config","()",""],["default_config","Reek::Smells::UncommunicativeModuleName","Reek/Smells/UncommunicativeModuleName.html#method-c-default_config","()",""],["default_config","Reek::Smells::UncommunicativeParameterName","Reek/Smells/UncommunicativeParameterName.html#method-c-default_config","()",""],["default_config","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-c-default_config","()",""],["default_config","Reek::Smells::UtilityFunction","Reek/Smells/UtilityFunction.html#method-c-default_config","()",""],["delete","Reek::CandidateMethod","Reek/CandidateMethod.html#method-i-delete","(param)",""],["delete_infrequent_parameters","Reek::MethodGroup","Reek/MethodGroup.html#method-i-delete_infrequent_parameters","()",""],["delete_small_methods","Reek::MethodGroup","Reek/MethodGroup.html#method-i-delete_small_methods","()",""],["dress","Reek::Source::TreeDresser","Reek/Source/TreeDresser.html#method-i-dress","(sexp)",""],["each","Reek::Source::SourceRepository","Reek/Source/SourceRepository.html#method-i-each","(&block)",""],["each_node","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-each_node","(type, ignoring, &blk)",""],["each_node","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-each_node","(type, ignoring, &blk)",""],["enabled?","Reek::Core::SmellConfiguration","Reek/Core/SmellConfiguration.html#method-i-enabled-3F","()","<p>Is this smell detector active?\n"],["enabled?","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-enabled-3F","()","<p>SMELL: Getter (only used in 1 test)\n"],["envious_receivers","Reek::Core::MethodContext","Reek/Core/MethodContext.html#method-i-envious_receivers","()",""],["envious_receivers","Reek::Core::SingletonMethodContext","Reek/Core/SingletonMethodContext.html#method-i-envious_receivers","()",""],["eq_nil_use?","Reek::Smells::NilCheck::CallNodeFinder","Reek/Smells/NilCheck/CallNodeFinder.html#method-i-eq_nil_use-3F","(call)",""],["eql?","Reek::SmellWarning","Reek/SmellWarning.html#method-i-eql-3F","(other)",""],["err_io=","Reek::Source::SourceCode","Reek/Source/SourceCode.html#method-c-err_io-3D","(io)",""],["examine","Reek::Core::SmellRepository","Reek/Core/SmellRepository.html#method-i-examine","(scope, node_type)",""],["examine","Reek::Core::Sniffer","Reek/Core/Sniffer.html#method-i-examine","(scope, node_type)",""],["examine","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-examine","(context)",""],["examine_context","Reek::Smells::Attribute","Reek/Smells/Attribute.html#method-i-examine_context","(ctx)","<p>Checks whether the given class declares any attributes.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::BooleanParameter","Reek/Smells/BooleanParameter.html#method-i-examine_context","(method_ctx)","<p>Checks whether the given method has any Boolean parameters.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::ClassVariable","Reek/Smells/ClassVariable.html#method-i-examine_context","(ctx)","<p>Checks whether the given class or module declares any class variables.\n<p>@return [Array&lt;SmellWarning&gt;] …\n"],["examine_context","Reek::Smells::ControlParameter","Reek/Smells/ControlParameter.html#method-i-examine_context","(ctx)","<p>Checks whether the given method chooses its execution path by testing the\nvalue of one of its parameters. …\n"],["examine_context","Reek::Smells::DataClump","Reek/Smells/DataClump.html#method-i-examine_context","(ctx)","<p>Checks the given class or module for multiple identical parameter sets.\n<p>@return [Array&lt;SmellWarning&gt;] …\n"],["examine_context","Reek::Smells::DuplicateMethodCall","Reek/Smells/DuplicateMethodCall.html#method-i-examine_context","(ctx)","<p>Looks for duplicate calls within the body of the method <code>ctx</code>.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::FeatureEnvy","Reek/Smells/FeatureEnvy.html#method-i-examine_context","(method_ctx)","<p>Checks whether the given <code>context</code> includes any code fragment\nthat might “belong” on another …\n"],["examine_context","Reek::Smells::IrresponsibleModule","Reek/Smells/IrresponsibleModule.html#method-i-examine_context","(ctx)","<p>Checks the given class or module for a descriptive comment.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::LongParameterList","Reek/Smells/LongParameterList.html#method-i-examine_context","(ctx)","<p>Checks the number of parameters in the given method.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::LongYieldList","Reek/Smells/LongYieldList.html#method-i-examine_context","(method_ctx)","<p>Checks the number of parameters in the given scope.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::NestedIterators","Reek/Smells/NestedIterators.html#method-i-examine_context","(ctx)","<p>Checks whether the given <code>block</code> is inside another.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::NilCheck","Reek/Smells/NilCheck.html#method-i-examine_context","(ctx)",""],["examine_context","Reek::Smells::RepeatedConditional","Reek/Smells/RepeatedConditional.html#method-i-examine_context","(ctx)","<p>Checks the given class for multiple identical conditional tests.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::TooManyInstanceVariables","Reek/Smells/TooManyInstanceVariables.html#method-i-examine_context","(ctx)","<p>Checks <code>klass</code> for too many instance variables.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::TooManyMethods","Reek/Smells/TooManyMethods.html#method-i-examine_context","(ctx)","<p>Checks <code>ctx</code> for too many methods\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::TooManyStatements","Reek/Smells/TooManyStatements.html#method-i-examine_context","(ctx)","<p>Checks the length of the given <code>method</code>.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::UncommunicativeMethodName","Reek/Smells/UncommunicativeMethodName.html#method-i-examine_context","(ctx)","<p>Checks the given <code>context</code> for uncommunicative names.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::UncommunicativeModuleName","Reek/Smells/UncommunicativeModuleName.html#method-i-examine_context","(ctx)","<p>Checks the given <code>context</code> for uncommunicative names.\n<p>@return [Array&lt;SmellWarning&gt;]\n<p>:reek: Duplication …\n"],["examine_context","Reek::Smells::UncommunicativeParameterName","Reek/Smells/UncommunicativeParameterName.html#method-i-examine_context","(ctx)","<p>Checks the given <code>context</code> for uncommunicative names.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-examine_context","(ctx)","<p>Checks the given <code>context</code> for uncommunicative names.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::UnusedParameters","Reek/Smells/UnusedParameters.html#method-i-examine_context","(method_ctx)","<p>Checks whether the given method has any unused parameters.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["examine_context","Reek::Smells::UtilityFunction","Reek/Smells/UtilityFunction.html#method-i-examine_context","(method_ctx)","<p>Checks whether the given <code>method</code> is a utility function.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["exception?","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-exception-3F","(context)",""],["execute","Reek::Cli::Application","Reek/Cli/Application.html#method-i-execute","()",""],["execute","Reek::Cli::HelpCommand","Reek/Cli/HelpCommand.html#method-i-execute","(view)",""],["execute","Reek::Cli::ReekCommand","Reek/Cli/ReekCommand.html#method-i-execute","(view)",""],["execute","Reek::Cli::VersionCommand","Reek/Cli/VersionCommand.html#method-i-execute","(view)",""],["execute","Reek::Cli::YamlCommand","Reek/Cli/YamlCommand.html#method-i-execute","(view)",""],["extensions_for","Reek::Source::TreeDresser","Reek/Source/TreeDresser.html#method-i-extensions_for","(node_type)",""],["find_assignment_variable_names","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-find_assignment_variable_names","(exp, accumulator)",""],["find_block_argument_variable_names","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-find_block_argument_variable_names","(exp, accumulator)",""],["find_class","Reek::Source::ConfigFile","Reek/Source/ConfigFile.html#method-i-find_class","(name)","<p>Find the class with this name if it exsits. If not, report the problem and\nreturn <code>nil</code>.\n"],["for_context","Reek::Core::Overrides","Reek/Core/Overrides.html#method-i-for_context","(context)","<p>Find any overrides that match the supplied context\n"],["format","Reek::Cli::SimpleWarningFormatter","Reek/Cli/SimpleWarningFormatter.html#method-c-format","(warning)",""],["format","Reek::Cli::SingleLineWarningFormatter","Reek/Cli/SingleLineWarningFormatter.html#method-c-format","(warning)",""],["format","Reek::Cli::WarningFormatterWithLineNumbers","Reek/Cli/WarningFormatterWithLineNumbers.html#method-c-format","(warning)",""],["format","Reek::Source::SexpFormatter","Reek/Source/SexpFormatter.html#method-c-format","(sexp)",""],["format","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-c-format","(expr)",""],["format_list","Reek::Cli::ReportFormatter","Reek/Cli/ReportFormatter.html#method-c-format_list","(warnings, formatter = SimpleWarningFormatter)",""],["format_ruby","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-format_ruby","()",""],["found_smell","Reek::Core::WarningCollector","Reek/Core/WarningCollector.html#method-i-found_smell","(warning)",""],["full_name","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-full_name","()",""],["full_name","Reek::Core::StopContext","Reek/Core/StopContext.html#method-i-full_name","()",""],["full_name","Reek::Source::SexpExtensions::DefnNode","Reek/Source/SexpExtensions/DefnNode.html#method-i-full_name","(outer)",""],["full_name","Reek::Source::SexpExtensions::DefsNode","Reek/Source/SexpExtensions/DefsNode.html#method-i-full_name","(outer)",""],["full_name","Reek::Source::SexpExtensions::ModuleNode","Reek/Source/SexpExtensions/ModuleNode.html#method-i-full_name","(outer)",""],["get_sources","Reek::Cli::Options","Reek/Cli/Options.html#method-i-get_sources","()",""],["has_type?","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-has_type-3F","(type)",""],["hash","Reek::SmellWarning","Reek/SmellWarning.html#method-i-hash","()",""],["hash","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-hash","()",""],["header","Reek::Cli::ReportFormatter","Reek/Cli/ReportFormatter.html#method-c-header","(examiner)",""],["include_eq?","Reek::Smells::NilCheck::CallNodeFinder","Reek/Smells/NilCheck/CallNodeFinder.html#method-i-include_eq-3F","(call)",""],["is_active","Reek::SmellWarning","Reek/SmellWarning.html#method-i-is_active","()",""],["is_bad_name?","Reek::Smells::UncommunicativeParameterName","Reek/Smells/UncommunicativeParameterName.html#method-i-is_bad_name-3F","(name, ctx)",""],["is_bad_name?","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-is_bad_name-3F","(name, ctx)",""],["is_descriptive?","Reek::Source::CodeComment","Reek/Source/CodeComment.html#method-i-is_descriptive-3F","()",""],["is_language_node?","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-is_language_node-3F","()",""],["line","Reek::CandidateMethod","Reek/CandidateMethod.html#method-i-line","()",""],["lines","Reek::SmellWarning","Reek/SmellWarning.html#method-i-lines","()",""],["load","Reek::Source::ConfigFile","Reek/Source/ConfigFile.html#method-i-load","()","<p>Load the file path with which this was initialized, unless it is already\nknown to be a bad configuration …\n"],["local_config","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-local_config","()",""],["local_nodes","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-local_nodes","(type, &blk)",""],["look_for","Reek::Source::SexpNode","Reek/Source/SexpNode.html#method-i-look_for","(target_type, ignoring, &blk)","<p>Carries out a depth-first traversal of this syntax tree, yielding every\nSexp of type <code>target_type</code>. The …\n"],["matches?","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-matches-3F","(candidates)",""],["matches?","Reek::SmellWarning","Reek/SmellWarning.html#method-i-matches-3F","(klass, patterns)",""],["merge!","Reek::Core::SmellConfiguration","Reek/Core/SmellConfiguration.html#method-i-merge-21","(options)",""],["message","Reek::SmellWarning","Reek/SmellWarning.html#method-i-message","()",""],["method_missing","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-method_missing","(method, *args)","<p>Bounces messages up the context tree to the first enclosing context that\nknows how to deal with the request. …\n"],["method_missing","Reek::Core::StopContext","Reek/Core/StopContext.html#method-i-method_missing","(method, *args)",""],["method_name","Reek::Source::SexpExtensions::CallNode","Reek/Source/SexpExtensions/CallNode.html#method-i-method_name","()",""],["name","Reek::CandidateMethod","Reek/CandidateMethod.html#method-i-name","()",""],["name","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-name","()",""],["name","Reek::Source::SexpExtensions::CvarNode","Reek/Source/SexpExtensions/CvarNode.html#method-i-name","()",""],["name","Reek::Source::SexpExtensions::CvarNode","Reek/Source/SexpExtensions/CvarNode.html#method-i-name","()",""],["name","Reek::Source::SexpExtensions::CvarNode","Reek/Source/SexpExtensions/CvarNode.html#method-i-name","()",""],["name","Reek::Source::SexpExtensions::DefnNode","Reek/Source/SexpExtensions/DefnNode.html#method-i-name","()",""],["name","Reek::Source::SexpExtensions::DefsNode","Reek/Source/SexpExtensions/DefsNode.html#method-i-name","()",""],["name","Reek::Source::SexpExtensions::ModuleNode","Reek/Source/SexpExtensions/ModuleNode.html#method-i-name","()",""],["new","Reek::CandidateMethod","Reek/CandidateMethod.html#method-c-new","(defn_node)",""],["new","Reek::Cli::Application","Reek/Cli/Application.html#method-c-new","(argv)",""],["new","Reek::Cli::HelpCommand","Reek/Cli/HelpCommand.html#method-c-new","(parser)",""],["new","Reek::Cli::Options","Reek/Cli/Options.html#method-c-new","(argv)",""],["new","Reek::Cli::ReekCommand","Reek/Cli/ReekCommand.html#method-c-new","(reporter, sources, config_files = [])",""],["new","Reek::Cli::VerboseReport","Reek/Cli/VerboseReport.html#method-c-new","(warning_formatter = SimpleWarningFormatter, report_formatter = ReportFormatter)",""],["new","Reek::Cli::VersionCommand","Reek/Cli/VersionCommand.html#method-c-new","(progname)",""],["new","Reek::Cli::YamlCommand","Reek/Cli/YamlCommand.html#method-c-new","(examiners)",""],["new","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-c-new","(outer, exp)",""],["new","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-c-new","(sniffer, ctx = StopContext.new)",""],["new","Reek::Core::MethodContext","Reek/Core/MethodContext.html#method-c-new","(outer, exp)",""],["new","Reek::Core::ModuleContext","Reek/Core/ModuleContext.html#method-c-new","(outer, name, exp)",""],["new","Reek::Core::Overrides","Reek/Core/Overrides.html#method-c-new","(hash)",""],["new","Reek::Core::SingletonMethodContext","Reek/Core/SingletonMethodContext.html#method-c-new","(outer, exp)",""],["new","Reek::Core::SmellConfiguration","Reek/Core/SmellConfiguration.html#method-c-new","(hash)",""],["new","Reek::Core::SmellRepository","Reek/Core/SmellRepository.html#method-c-new","(source_description)",""],["new","Reek::Core::Sniffer","Reek/Core/Sniffer.html#method-c-new","(src, config_files = [], smell_repository=Core::SmellRepository.new(src.desc))",""],["new","Reek::Core::StopContext","Reek/Core/StopContext.html#method-c-new","()",""],["new","Reek::Core::WarningCollector","Reek/Core/WarningCollector.html#method-c-new","()",""],["new","Reek::Examiner","Reek/Examiner.html#method-c-new","(source, config_files = [])","<p>Creates an Examiner which scans the given <code>source</code> for code\nsmells.\n<p>The smells reported against any source …\n"],["new","Reek::MethodGroup","Reek/MethodGroup.html#method-c-new","(ctx, min_clump_size, max_copies)",""],["new","Reek::Rake::Task","Reek/Rake/Task.html#method-c-new","(name = :reek)","<p>Defines a new task, using the name <code>name</code>.\n"],["new","Reek::SmellWarning","Reek/SmellWarning.html#method-c-new","(class_name, context, lines, message, source = '', subclass_name = '', parameters = {})",""],["new","Reek::Smells::NilCheck::CallNodeFinder","Reek/Smells/NilCheck/CallNodeFinder.html#method-c-new","(ctx)",""],["new","Reek::Smells::NilCheck::CaseNodeFinder","Reek/Smells/NilCheck/CaseNodeFinder.html#method-c-new","(ctx)",""],["new","Reek::Smells::NilCheck::NodeFinder","Reek/Smells/NilCheck/NodeFinder.html#method-c-new","(ctx, type)",""],["new","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-c-new","(source, config = self.class.default_config)",""],["new","Reek::Source::CodeComment","Reek/Source/CodeComment.html#method-c-new","(text)",""],["new","Reek::Source::ConfigFile","Reek/Source/ConfigFile.html#method-c-new","(file_path)","<p>Load the YAML config file from the supplied <code>file_path</code>.\n"],["new","Reek::Source::ReferenceCollector","Reek/Source/ReferenceCollector.html#method-c-new","(ast)",""],["new","Reek::Source::SourceCode","Reek/Source/SourceCode.html#method-c-new","(code, desc, parser = RubyParser.new)",""],["new","Reek::Source::SourceFile","Reek/Source/SourceFile.html#method-c-new","(path)",""],["new","Reek::Source::SourceLocator","Reek/Source/SourceLocator.html#method-c-new","(paths)",""],["new","Reek::Source::SourceRepository","Reek/Source/SourceRepository.html#method-c-new","(description, sources)",""],["nilQ_use?","Reek::Smells::NilCheck::CallNodeFinder","Reek/Smells/NilCheck/CallNodeFinder.html#method-i-nilQ_use-3F","(call)",""],["nil_chk?","Reek::Smells::NilCheck::CallNodeFinder","Reek/Smells/NilCheck/CallNodeFinder.html#method-i-nil_chk-3F","(call)",""],["nil_chk?","Reek::Smells::NilCheck::CaseNodeFinder","Reek/Smells/NilCheck/CaseNodeFinder.html#method-i-nil_chk-3F","(when_node)",""],["num_active_smells","Reek::Examiner","Reek/Examiner.html#method-i-num_active_smells","()","<p>Returns the number of non-masked smells in the source.\n<p>@deprecated Use #smells instead.\n"],["num_masked_smells","Reek::Examiner","Reek/Examiner.html#method-i-num_masked_smells","()","<p>Returns the number of masked smells in the source.\n<p>@deprecated Masked smells are no longer reported; this …\n"],["num_methods","Reek::Core::CodeContext","Reek/Core/CodeContext.html#method-i-num_methods","()",""],["num_refs_to_self","Reek::Source::ReferenceCollector","Reek/Source/ReferenceCollector.html#method-i-num_refs_to_self","()",""],["output","Reek::Cli::Application","Reek/Cli/Application.html#method-i-output","(text)",""],["output_smells_total","Reek::Cli::Application","Reek/Cli/Application.html#method-i-output_smells_total","(total_smells_count)",""],["overrides_for","Reek::Core::SmellConfiguration","Reek/Core/SmellConfiguration.html#method-i-overrides_for","(context)",""],["parameter_names","Reek::Source::SexpExtensions::IterNode","Reek/Source/SexpExtensions/IterNode.html#method-i-parameter_names","()",""],["parameter_names","Reek::Source::SexpExtensions::MethodNode","Reek/Source/SexpExtensions/MethodNode.html#method-i-parameter_names","()",""],["parameters","Reek::Source::SexpExtensions::IterNode","Reek/Source/SexpExtensions/IterNode.html#method-i-parameters","()",""],["parse","Reek::Cli::Options","Reek/Cli/Options.html#method-i-parse","()",""],["parse","Reek::Source::SourceRepository","Reek/Source/SourceRepository.html#method-c-parse","(source)",""],["print_clump","Reek::Smells::DataClump","Reek/Smells/DataClump.html#method-c-print_clump","(clump)","<p>@private\n"],["problem","Reek::Source::ConfigFile","Reek/Source/ConfigFile.html#method-i-problem","(reason)","<p>Report invalid configuration file to standard Error.\n"],["process","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process","(exp)",""],["process_args","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_args","(exp)",""],["process_attrasgn","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_attrasgn","(exp)",""],["process_block","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_block","(exp)",""],["process_call","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_call","(exp)",""],["process_case","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_case","(exp)",""],["process_class","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_class","(exp)",""],["process_default","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_default","(exp)",""],["process_defn","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_defn","(exp)",""],["process_defs","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_defs","(exp)",""],["process_for","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_for","(exp)",""],["process_iasgn","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_iasgn","(exp)",""],["process_if","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_if","(exp)",""],["process_ivar","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_ivar","(exp)",""],["process_module","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_module","(exp)",""],["process_op_asgn1","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_op_asgn1","(exp)",""],["process_resbody","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_resbody","(exp)",""],["process_rescue","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_rescue","(exp)",""],["process_self","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_self","(exp)",""],["process_until","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_until","(exp)",""],["process_when","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_when","(exp)",""],["process_while","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_while","(exp)",""],["process_zsuper","Reek::Core::CodeParser","Reek/Core/CodeParser.html#method-i-process_zsuper","(exp)",""],["push_keys","Hash","Hash.html#method-i-push_keys","(hash)",""],["receiver","Reek::Source::SexpExtensions::CallNode","Reek/Source/SexpExtensions/CallNode.html#method-i-receiver","()",""],["receiver","Reek::Source::SexpExtensions::DefsNode","Reek/Source/SexpExtensions/DefsNode.html#method-i-receiver","()",""],["record_call_to","Reek::Core::MethodContext","Reek/Core/MethodContext.html#method-i-record_call_to","(exp)",""],["record_use_of_self","Reek::Core::MethodContext","Reek/Core/MethodContext.html#method-i-record_use_of_self","()",""],["record_variable_name","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-record_variable_name","(exp, symbol, accumulator)",""],["recursively_record_variable_names","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-recursively_record_variable_names","(accumulator, exp)",""],["reek","Reek::Spec","Reek/Spec.html#method-i-reek","()","<p>Returns <code>true</code> if and only if the target source code contains\nsmells.\n"],["reek_of","Reek::Spec","Reek/Spec.html#method-i-reek_of","(smell_class, *patterns)","<p>Checks the target source code for instances of <code>smell_class</code>,\nand returns <code>true</code> only if one of them has …\n"],["reek_only_of","Reek::Spec","Reek/Spec.html#method-i-reek_only_of","(smell_class, *patterns)","<p>As for reek_of, but the matched smell warning must be the only warning of\nany kind in the target source …\n"],["register","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-register","(hooks)",""],["report","Reek::Cli::QuietReport","Reek/Cli/QuietReport.html#method-i-report","(examiner)",""],["report","Reek::Cli::VerboseReport","Reek/Cli/VerboseReport.html#method-i-report","(examiner)",""],["report_on","Reek::Core::SmellRepository","Reek/Core/SmellRepository.html#method-i-report_on","(listener)",""],["report_on","Reek::Core::Sniffer","Reek/Core/Sniffer.html#method-i-report_on","(listener)",""],["report_on","Reek::SmellWarning","Reek/SmellWarning.html#method-i-report_on","(listener)",""],["report_on","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-report_on","(report)",""],["report_smells","Reek::Cli::Application","Reek/Cli/Application.html#method-i-report_smells","()",""],["report_success","Reek::Cli::Application","Reek/Cli/Application.html#method-i-report_success","()",""],["set_options","Reek::Cli::Options","Reek/Cli/Options.html#method-i-set_options","()",""],["simple_name","Reek::Source::SexpExtensions::ModuleNode","Reek/Source/SexpExtensions/ModuleNode.html#method-i-simple_name","()",""],["smell_class","Reek::SmellWarning","Reek/SmellWarning.html#method-i-smell_class","()",""],["smell_classes","Reek::Core::SmellRepository","Reek/Core/SmellRepository.html#method-c-smell_classes","()",""],["smells","Reek::Examiner","Reek/Examiner.html#method-i-smells","()","<p>List the smells found in the source.\n<p>@return [Array&lt;SmellWarning&gt;]\n"],["smells_count","Reek::Examiner","Reek/Examiner.html#method-i-smells_count","()","<p>Returns the number of smells found in the source\n"],["smelly","Reek::Smells::NilCheck::CallNodeFinder","Reek/Smells/NilCheck/CallNodeFinder.html#method-i-smelly","()",""],["smelly","Reek::Smells::NilCheck::CaseNodeFinder","Reek/Smells/NilCheck/CaseNodeFinder.html#method-i-smelly","()",""],["smelly?","Reek::Examiner","Reek/Examiner.html#method-i-smelly-3F","()","<p>True if and only if there are code smells in the source.\n"],["sort_key","Reek::SmellWarning","Reek/SmellWarning.html#method-i-sort_key","()",""],["source","Reek::SmellWarning","Reek/SmellWarning.html#method-i-source","()",""],["subclass","Reek::SmellWarning","Reek/SmellWarning.html#method-i-subclass","()",""],["superclass","Reek::Source::SexpExtensions::ClassNode","Reek/Source/SexpExtensions/ClassNode.html#method-i-superclass","()",""],["syntax_tree","Reek::Source::SourceCode","Reek/Source/SourceCode.html#method-i-syntax_tree","()",""],["text_name","Reek::Source::SexpExtensions::ModuleNode","Reek/Source/SexpExtensions/ModuleNode.html#method-i-text_name","()",""],["to_reek_source","File","File.html#method-i-to_reek_source","()","<p>Creates a new <code>Source</code> that assumes this File contains Ruby\nsource code and prepares it to be examined …\n"],["to_reek_source","IO","IO.html#method-i-to_reek_source","(description = 'io')","<p>Creates a new <code>Source</code> that assumes this IO stream contains Ruby\nsource code and prepares it to be examined …\n"],["to_reek_source","String","String.html#method-i-to_reek_source","()","<p>Creates a new <code>Source</code> that assumes this string contains Ruby\nsource code and prepares it to be examined …\n"],["value","Reek::Core::SmellConfiguration","Reek/Core/SmellConfiguration.html#method-i-value","(key, context, fall_back)","<p>Retrieves the value, if any, for the given <code>key</code>.\n<p>Returns <code>fall_back</code> if this config has no value for the …\n"],["value","Reek::Smells::SmellDetector","Reek/Smells/SmellDetector.html#method-i-value","(key, ctx, fall_back)",""],["value","Reek::Source::SexpExtensions::LitNode","Reek/Source/SexpExtensions/LitNode.html#method-i-value","()",""],["variable_names","Reek::Smells::UncommunicativeVariableName","Reek/Smells/UncommunicativeVariableName.html#method-i-variable_names","(exp)",""],["warnings","Reek::Core::WarningCollector","Reek/Core/WarningCollector.html#method-i-warnings","()",""],["CHANGELOG","","CHANGELOG.html","","<p>1.3.4\n<p>(apiology) Add –single-line option for reporting\n<p>(gilles-leblanc) Allow config files to override …\n"],["License","","License_txt.html","","<p>Copyright © 2008,2009 Kevin Rutherford\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"]]}}