var search_data = {"index":{"searchIndex":["autotest","autoupdate","bundler","isolate","once","preload","rcov","restart","timestamp","functionaltestmatrix","module","multiruby","unitdiff","zentest","zentestmapping","action()","add_discovery()","add_exception()","add_hook()","add_mapping()","add_missing_method()","add_sigint_handler()","add_sigquit_handler()","all_good()","analyze()","analyze_impl()","analyze_test()","autodiscover()","autotest()","blur()","build_and_install()","class_map()","clean()","clear_exceptions()","clear_mappings()","command=()","consolidate_failures()","convert_class_name()","create_method()","debug()","diff()","dir=()","each_scm_build_dir()","env()","exceptions()","fetch_tar()","files_matching()","find_files()","find_files_to_test()","fix()","focus()","focus_re()","generate_code()","get_class()","get_inherited_methods_for()","get_methods_for()","get_to_green()","glob()","glob=()","gnu_utils_build()","handle_results()","help()","hook()","in_build_dir()","in_install_dir()","in_root_dir()","in_tmp_dir()","in_versions_dir()","is_test_class()","known_files()","list()","load_file()","make_test_cmd()","massage()","matching_versions()","matrix()","merge_rubygems()","methods_and_tests()","missing_methods()","mri_latest_tag()","munge()","new()","new()","new_hash_of_arrays()","normal_to_test()","old_run_tests()","options()","options()","options=()","parse_diff()","parse_input()","parse_options()","path_to_classname()","pattern=()","process_class()","rake_build()","remove_exception()","remove_mapping()","reorder()","rerun_all_tests()","reset()","restart()","result()","rm()","root_dir()","ruby()","ruby_cmd()","run()","run()","run()","run_tests()","runner()","scan_files()","setup_dirs()","sleep_time=()","svn_co()","tags()","test_files_for()","test_to_normal()","unit_diff()","unit_diff()","unmunge()","update()","update_cmd=()","update_rubygems()","usage()","usage_with_exit()","wait_for_changes()","zentest()","history","manifest","readme","how_to_use_zentest","example"],"longSearchIndex":["autotest","autotest::autoupdate","autotest::bundler","autotest::isolate","autotest::once","autotest::preload","autotest::rcov","autotest::restart","autotest::timestamp","functionaltestmatrix","module","multiruby","unitdiff","zentest","zentestmapping","functionaltestmatrix::action()","autotest::add_discovery()","autotest#add_exception()","autotest::add_hook()","autotest#add_mapping()","zentest#add_missing_method()","autotest#add_sigint_handler()","autotest#add_sigquit_handler()","autotest#all_good()","zentest#analyze()","zentest#analyze_impl()","zentest#analyze_test()","autotest::autodiscover()","zentest::autotest()","module#blur()","multiruby::build_and_install()","autotest#class_map()","multiruby::clean()","autotest#clear_exceptions()","autotest#clear_mappings()","autotest::rcov::command=()","autotest#consolidate_failures()","zentest#convert_class_name()","zentest#create_method()","autotest#debug()","unitdiff#diff()","autotest::isolate::dir=()","multiruby::each_scm_build_dir()","multiruby::env()","autotest#exceptions()","multiruby::fetch_tar()","autotest#files_matching()","autotest#find_files()","autotest#find_files_to_test()","zentest::fix()","module#focus()","module#focus_re()","zentest#generate_code()","zentest#get_class()","zentest#get_inherited_methods_for()","zentest#get_methods_for()","autotest#get_to_green()","autotest::preload::glob()","autotest::preload::glob=()","multiruby::gnu_utils_build()","autotest#handle_results()","multiruby::help()","autotest#hook()","multiruby::in_build_dir()","multiruby::in_install_dir()","multiruby::in_root_dir()","multiruby::in_tmp_dir()","multiruby::in_versions_dir()","zentest#is_test_class()","autotest#known_files()","multiruby::list()","zentest#load_file()","autotest#make_test_cmd()","unitdiff#massage()","multiruby::matching_versions()","functionaltestmatrix::matrix()","multiruby::merge_rubygems()","zentest#methods_and_tests()","zentest#missing_methods()","multiruby::mri_latest_tag()","zentestmapping#munge()","autotest::new()","zentest::new()","autotest#new_hash_of_arrays()","zentestmapping#normal_to_test()","autotest#old_run_tests()","autotest::options()","autotest#options()","autotest::rcov::options=()","unitdiff#parse_diff()","unitdiff#parse_input()","autotest::parse_options()","autotest#path_to_classname()","autotest::rcov::pattern=()","zentest#process_class()","multiruby::rake_build()","autotest#remove_exception()","autotest#remove_mapping()","autotest#reorder()","autotest#rerun_all_tests()","autotest#reset()","autotest#restart()","zentest#result()","multiruby::rm()","multiruby::root_dir()","autotest#ruby()","autotest#ruby_cmd()","autotest::run()","autotest#run()","multiruby::run()","autotest#run_tests()","autotest::runner()","zentest#scan_files()","multiruby::setup_dirs()","autotest::autoupdate::sleep_time=()","multiruby::svn_co()","multiruby::tags()","autotest#test_files_for()","zentestmapping#test_to_normal()","unitdiff::unit_diff()","unitdiff#unit_diff()","zentestmapping#unmunge()","multiruby::update()","autotest::autoupdate::update_cmd=()","multiruby::update_rubygems()","zentest::usage()","zentest::usage_with_exit()","autotest#wait_for_changes()","module#zentest()","","","","",""],"info":[["Autotest","","Autotest.html","","<p>Autotest continuously scans the files in your project for changes and runs\nthe appropriate tests.  Test …\n"],["Autotest::AutoUpdate","","Autotest/AutoUpdate.html","",""],["Autotest::Bundler","","Autotest/Bundler.html","","<p>Prefix all test runs with `bundle exec` so the runs use the bundled\nenvironment.\n"],["Autotest::Isolate","","Autotest/Isolate.html","","<p>Run autotest with isolate support.\n"],["Autotest::Once","","Autotest/Once.html","","<p>this is for autotest plugin developers only…\n"],["Autotest::Preload","","Autotest/Preload.html","",""],["Autotest::RCov","","Autotest/RCov.html","",""],["Autotest::Restart","","Autotest/Restart.html","",""],["Autotest::Timestamp","","Autotest/Timestamp.html","",""],["FunctionalTestMatrix","","FunctionalTestMatrix.html","","<p>The Idea:\n<p>This is supposed to get us thinking about the various dimensions our\ntesting should address. …\n"],["Module","","Module.html","",""],["Multiruby","","Multiruby.html","","<p>multiruby_setup is a script to help you manage multiruby.\n<p>usage: multiruby_setup [-h|cmd|spec…]\n\n<pre>cmds: ...</pre>\n"],["UnitDiff","","UnitDiff.html","","<p>UnitDiff makes reading Test::Unit output easy and fun.  Instead of a\nconfusing jumble of text with nearly …\n"],["ZenTest","","ZenTest.html","","<p>ZenTest scans your target and unit-test code and writes your missing code\nbased on simple naming rules, …\n"],["ZenTestMapping","","ZenTestMapping.html","","<p>ZenTestMapping - mapping method names from impl to test.\n<p>Method names are mapped bidirectionally in the …\n"],["action","FunctionalTestMatrix","FunctionalTestMatrix.html#method-c-action","(action, *results)",""],["add_discovery","Autotest","Autotest.html#method-c-add_discovery","(&proc)","<p>Add a proc to the collection of discovery procs. See\n<code>autodiscover</code>.\n"],["add_exception","Autotest","Autotest.html#method-i-add_exception","(regexp)","<p>Adds <code>regexp</code> to the list of exceptions for find_file. This must\nbe called <em>before</em> the exceptions are compiled. …\n"],["add_hook","Autotest","Autotest.html#method-c-add_hook","(name, &block)","<p>Add the supplied block to the available hooks, with the given name.\n"],["add_mapping","Autotest","Autotest.html#method-i-add_mapping","(regexp, prepend = false, &proc)","<p>Adds a file mapping, optionally prepending the mapping to the front of the\nlist if <code>prepend</code> is true.  …\n"],["add_missing_method","ZenTest","ZenTest.html#method-i-add_missing_method","(klassname, methodname)","<p>Adds a missing method to the collected results.\n"],["add_sigint_handler","Autotest","Autotest.html#method-i-add_sigint_handler","()","<p>Installs a sigint handler.\n"],["add_sigquit_handler","Autotest","Autotest.html#method-i-add_sigquit_handler","()","<p>Installs a sigquit handler\n"],["all_good","Autotest","Autotest.html#method-i-all_good","()","<p>If there are no files left to test (because they’ve all passed), then all\nis good.\n"],["analyze","ZenTest","ZenTest.html#method-i-analyze","()","<p>Walk each known class and test that each method has a test method Then do\nit in the other direction… …\n"],["analyze_impl","ZenTest","ZenTest.html#method-i-analyze_impl","(klassname)","<p>Checks, for the given class klassname, that each method has a corrsponding\ntest method. If it doesn’t …\n"],["analyze_test","ZenTest","ZenTest.html#method-i-analyze_test","(testklassname)","<p>For the given test class testklassname, ensure that all the test methods\nhave corresponding (normal) …\n"],["autodiscover","Autotest","Autotest.html#method-c-autodiscover","()","<p>Automatically find all potential autotest runner styles by searching your\nloadpath, vendor/plugins, and …\n"],["autotest","ZenTest","ZenTest.html#method-c-autotest","(*klasses)","<p>Process all the supplied classes for methods etc, and analyse the results.\nGenerate the skeletal code …\n"],["blur","Module","Module.html#method-i-blur","()",""],["build_and_install","Multiruby","Multiruby.html#method-c-build_and_install","()",""],["class_map","Autotest","Autotest.html#method-i-class_map","()",""],["clean","Multiruby","Multiruby.html#method-c-clean","()",""],["clear_exceptions","Autotest","Autotest.html#method-i-clear_exceptions","()","<p>Clears the list of exceptions for find_file. This must be called\n<em>before</em> the exceptions are compiled. …\n"],["clear_mappings","Autotest","Autotest.html#method-i-clear_mappings","()","<p>Clears all file mappings. This is DANGEROUS as it entirely disables\nautotest. You must add at least one …\n"],["command=","Autotest::RCov","Autotest/RCov.html#method-c-command-3D","(o)",""],["consolidate_failures","Autotest","Autotest.html#method-i-consolidate_failures","(failed)","<p>Returns a hash mapping a file name to the known failures for that file.\n"],["convert_class_name","ZenTest","ZenTest.html#method-i-convert_class_name","(name)","<p>Generate the name of a testclass from non-test class so that  Foo::Blah\n=&gt; TestFoo::TestBlah, etc. …\n"],["create_method","ZenTest","ZenTest.html#method-i-create_method","(indentunit, indent, name)","<p>create a given method at a given indentation. Returns an array containing\nthe lines of the method.\n"],["debug","Autotest","Autotest.html#method-i-debug","()",""],["diff","UnitDiff","UnitDiff.html#method-i-diff","(expect, butwas)",""],["dir=","Autotest::Isolate","Autotest/Isolate.html#method-c-dir-3D","(o)",""],["each_scm_build_dir","Multiruby","Multiruby.html#method-c-each_scm_build_dir","()",""],["env","Multiruby","Multiruby.html#method-c-env","(name, fallback;)",""],["exceptions","Autotest","Autotest.html#method-i-exceptions","()","<p>Return a compiled regexp of exceptions for find_files or nil if no\nfiltering should take place. This …\n"],["fetch_tar","Multiruby","Multiruby.html#method-c-fetch_tar","(v)",""],["files_matching","Autotest","Autotest.html#method-i-files_matching","(regexp)","<p>Returns all known files in the codebase matching <code>regexp</code>.\n"],["find_files","Autotest","Autotest.html#method-i-find_files","()","<p>Find the files to process, ignoring temporary files, source configuration\nmanagement files, etc., and …\n"],["find_files_to_test","Autotest","Autotest.html#method-i-find_files_to_test","(files = find_files)","<p>Find the files which have been modified, update the recorded timestamps,\nand use this to update the files …\n"],["fix","ZenTest","ZenTest.html#method-c-fix","(*files)","<p>Runs ZenTest over all the supplied files so that they are analysed and the\nmissing methods have skeleton …\n"],["focus","Module","Module.html#method-i-focus","(*wanteds)",""],["focus_re","Module","Module.html#method-i-focus_re","(regexp)",""],["generate_code","ZenTest","ZenTest.html#method-i-generate_code","()","<p>Using the results gathered during analysis generate skeletal code with\nmethods raising NotImplementedError …\n"],["get_class","ZenTest","ZenTest.html#method-i-get_class","(klassname)","<p>obtain the class klassname\n"],["get_inherited_methods_for","ZenTest","ZenTest.html#method-i-get_inherited_methods_for","(klass, full)","<p>Return the methods for class klass, as a hash with the method nemas as\nkeys, and true as the value for …\n"],["get_methods_for","ZenTest","ZenTest.html#method-i-get_methods_for","(klass, full=false)","<p>Get the public instance, class and singleton methods for class klass. If\nfull is true, include the methods …\n"],["get_to_green","Autotest","Autotest.html#method-i-get_to_green","()","<p>Keep running the tests after a change, until all pass.\n"],["glob","Autotest::Preload","Autotest/Preload.html#method-c-glob","()",""],["glob=","Autotest::Preload","Autotest/Preload.html#method-c-glob-3D","(o)",""],["gnu_utils_build","Multiruby","Multiruby.html#method-c-gnu_utils_build","(inst_dir)",""],["handle_results","Autotest","Autotest.html#method-i-handle_results","(results)","<p>Check results for failures, set the “bar” to red or green, and if there are\nfailures record …\n"],["help","Multiruby","Multiruby.html#method-c-help","()",""],["hook","Autotest","Autotest.html#method-i-hook","(name, *args)","<p>Call the event hook named <code>name</code>, passing in optional args\ndepending on the hook itself.\n<p>Returns false if …\n"],["in_build_dir","Multiruby","Multiruby.html#method-c-in_build_dir","()",""],["in_install_dir","Multiruby","Multiruby.html#method-c-in_install_dir","()",""],["in_root_dir","Multiruby","Multiruby.html#method-c-in_root_dir","(subdir = \"\")",""],["in_tmp_dir","Multiruby","Multiruby.html#method-c-in_tmp_dir","()",""],["in_versions_dir","Multiruby","Multiruby.html#method-c-in_versions_dir","()",""],["is_test_class","ZenTest","ZenTest.html#method-i-is_test_class","(klass)","<p>Check the class klass is a testing class (by inspecting its name).\n"],["known_files","Autotest","Autotest.html#method-i-known_files","()","<p>Lazy accessor for the known_files hash.\n"],["list","Multiruby","Multiruby.html#method-c-list","()",""],["load_file","ZenTest","ZenTest.html#method-i-load_file","(file)","<p>load_file wraps require, skipping the loading of $0.\n"],["make_test_cmd","Autotest","Autotest.html#method-i-make_test_cmd","(files_to_test)","<p>Generate the commands to test the supplied files\n"],["massage","UnitDiff","UnitDiff.html#method-i-massage","(data)",""],["matching_versions","Multiruby","Multiruby.html#method-c-matching_versions","(url, matching=nil)",""],["matrix","FunctionalTestMatrix","FunctionalTestMatrix.html#method-c-matrix","(name, *setups)",""],["merge_rubygems","Multiruby","Multiruby.html#method-c-merge_rubygems","()",""],["methods_and_tests","ZenTest","ZenTest.html#method-i-methods_and_tests","(klassname, testklassname)","<p>looks up the methods and the corresponding test methods in the collection\nalready built.  To reduce duplication …\n"],["missing_methods","ZenTest","ZenTest.html#method-i-missing_methods","()",""],["mri_latest_tag","Multiruby","Multiruby.html#method-c-mri_latest_tag","(v)",""],["munge","ZenTestMapping","ZenTestMapping.html#method-i-munge","(name)",""],["new","Autotest","Autotest.html#method-c-new","()","<p>Initialize the instance and then load the user’s .autotest file, if any.\n"],["new","ZenTest","ZenTest.html#method-c-new","()",""],["new_hash_of_arrays","Autotest","Autotest.html#method-i-new_hash_of_arrays","()",""],["normal_to_test","ZenTestMapping","ZenTestMapping.html#method-i-normal_to_test","(name)","<p>Generates a test method name from a normal method, taking into account\nnames composed of metacharacters …\n"],["old_run_tests","Autotest","Autotest.html#method-i-old_run_tests","()",""],["options","Autotest","Autotest.html#method-c-options","()",""],["options","Autotest","Autotest.html#method-i-options","()",""],["options=","Autotest::RCov","Autotest/RCov.html#method-c-options-3D","(o)",""],["parse_diff","UnitDiff","UnitDiff.html#method-i-parse_diff","(result)","<p>Parses a single diff recording the header and what was expected, and what\nwas actually obtained.\n"],["parse_input","UnitDiff","UnitDiff.html#method-i-parse_input","(input, output)",""],["parse_options","Autotest","Autotest.html#method-c-parse_options","(args = ARGV)",""],["path_to_classname","Autotest","Autotest.html#method-i-path_to_classname","(s)","<p>Convert a path in a string, s, into a class name, changing underscores to\nCamelCase, etc.\n"],["pattern=","Autotest::RCov","Autotest/RCov.html#method-c-pattern-3D","(o)",""],["process_class","ZenTest","ZenTest.html#method-i-process_class","(klassname, full=false)","<p>Does all the work of finding a class by name, obtaining its methods and\nthose of its superclass. The …\n"],["rake_build","Multiruby","Multiruby.html#method-c-rake_build","(inst_dir)",""],["remove_exception","Autotest","Autotest.html#method-i-remove_exception","(regexp)","<p>Removes <code>regexp</code> to the list of exceptions for find_file. This\nmust be called <em>before</em> the exceptions are …\n"],["remove_mapping","Autotest","Autotest.html#method-i-remove_mapping","(regexp)","<p>Removed a file mapping matching <code>regexp</code>.\n"],["reorder","Autotest","Autotest.html#method-i-reorder","(files_to_test)",""],["rerun_all_tests","Autotest","Autotest.html#method-i-rerun_all_tests","()","<p>Rerun the tests from cold (reset state)\n"],["reset","Autotest","Autotest.html#method-i-reset","()","<p>Clear all state information about test failures and whether interrupts will\nkill autotest.\n"],["restart","Autotest","Autotest.html#method-i-restart","()",""],["result","ZenTest","ZenTest.html#method-i-result","()","<p>presents results in a readable manner.\n"],["rm","Multiruby","Multiruby.html#method-c-rm","(name)",""],["root_dir","Multiruby","Multiruby.html#method-c-root_dir","()",""],["ruby","Autotest","Autotest.html#method-i-ruby","()","<p>Determine and return the path of the ruby executable.\n"],["ruby_cmd","Autotest","Autotest.html#method-i-ruby_cmd","()","<p>Returns the base of the ruby command.\n"],["run","Autotest","Autotest.html#method-c-run","()","<p>Initialize and run the system.\n"],["run","Autotest","Autotest.html#method-i-run","()","<p>Repeatedly run failed tests, then all tests, then wait for changes and\ncarry on until killed.\n"],["run","Multiruby","Multiruby.html#method-c-run","(base_cmd, log = nil)",""],["run_tests","Autotest","Autotest.html#method-i-run_tests","()","<p>Look for files to test then run the tests and handle the results.\n"],["runner","Autotest","Autotest.html#method-c-runner","()","<p>Calculates the autotest runner to use to run the tests.\n<p>Can be overridden with –style, otherwise uses …\n"],["scan_files","ZenTest","ZenTest.html#method-i-scan_files","(*files)","<p>Work through files, collecting class names, method names and assertions.\nDetects ZenTest (SKIP|FULL) …\n"],["setup_dirs","Multiruby","Multiruby.html#method-c-setup_dirs","(download = true)",""],["sleep_time=","Autotest::AutoUpdate","Autotest/AutoUpdate.html#method-c-sleep_time-3D","(o)",""],["svn_co","Multiruby","Multiruby.html#method-c-svn_co","(url, dir)",""],["tags","Multiruby","Multiruby.html#method-c-tags","()",""],["test_files_for","Autotest","Autotest.html#method-i-test_files_for","(filename)","<p>Return the name of the file with the tests for filename by finding a\n<code>test_mapping</code> that matches the file …\n"],["test_to_normal","ZenTestMapping","ZenTestMapping.html#method-i-test_to_normal","(name, klassname=nil)","<p>Converts a method name beginning with test to its corresponding normal\nmethod name, taking into account …\n"],["unit_diff","UnitDiff","UnitDiff.html#method-c-unit_diff","()","<p>Handy wrapper for UnitDiff#unit_diff.\n"],["unit_diff","UnitDiff","UnitDiff.html#method-i-unit_diff","(input=ARGF, output=$stdout)","<p>Scans Test::Unit output <code>input</code> looking for comparison failures\nand makes them easily readable by passing …\n"],["unmunge","ZenTestMapping","ZenTestMapping.html#method-i-unmunge","(name)",""],["update","Multiruby","Multiruby.html#method-c-update","()",""],["update_cmd=","Autotest::AutoUpdate","Autotest/AutoUpdate.html#method-c-update_cmd-3D","(o)",""],["update_rubygems","Multiruby","Multiruby.html#method-c-update_rubygems","()",""],["usage","ZenTest","ZenTest.html#method-c-usage","()","<p>Provide a certain amount of help.\n"],["usage_with_exit","ZenTest","ZenTest.html#method-c-usage_with_exit","()","<p>Give help, then quit.\n"],["wait_for_changes","Autotest","Autotest.html#method-i-wait_for_changes","()","<p>Sleep then look for files to test, until there are some.\n"],["zentest","Module","Module.html#method-i-zentest","()",""],["History","","History_txt.html","","<p>4.9.5 / 2013-11-01\n<p>1 bug fix:\n<p>Updated require_rubygems_version AGAIN… going too fast. (zzak)\n"],["Manifest","","Manifest_txt.html","","<p>.autotest History.txt Manifest.txt README.txt Rakefile articles/Article.css\narticles/getting_started_with_autotest.html …\n"],["README","","README_txt.html","","<p>ZenTest\n<p>home  &mdash; github.com/seattlerb/zentest\n<p>rdoc  &mdash; zentest.rubyforge.org/ZenTest\n"],["how_to_use_zentest","","articles/how_to_use_zentest_txt.html","","<p>How to Use ZenTest with Ruby by Pat Eyler &lt;pate@kohalabs.com&gt;\nlinuxjournal.com/article.php?sid=7776 …\n"],["example","","example_txt.html","","<p>What do we do to get people writing tests? What do we do to get people\nwriting tests first?\n<p>I didn’t know …\n"]]}}