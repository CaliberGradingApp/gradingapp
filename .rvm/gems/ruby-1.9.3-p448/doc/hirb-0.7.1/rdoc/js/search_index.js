var search_data = {"index":{"searchIndex":["hirb","console","dynamicview","formatter","helpers","autotable","markdowntable","objecttable","parentchildtree","tabtable","table","filters","resizer","toomanyfieldsforwidtherror","tree","node","missinglevelerror","missingvalueerror","parentlessnodeerror","unicodetable","verticaltable","menu","error","objectmethods","pager","string","util","view","views","object","ripl","hirb","activated_by?()","add()","add()","add_dynamic_view()","add_view()","add_view()","any_const_get()","before_loop()","camelize()","capture_and_render()","capture_stdout()","chars()","choose_from_array()","command_exists?()","command_pager()","config()","default_pager()","detect_terminal_size()","disable()","disable()","dynamic_options()","enable()","enable()","enabled?()","find_home()","format_output()","format_output()","format_result()","formatter_config()","height()","menu()","new()","page()","recursive_hash_merge()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render()","render_footer()","render_header()","render_output()","render_rows()","render_table_header()","reset_render_method()","resize()","resize!()","table()","toggle_formatter()","toggle_pager()","view()","view()","view_methods()","view_output()","width()","license","readme"],"longSearchIndex":["hirb","hirb::console","hirb::dynamicview","hirb::formatter","hirb::helpers","hirb::helpers::autotable","hirb::helpers::markdowntable","hirb::helpers::objecttable","hirb::helpers::parentchildtree","hirb::helpers::tabtable","hirb::helpers::table","hirb::helpers::table::filters","hirb::helpers::table::resizer","hirb::helpers::table::toomanyfieldsforwidtherror","hirb::helpers::tree","hirb::helpers::tree::node","hirb::helpers::tree::node::missinglevelerror","hirb::helpers::tree::node::missingvalueerror","hirb::helpers::tree::parentlessnodeerror","hirb::helpers::unicodetable","hirb::helpers::verticaltable","hirb::menu","hirb::menu::error","hirb::objectmethods","hirb::pager","hirb::string","hirb::util","hirb::view","hirb::views","object","ripl","ripl::hirb","hirb::pager#activated_by?()","hirb::dynamicview::add()","hirb::view::add()","hirb::add_dynamic_view()","hirb::add_view()","hirb::formatter#add_view()","hirb::util#any_const_get()","ripl::hirb#before_loop()","hirb::util#camelize()","hirb::view::capture_and_render()","hirb::util#capture_stdout()","hirb::helpers::table#chars()","hirb::util#choose_from_array()","hirb::util#command_exists?()","hirb::pager::command_pager()","hirb::formatter#config()","hirb::pager::default_pager()","hirb::util#detect_terminal_size()","hirb::disable()","hirb::view::disable()","hirb::dynamicview#dynamic_options()","hirb::enable()","hirb::view::enable()","hirb::view::enabled?()","hirb::util#find_home()","hirb::console::format_output()","hirb::formatter#format_output()","ripl::hirb#format_result()","hirb::view::formatter_config()","hirb::view::height()","hirb::console#menu()","hirb::pager::new()","hirb::pager#page()","hirb::util#recursive_hash_merge()","hirb::helpers::autotable::render()","hirb::helpers::markdowntable::render()","hirb::helpers::objecttable::render()","hirb::helpers::parentchildtree::render()","hirb::helpers::tabtable::render()","hirb::helpers::table::render()","hirb::helpers::tree::render()","hirb::helpers::unicodetable::render()","hirb::helpers::verticaltable::render()","hirb::menu::render()","hirb::helpers::tabtable#render_footer()","hirb::helpers::tabtable#render_header()","hirb::console::render_output()","hirb::helpers::tabtable#render_rows()","hirb::helpers::tabtable#render_table_header()","hirb::view::reset_render_method()","hirb::view::resize()","hirb::helpers::table::resizer::resize!()","hirb::console#table()","hirb::view::toggle_formatter()","hirb::view::toggle_pager()","hirb::console#view()","hirb::objectmethods#view()","hirb::dynamicview#view_methods()","hirb::view::view_output()","hirb::view::width()","",""],"info":[["Hirb","","Hirb.html","","<p>Most of Hirb’s functionality is in Hirb::View. For a tutorial  on\nconfiguring and creating views see …\n"],["Hirb::Console","","Hirb/Console.html","","<p>This module is meant to be extended to provide methods for use in a\nconsole/irb shell. For example:\n\n<pre>&gt;&gt; ...</pre>\n"],["Hirb::DynamicView","","Hirb/DynamicView.html","","<p>This module extends a Helper with the ability to have dynamic views for\nconfigured output classes. After …\n"],["Hirb::Formatter","","Hirb/Formatter.html","","<p>A Formatter object formats an output object (using Formatter.format_output)\ninto a string based on the …\n"],["Hirb::Helpers","","Hirb/Helpers.html","",""],["Hirb::Helpers::AutoTable","","Hirb/Helpers/AutoTable.html","","<p>This helper wraps around the other table helpers i.e. Hirb::Helpers::Table\nwhile providing default helper …\n"],["Hirb::Helpers::MarkdownTable","","Hirb/Helpers/MarkdownTable.html","","<p>Creates a markdown table for github\n"],["Hirb::Helpers::ObjectTable","","Hirb/Helpers/ObjectTable.html","",""],["Hirb::Helpers::ParentChildTree","","Hirb/Helpers/ParentChildTree.html","",""],["Hirb::Helpers::TabTable","","Hirb/Helpers/TabTable.html","",""],["Hirb::Helpers::Table","","Hirb/Helpers/Table.html","","<p>Base Table class from which other table classes inherit. By default, a\ntable is constrained to a default …\n"],["Hirb::Helpers::Table::Filters","","Hirb/Helpers/Table/Filters.html","","<p>Contains filter methods used by :filters option. To define a custom filter,\nsimply open this module and …\n"],["Hirb::Helpers::Table::Resizer","","Hirb/Helpers/Table/Resizer.html","","<p>Resizes a table’s fields to the table’s max width.\n"],["Hirb::Helpers::Table::TooManyFieldsForWidthError","","Hirb/Helpers/Table/TooManyFieldsForWidthError.html","",""],["Hirb::Helpers::Tree","","Hirb/Helpers/Tree.html","","<p>Base tree class which given an array of nodes produces different types of\ntrees. The types of trees currently …\n"],["Hirb::Helpers::Tree::Node","","Hirb/Helpers/Tree/Node.html","",""],["Hirb::Helpers::Tree::Node::MissingLevelError","","Hirb/Helpers/Tree/Node/MissingLevelError.html","",""],["Hirb::Helpers::Tree::Node::MissingValueError","","Hirb/Helpers/Tree/Node/MissingValueError.html","",""],["Hirb::Helpers::Tree::ParentlessNodeError","","Hirb/Helpers/Tree/ParentlessNodeError.html","",""],["Hirb::Helpers::UnicodeTable","","Hirb/Helpers/UnicodeTable.html","",""],["Hirb::Helpers::VerticalTable","","Hirb/Helpers/VerticalTable.html","",""],["Hirb::Menu","","Hirb/Menu.html","","<p>This class provides a menu using Hirb’s table helpers by default to display\nchoices. Menu choices (syntax …\n"],["Hirb::Menu::Error","","Hirb/Menu/Error.html","",""],["Hirb::ObjectMethods","","Hirb/ObjectMethods.html","",""],["Hirb::Pager","","Hirb/Pager.html","","<p>This class provides class methods for paging and an object which can\nconditionally page given a terminal …\n"],["Hirb::String","","Hirb/String.html","","<p>Provides string helpers to deal with UTF-8 and ruby 1.8.x\n"],["Hirb::Util","","Hirb/Util.html","","<p>Group of handy utility functions used throughout Hirb.\n"],["Hirb::View","","Hirb/View.html","","<p>This class is responsible for managing all view-related functionality.\n<p>Create a View\n<p>Let’s create a simple …\n"],["Hirb::Views","","Hirb/Views.html","","<p>Namespace for Helpers defining multiple views in a module i.e. via\nDynamicView.\n"],["Object","","Object.html","",""],["Ripl","","Ripl.html","",""],["Ripl::Hirb","","Ripl/Hirb.html","",""],["activated_by?","Hirb::Pager","Hirb/Pager.html#method-i-activated_by-3F","(string_to_page, inspect_mode=false)","<p>Determines if string should be paged based on configured width and height.\n"],["add","Hirb::DynamicView","Hirb/DynamicView.html#method-c-add","(view, options, &block)","<p>Add dynamic views to output class(es) for a given helper. If defining one\nview, the first argument is …\n"],["add","Hirb::View","Hirb/View.html#method-c-add","(klass, view_config)","<p>Adds a view when View is enabled. See Formatter.add_view for more details.\n"],["add_dynamic_view","Hirb","Hirb.html#method-c-add_dynamic_view","(view, options, &block)","<p>Adds views. See Hirb::DynamicView.add for details.\n"],["add_view","Hirb","Hirb.html#method-c-add_view","(view, options, &block)","<p>Adds views. See Hirb::View.add for details.\n"],["add_view","Hirb::Formatter","Hirb/Formatter.html#method-i-add_view","(klass, view_config)","<p>Adds the view for the given class and view hash config. See\nFormatter.config for valid keys for view …\n"],["any_const_get","Hirb::Util","Hirb/Util.html#method-i-any_const_get","(name)","<p>Returns a constant like Module#const_get no matter what namespace it’s\nnested in. Returns nil if the …\n"],["before_loop","Ripl::Hirb","Ripl/Hirb.html#method-i-before_loop","()",""],["camelize","Hirb::Util","Hirb/Util.html#method-i-camelize","(string)","<p>From Rails ActiveSupport, converting undescored lowercase to camel\nuppercase.\n"],["capture_and_render","Hirb::View","Hirb/View.html#method-c-capture_and_render","(&block)","<p>Captures STDOUT and renders it using render_method(). The main use case is\nto conditionally page captured …\n"],["capture_stdout","Hirb::Util","Hirb/Util.html#method-i-capture_stdout","(&block)","<p>Captures STDOUT of anything run in its block and returns it as string.\n"],["chars","Hirb::Helpers::Table","Hirb/Helpers/Table.html#method-i-chars","()",""],["choose_from_array","Hirb::Util","Hirb/Util.html#method-i-choose_from_array","(array, input, options={})","<p>Used by Hirb::Menu to select items from an array. Array counting starts at\n1. Ranges of numbers are specified …\n"],["command_exists?","Hirb::Util","Hirb/Util.html#method-i-command_exists-3F","(command)","<p>Determines if a shell command exists by searching for it in ENV.\n"],["command_pager","Hirb::Pager","Hirb/Pager.html#method-c-command_pager","(output, options={})","<p>Pages using a configured or detected shell command.\n"],["config","Hirb::Formatter","Hirb/Formatter.html#method-i-config","()","<p>A hash of Ruby class strings mapped to view hashes. A view hash must have\nat least a :method, :output_method …\n"],["default_pager","Hirb::Pager","Hirb/Pager.html#method-c-default_pager","(output, options={})","<p>Pages with a ruby-only pager which either pages or quits.\n"],["detect_terminal_size","Hirb::Util","Hirb/Util.html#method-i-detect_terminal_size","()","<p>Returns [width, height] of terminal when detected, nil if not detected.\nThink of this as a simpler version …\n"],["disable","Hirb","Hirb.html#method-c-disable","()","<p>Disables view functionality. See Hirb::View.disable for details.\n"],["disable","Hirb::View","Hirb/View.html#method-c-disable","()","<p>Disable’s Hirb’s output and revert’s irb’s output method if irb exists.\n"],["dynamic_options","Hirb::DynamicView","Hirb/DynamicView.html#method-i-dynamic_options","(obj)","<p>Returns a hash of options based on dynamic views defined for the object’s\nancestry. If no config is found …\n"],["enable","Hirb","Hirb.html#method-c-enable","(options={}, &block)","<p>Enables view functionality. See Hirb::View.enable for details.\n"],["enable","Hirb::View","Hirb/View.html#method-c-enable","(options={}, &block)","<p>This activates view functionality i.e. the formatter, pager and size\ndetection. If irb exists, it overrides …\n"],["enabled?","Hirb::View","Hirb/View.html#method-c-enabled-3F","()","<p>Indicates if Hirb::View is enabled.\n"],["find_home","Hirb::Util","Hirb/Util.html#method-i-find_home","()","<p>From Rubygems, determine a user’s home.\n"],["format_output","Hirb::Console","Hirb/Console.html#method-c-format_output","(output, options={}, &block)","<p>Takes same arguments and options as render_output() but returns formatted\noutput instead of rendering …\n"],["format_output","Hirb::Formatter","Hirb/Formatter.html#method-i-format_output","(output, options={}, &block)","<p>This method looks for an output object’s view in Formatter.config and then\nFormatter.dynamic_config. …\n"],["format_result","Ripl::Hirb","Ripl/Hirb.html#method-i-format_result","(result)",""],["formatter_config","Hirb::View","Hirb/View.html#method-c-formatter_config","()","<p>Current formatter config, storing a hash of all static views\n"],["height","Hirb::View","Hirb/View.html#method-c-height","()","<p>Current console height\n"],["menu","Hirb::Console","Hirb/Console.html#method-i-menu","(output, options={}, &block)","<p>Renders a menu given an array using Hirb::Menu.render.\n"],["new","Hirb::Pager","Hirb/Pager.html#method-c-new","(width, height, options={})",""],["page","Hirb::Pager","Hirb/Pager.html#method-i-page","(string, inspect_mode)","<p>Pages given string using configured pager.\n"],["recursive_hash_merge","Hirb::Util","Hirb/Util.html#method-i-recursive_hash_merge","(hash1, hash2)","<p>Recursively merge hash1 with hash2.\n"],["render","Hirb::Helpers::AutoTable","Hirb/Helpers/AutoTable.html#method-c-render","(output, options={})","<p>Takes same options as Hirb::Helpers::Table.render except as noted below.\n<p>Options:\n<p>:table_class &mdash; Explicit …\n"],["render","Hirb::Helpers::MarkdownTable","Hirb/Helpers/MarkdownTable.html#method-c-render","(rows, options={})",""],["render","Hirb::Helpers::ObjectTable","Hirb/Helpers/ObjectTable.html#method-c-render","(rows, options ={})","<p>Rows are any ruby objects. Takes same options as\nHirb::Helpers::Table.render except as noted below.\n<p>Options: …\n"],["render","Hirb::Helpers::ParentChildTree","Hirb/Helpers/ParentChildTree.html#method-c-render","(root_node, options={})","<p>Starting with the given node, this builds a tree by recursively calling a\nchildren method. Takes same …\n"],["render","Hirb::Helpers::TabTable","Hirb/Helpers/TabTable.html#method-c-render","(rows, options={})","<p>Renders a tab-delimited table\n"],["render","Hirb::Helpers::Table","Hirb/Helpers/Table.html#method-c-render","(rows, options={})","<p>Main method which returns a formatted table.\n<p>Options:\n<p>:fields &mdash; An array which overrides the default fields …\n"],["render","Hirb::Helpers::Tree","Hirb/Helpers/Tree.html#method-c-render","(nodes, options={})","<p>Main method which renders a tree.\n<p>Options:\n<p>:type &mdash; Type of tree. Either :basic, :directory or :number. Default …\n"],["render","Hirb::Helpers::UnicodeTable","Hirb/Helpers/UnicodeTable.html#method-c-render","(rows, options={})","<p>Renders a unicode table\n"],["render","Hirb::Helpers::VerticalTable","Hirb/Helpers/VerticalTable.html#method-c-render","(rows, options={})","<p>Renders a vertical table using the same options as\nHirb::Helpers::Table.render except for the ones below …\n"],["render","Hirb::Menu","Hirb/Menu.html#method-c-render","(output, options={}, &block)","<p>This method will return an array unless it’s exited by simply pressing\nreturn, which returns nil. If …\n"],["render_footer","Hirb::Helpers::TabTable","Hirb/Helpers/TabTable.html#method-i-render_footer","()",""],["render_header","Hirb::Helpers::TabTable","Hirb/Helpers/TabTable.html#method-i-render_header","()",""],["render_output","Hirb::Console","Hirb/Console.html#method-c-render_output","(output, options={})","<p>A console version of render_output() which takes its same options but\nallows for shorthand. All options …\n"],["render_rows","Hirb::Helpers::TabTable","Hirb/Helpers/TabTable.html#method-i-render_rows","()",""],["render_table_header","Hirb::Helpers::TabTable","Hirb/Helpers/TabTable.html#method-i-render_table_header","()",""],["reset_render_method","Hirb::View","Hirb/View.html#method-c-reset_render_method","()","<p>Resets render_method back to its default.\n"],["resize","Hirb::View","Hirb/View.html#method-c-resize","(width=nil, height=nil)","<p>Resizes the console width and height for use with the table and pager i.e.\nafter having resized the console …\n"],["resize!","Hirb::Helpers::Table::Resizer","Hirb/Helpers/Table/Resizer.html#method-c-resize-21","(table)","<p>Modifies field_lengths to fit within width. Also enforces a table’s\nmax_fields.\n"],["table","Hirb::Console","Hirb/Console.html#method-i-table","(output, options={})","<p>Renders a table for the given object. Takes same options as\nHirb::Helpers::Table.render.\n"],["toggle_formatter","Hirb::View","Hirb/View.html#method-c-toggle_formatter","()","<p>Toggles formatter on or off.\n"],["toggle_pager","Hirb::View","Hirb/View.html#method-c-toggle_pager","()","<p>Toggles pager on or off. The pager only works while Hirb::View is enabled.\n"],["view","Hirb::Console","Hirb/Console.html#method-i-view","(output, options={})","<p>Renders any specified view for the given object. Takes same options as\nHirb::View.render_output.\n"],["view","Hirb::ObjectMethods","Hirb/ObjectMethods.html#method-i-view","(*args)","<p>Takes same options as Hirb::View.render_output.\n"],["view_methods","Hirb::DynamicView","Hirb/DynamicView.html#method-i-view_methods","()","<p>Stores view methods that a Helper has been given via DynamicView.add\n"],["view_output","Hirb::View","Hirb/View.html#method-c-view_output","(output, options={})","<p>This is the main method of this class. When view is enabled, this method\nsearches for a formatter it …\n"],["width","Hirb::View","Hirb/View.html#method-c-width","()","<p>Current console width\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT LICENSE\n<p>Copyright © 2010 Gabriel Horner\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","README_rdoc.html","","<p>To read a linked version of this README, click here.\n<p>Description\n<p>Hirb provides a mini view framework for …\n"]]}}