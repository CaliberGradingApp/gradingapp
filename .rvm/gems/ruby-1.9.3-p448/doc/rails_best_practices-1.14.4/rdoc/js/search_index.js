var search_data = {"index":{"searchIndex":["erubis","onlyruby","railsbestpractices","analyzer","core","check","accessable","callable","classable","exceptable","inheritedresourcesable","moduleable","configs","controllers","error","gem","gems","helpers","klass","klasses","mailers","method","methods","mod","modelassociations","modelattributes","models","modules","route","routes","runner","lexicals","longlinecheck","removetabcheck","removetrailingwhitespacecheck","prepares","configprepare","controllerprepare","gemfileprepare","helperprepare","initializerprepare","mailerprepare","modelprepare","routeprepare","schemaprepare","reviews","addmodelvirtualattributereview","alwaysadddbindexreview","checksavereturnvaluereview","defaultscopeisevilreview","drybundlerincapistranoreview","hashsyntaxreview","isolateseeddatareview","keepfindersontheirownmodelreview","lawofdemeterreview","movecodeintocontrollerreview","movecodeintohelperreview","movecodeintomodelreview","movefindertonamedscopereview","movemodellogicintomodelreview","needlessdeepnestingreview","notrescueexceptionreview","notusedefaultroutereview","notusetimeagoinwordsreview","overuseroutecustomizationsreview","protectmassassignmentreview","removeemptyhelpersreview","removeunusedmethodsincontrollersreview","removeunusedmethodsinhelpersreview","removeunusedmethodsinmodelsreview","replacecomplexcreationwithfactorymethodreview","replaceinstancevariablewithlocalvariablereview","restrictautogeneratedroutesreview","review","simplifyrenderincontrollersreview","simplifyrenderinviewsreview","usebeforefilterreview","usemodelassociationreview","usemultipartalternativeascontenttypeofemailreview","useobserverreview","useparenthesesinmethoddefreview","usequeryattributereview","usesaywithtimeinmigrationsreview","usescopeaccessreview","useturbosprocketsrails3review","add_association()","add_attribute()","add_decendant()","add_error()","add_expr_debug()","add_expr_escaped()","add_expr_literal()","add_method()","add_module_decendant()","add_postamble()","add_preamble()","add_route()","add_stmt()","add_text()","after_lexical()","after_prepare()","after_review()","analyze()","analyze_source_codes()","analyze_vcs()","base_path()","base_path=()","call_method()","check()","check()","check()","check()","check_method_add_block?()","classable_modules()","clear()","configs()","controller_methods()","controller_name_with_namespaces()","controllers()","current_access_control()","current_class_name()","current_controller_name()","current_extend_class_name()","current_module_name()","current_namespaces()","debug()","debug?()","display_bar?()","each()","empty_body?()","empty_hash?()","error_types()","errors()","errors()","errors()","except_methods()","excepted?()","expand_dirs_to_files()","file_accept()","file_ignore()","file_sort()","first_line_number()","gem_version()","gems()","generate()","get_all_unused_methods()","get_association()","get_association_class_name()","get_attribute_type()","get_method()","get_methods()","has_gem?()","has_method?()","has_parameters?()","hash_is_18?()","helper_methods()","helpers()","include?()","include_forbidden_attributes_protection?()","include_partial?()","included()","included()","included()","included()","included()","included()","internal_except_methods()","internal_except_methods()","internal_except_methods()","internal_except_methods()","is_association?()","is_attribute?()","klasses()","klasses()","lexical()","load_git_info()","load_hg_info()","mailers()","mark_parent_class_method_used()","mark_parent_class_methods_publicize()","mark_publicize()","mark_publicize()","mark_subclasses_method_used()","mark_used()","mark_used()","method_missing()","methods()","methods()","methods()","model_associations()","model_associations()","model_attributes()","model_attributes()","model_classnames()","model_methods()","models()","models()","moduleable_modules()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_parentheses_around_parameters?()","output()","output_html_errors()","output_terminal_errors()","output_yaml_errors()","parse_file?()","parse_files()","plain_output()","possible_public_used()","prepare()","process()","publicize()","remember_variable_use_count()","reset_variable_use_count()","return_value_is_used?()","review()","routes()","short_filename()","skip_command_callback_nodes()","skip_command_callback_nodes()","skip_command_callback_nodes()","to_s()","to_s()","to_s()","to_s()","url()","url()","valid_hash?()","valid_keys?()","variable()","variable_use_count()"],"longSearchIndex":["erubis","erubis::onlyruby","railsbestpractices","railsbestpractices::analyzer","railsbestpractices::core","railsbestpractices::core::check","railsbestpractices::core::check::accessable","railsbestpractices::core::check::callable","railsbestpractices::core::check::classable","railsbestpractices::core::check::exceptable","railsbestpractices::core::check::inheritedresourcesable","railsbestpractices::core::check::moduleable","railsbestpractices::core::configs","railsbestpractices::core::controllers","railsbestpractices::core::error","railsbestpractices::core::gem","railsbestpractices::core::gems","railsbestpractices::core::helpers","railsbestpractices::core::klass","railsbestpractices::core::klasses","railsbestpractices::core::mailers","railsbestpractices::core::method","railsbestpractices::core::methods","railsbestpractices::core::mod","railsbestpractices::core::modelassociations","railsbestpractices::core::modelattributes","railsbestpractices::core::models","railsbestpractices::core::modules","railsbestpractices::core::route","railsbestpractices::core::routes","railsbestpractices::core::runner","railsbestpractices::lexicals","railsbestpractices::lexicals::longlinecheck","railsbestpractices::lexicals::removetabcheck","railsbestpractices::lexicals::removetrailingwhitespacecheck","railsbestpractices::prepares","railsbestpractices::prepares::configprepare","railsbestpractices::prepares::controllerprepare","railsbestpractices::prepares::gemfileprepare","railsbestpractices::prepares::helperprepare","railsbestpractices::prepares::initializerprepare","railsbestpractices::prepares::mailerprepare","railsbestpractices::prepares::modelprepare","railsbestpractices::prepares::routeprepare","railsbestpractices::prepares::schemaprepare","railsbestpractices::reviews","railsbestpractices::reviews::addmodelvirtualattributereview","railsbestpractices::reviews::alwaysadddbindexreview","railsbestpractices::reviews::checksavereturnvaluereview","railsbestpractices::reviews::defaultscopeisevilreview","railsbestpractices::reviews::drybundlerincapistranoreview","railsbestpractices::reviews::hashsyntaxreview","railsbestpractices::reviews::isolateseeddatareview","railsbestpractices::reviews::keepfindersontheirownmodelreview","railsbestpractices::reviews::lawofdemeterreview","railsbestpractices::reviews::movecodeintocontrollerreview","railsbestpractices::reviews::movecodeintohelperreview","railsbestpractices::reviews::movecodeintomodelreview","railsbestpractices::reviews::movefindertonamedscopereview","railsbestpractices::reviews::movemodellogicintomodelreview","railsbestpractices::reviews::needlessdeepnestingreview","railsbestpractices::reviews::notrescueexceptionreview","railsbestpractices::reviews::notusedefaultroutereview","railsbestpractices::reviews::notusetimeagoinwordsreview","railsbestpractices::reviews::overuseroutecustomizationsreview","railsbestpractices::reviews::protectmassassignmentreview","railsbestpractices::reviews::removeemptyhelpersreview","railsbestpractices::reviews::removeunusedmethodsincontrollersreview","railsbestpractices::reviews::removeunusedmethodsinhelpersreview","railsbestpractices::reviews::removeunusedmethodsinmodelsreview","railsbestpractices::reviews::replacecomplexcreationwithfactorymethodreview","railsbestpractices::reviews::replaceinstancevariablewithlocalvariablereview","railsbestpractices::reviews::restrictautogeneratedroutesreview","railsbestpractices::reviews::review","railsbestpractices::reviews::simplifyrenderincontrollersreview","railsbestpractices::reviews::simplifyrenderinviewsreview","railsbestpractices::reviews::usebeforefilterreview","railsbestpractices::reviews::usemodelassociationreview","railsbestpractices::reviews::usemultipartalternativeascontenttypeofemailreview","railsbestpractices::reviews::useobserverreview","railsbestpractices::reviews::useparenthesesinmethoddefreview","railsbestpractices::reviews::usequeryattributereview","railsbestpractices::reviews::usesaywithtimeinmigrationsreview","railsbestpractices::reviews::usescopeaccessreview","railsbestpractices::reviews::useturbosprocketsrails3review","railsbestpractices::core::modelassociations#add_association()","railsbestpractices::core::modelattributes#add_attribute()","railsbestpractices::core::mod#add_decendant()","railsbestpractices::core::check#add_error()","erubis::onlyruby#add_expr_debug()","erubis::onlyruby#add_expr_escaped()","erubis::onlyruby#add_expr_literal()","railsbestpractices::core::methods#add_method()","railsbestpractices::core::modules#add_module_decendant()","erubis::onlyruby#add_postamble()","erubis::onlyruby#add_preamble()","railsbestpractices::core::routes#add_route()","erubis::onlyruby#add_stmt()","erubis::onlyruby#add_text()","railsbestpractices::core::runner#after_lexical()","railsbestpractices::core::runner#after_prepare()","railsbestpractices::core::runner#after_review()","railsbestpractices::analyzer#analyze()","railsbestpractices::analyzer#analyze_source_codes()","railsbestpractices::analyzer#analyze_vcs()","railsbestpractices::core::runner::base_path()","railsbestpractices::core::runner::base_path=()","railsbestpractices::core::check::callable#call_method()","railsbestpractices::lexicals::longlinecheck#check()","railsbestpractices::lexicals::removetabcheck#check()","railsbestpractices::lexicals::removetrailingwhitespacecheck#check()","railsbestpractices::prepares::gemfileprepare#check()","railsbestpractices::reviews::restrictautogeneratedroutesreview#check_method_add_block?()","railsbestpractices::core::check::classable#classable_modules()","railsbestpractices::prepares::clear()","railsbestpractices::prepares::configs()","railsbestpractices::prepares::controller_methods()","railsbestpractices::core::route#controller_name_with_namespaces()","railsbestpractices::prepares::controllers()","railsbestpractices::core::check::accessable#current_access_control()","railsbestpractices::core::check::classable#current_class_name()","railsbestpractices::prepares::routeprepare#current_controller_name()","railsbestpractices::core::check::classable#current_extend_class_name()","railsbestpractices::core::check::moduleable#current_module_name()","railsbestpractices::prepares::routeprepare#current_namespaces()","railsbestpractices::core::check::debug()","railsbestpractices::core::check::debug?()","railsbestpractices::analyzer#display_bar?()","railsbestpractices::core::modelassociations#each()","railsbestpractices::reviews::removeemptyhelpersreview#empty_body?()","railsbestpractices::reviews::hashsyntaxreview#empty_hash?()","railsbestpractices::analyzer#error_types()","railsbestpractices::analyzer#errors()","railsbestpractices::core::check#errors()","railsbestpractices::core::runner#errors()","railsbestpractices::core::check::exceptable#except_methods()","railsbestpractices::core::check::exceptable#excepted?()","railsbestpractices::analyzer#expand_dirs_to_files()","railsbestpractices::analyzer#file_accept()","railsbestpractices::analyzer#file_ignore()","railsbestpractices::analyzer#file_sort()","railsbestpractices::core::error#first_line_number()","railsbestpractices::core::gems#gem_version()","railsbestpractices::prepares::gems()","railsbestpractices::analyzer#generate()","railsbestpractices::core::methods#get_all_unused_methods()","railsbestpractices::core::modelassociations#get_association()","railsbestpractices::core::modelassociations#get_association_class_name()","railsbestpractices::core::modelattributes#get_attribute_type()","railsbestpractices::core::methods#get_method()","railsbestpractices::core::methods#get_methods()","railsbestpractices::core::gems#has_gem?()","railsbestpractices::core::methods#has_method?()","railsbestpractices::reviews::useparenthesesinmethoddefreview#has_parameters?()","railsbestpractices::reviews::hashsyntaxreview#hash_is_18?()","railsbestpractices::prepares::helper_methods()","railsbestpractices::prepares::helpers()","railsbestpractices::core::klasses#include?()","railsbestpractices::prepares::initializerprepare#include_forbidden_attributes_protection?()","railsbestpractices::reviews::simplifyrenderinviewsreview#include_partial?()","railsbestpractices::core::check::accessable::included()","railsbestpractices::core::check::callable::included()","railsbestpractices::core::check::classable::included()","railsbestpractices::core::check::exceptable::included()","railsbestpractices::core::check::inheritedresourcesable::included()","railsbestpractices::core::check::moduleable::included()","railsbestpractices::core::check::exceptable#internal_except_methods()","railsbestpractices::reviews::removeunusedmethodsincontrollersreview#internal_except_methods()","railsbestpractices::reviews::removeunusedmethodsinhelpersreview#internal_except_methods()","railsbestpractices::reviews::removeunusedmethodsinmodelsreview#internal_except_methods()","railsbestpractices::core::modelassociations#is_association?()","railsbestpractices::core::modelattributes#is_attribute?()","railsbestpractices::core::check::classable#klasses()","railsbestpractices::prepares::klasses()","railsbestpractices::core::runner#lexical()","railsbestpractices::analyzer#load_git_info()","railsbestpractices::analyzer#load_hg_info()","railsbestpractices::prepares::mailers()","railsbestpractices::core::methods#mark_parent_class_method_used()","railsbestpractices::core::methods#mark_parent_class_methods_publicize()","railsbestpractices::core::methods#mark_publicize()","railsbestpractices::reviews::removeunusedmethodsincontrollersreview#mark_publicize()","railsbestpractices::core::methods#mark_subclasses_method_used()","railsbestpractices::core::check::callable#mark_used()","railsbestpractices::core::method#mark_used()","railsbestpractices::core::check#method_missing()","railsbestpractices::reviews::removeunusedmethodsincontrollersreview#methods()","railsbestpractices::reviews::removeunusedmethodsinhelpersreview#methods()","railsbestpractices::reviews::removeunusedmethodsinmodelsreview#methods()","railsbestpractices::prepares::model_associations()","railsbestpractices::reviews::review#model_associations()","railsbestpractices::prepares::model_attributes()","railsbestpractices::reviews::review#model_attributes()","railsbestpractices::reviews::checksavereturnvaluereview#model_classnames()","railsbestpractices::prepares::model_methods()","railsbestpractices::prepares::models()","railsbestpractices::reviews::review#models()","railsbestpractices::core::check::moduleable#moduleable_modules()","railsbestpractices::analyzer::new()","railsbestpractices::core::check::new()","railsbestpractices::core::error::new()","railsbestpractices::core::gem::new()","railsbestpractices::core::klass::new()","railsbestpractices::core::method::new()","railsbestpractices::core::methods::new()","railsbestpractices::core::mod::new()","railsbestpractices::core::modelassociations::new()","railsbestpractices::core::modelattributes::new()","railsbestpractices::core::route::new()","railsbestpractices::core::runner::new()","railsbestpractices::lexicals::longlinecheck::new()","railsbestpractices::prepares::configprepare::new()","railsbestpractices::prepares::controllerprepare::new()","railsbestpractices::prepares::gemfileprepare::new()","railsbestpractices::prepares::helperprepare::new()","railsbestpractices::prepares::initializerprepare::new()","railsbestpractices::prepares::mailerprepare::new()","railsbestpractices::prepares::modelprepare::new()","railsbestpractices::prepares::routeprepare::new()","railsbestpractices::prepares::schemaprepare::new()","railsbestpractices::reviews::alwaysadddbindexreview::new()","railsbestpractices::reviews::isolateseeddatareview::new()","railsbestpractices::reviews::movecodeintohelperreview::new()","railsbestpractices::reviews::movecodeintomodelreview::new()","railsbestpractices::reviews::movemodellogicintomodelreview::new()","railsbestpractices::reviews::needlessdeepnestingreview::new()","railsbestpractices::reviews::overuseroutecustomizationsreview::new()","railsbestpractices::reviews::removeunusedmethodsincontrollersreview::new()","railsbestpractices::reviews::removeunusedmethodsinhelpersreview::new()","railsbestpractices::reviews::removeunusedmethodsinmodelsreview::new()","railsbestpractices::reviews::replacecomplexcreationwithfactorymethodreview::new()","railsbestpractices::reviews::restrictautogeneratedroutesreview::new()","railsbestpractices::reviews::usebeforefilterreview::new()","railsbestpractices::reviews::useobserverreview::new()","railsbestpractices::reviews::useparenthesesinmethoddefreview#no_parentheses_around_parameters?()","railsbestpractices::analyzer#output()","railsbestpractices::analyzer#output_html_errors()","railsbestpractices::analyzer#output_terminal_errors()","railsbestpractices::analyzer#output_yaml_errors()","railsbestpractices::core::check#parse_file?()","railsbestpractices::analyzer#parse_files()","railsbestpractices::analyzer#plain_output()","railsbestpractices::core::methods#possible_public_used()","railsbestpractices::core::runner#prepare()","railsbestpractices::analyzer#process()","railsbestpractices::core::method#publicize()","railsbestpractices::reviews::review#remember_variable_use_count()","railsbestpractices::reviews::review#reset_variable_use_count()","railsbestpractices::reviews::checksavereturnvaluereview#return_value_is_used?()","railsbestpractices::core::runner#review()","railsbestpractices::prepares::routes()","railsbestpractices::core::error#short_filename()","railsbestpractices::core::check::callable#skip_command_callback_nodes()","railsbestpractices::reviews::removeunusedmethodsincontrollersreview#skip_command_callback_nodes()","railsbestpractices::reviews::removeunusedmethodsinmodelsreview#skip_command_callback_nodes()","railsbestpractices::core::gem#to_s()","railsbestpractices::core::klass#to_s()","railsbestpractices::core::mod#to_s()","railsbestpractices::core::route#to_s()","railsbestpractices::core::check::url()","railsbestpractices::core::check#url()","railsbestpractices::reviews::simplifyrenderinviewsreview#valid_hash?()","railsbestpractices::reviews::hashsyntaxreview#valid_keys?()","railsbestpractices::reviews::review#variable()","railsbestpractices::reviews::review#variable_use_count()"],"info":[["Erubis","","Erubis.html","",""],["Erubis::OnlyRuby","","Erubis/OnlyRuby.html","",""],["RailsBestPractices","","RailsBestPractices.html","",""],["RailsBestPractices::Analyzer","","RailsBestPractices/Analyzer.html","","<p>RailsBestPractices Analyzer helps you to analyze your rails code, according\nto best practices on rails-bestpractices. …\n"],["RailsBestPractices::Core","","RailsBestPractices/Core.html","",""],["RailsBestPractices::Core::Check","","RailsBestPractices/Core/Check.html","","<p>A Check class that takes charge of checking the sexp.\n"],["RailsBestPractices::Core::Check::Accessable","","RailsBestPractices/Core/Check/Accessable.html","","<p>Helper to parse the access control.\n"],["RailsBestPractices::Core::Check::Callable","","RailsBestPractices/Core/Check/Callable.html","","<p>Helper to add callbacks to mark the methods are used.\n"],["RailsBestPractices::Core::Check::Classable","","RailsBestPractices/Core/Check/Classable.html","","<p>Helper to parse the class name.\n"],["RailsBestPractices::Core::Check::Exceptable","","RailsBestPractices/Core/Check/Exceptable.html","","<p>Helper to check except methods.\n"],["RailsBestPractices::Core::Check::InheritedResourcesable","","RailsBestPractices/Core/Check/InheritedResourcesable.html","","<p>Helper to indicate if the controller is inherited from InheritedResources.\n"],["RailsBestPractices::Core::Check::Moduleable","","RailsBestPractices/Core/Check/Moduleable.html","","<p>Helper to parse the module name.\n"],["RailsBestPractices::Core::Configs","","RailsBestPractices/Core/Configs.html","",""],["RailsBestPractices::Core::Controllers","","RailsBestPractices/Core/Controllers.html","","<p>Controller classes.\n"],["RailsBestPractices::Core::Error","","RailsBestPractices/Core/Error.html","","<p>Error is the violation to rails best practice.\n<p>it indicates the filenname, line number and error message …\n"],["RailsBestPractices::Core::Gem","","RailsBestPractices/Core/Gem.html","","<p>Gem info includes gem name and gem version\n"],["RailsBestPractices::Core::Gems","","RailsBestPractices/Core/Gems.html","",""],["RailsBestPractices::Core::Helpers","","RailsBestPractices/Core/Helpers.html","","<p>Helper moduels.\n"],["RailsBestPractices::Core::Klass","","RailsBestPractices/Core/Klass.html","","<p>Class info includes class name, extend class name and module names.\n"],["RailsBestPractices::Core::Klasses","","RailsBestPractices/Core/Klasses.html","","<p>Klass container.\n"],["RailsBestPractices::Core::Mailers","","RailsBestPractices/Core/Mailers.html","","<p>Mailer classes.\n"],["RailsBestPractices::Core::Method","","RailsBestPractices/Core/Method.html","","<p>Method info includes class name, method name, access control, file,\nline_number, used.\n"],["RailsBestPractices::Core::Methods","","RailsBestPractices/Core/Methods.html","","<p>Method container.\n"],["RailsBestPractices::Core::Mod","","RailsBestPractices/Core/Mod.html","","<p>Module info include module name and module spaces.\n"],["RailsBestPractices::Core::ModelAssociations","","RailsBestPractices/Core/ModelAssociations.html","","<p>Model associations container.\n"],["RailsBestPractices::Core::ModelAttributes","","RailsBestPractices/Core/ModelAttributes.html","","<p>Model attributes container.\n"],["RailsBestPractices::Core::Models","","RailsBestPractices/Core/Models.html","","<p>Model classes.\n"],["RailsBestPractices::Core::Modules","","RailsBestPractices/Core/Modules.html","","<p>Module container\n"],["RailsBestPractices::Core::Route","","RailsBestPractices/Core/Route.html","",""],["RailsBestPractices::Core::Routes","","RailsBestPractices/Core/Routes.html","",""],["RailsBestPractices::Core::Runner","","RailsBestPractices/Core/Runner.html","","<p>Runner is the main class, it can check source code of a filename with all\nchecks (according to the configuration). …\n"],["RailsBestPractices::Lexicals","","RailsBestPractices/Lexicals.html","",""],["RailsBestPractices::Lexicals::LongLineCheck","","RailsBestPractices/Lexicals/LongLineCheck.html","","<p>Keep lines fewer than 80 characters.\n"],["RailsBestPractices::Lexicals::RemoveTabCheck","","RailsBestPractices/Lexicals/RemoveTabCheck.html","","<p>Make sure there are no tabs in files.\n<p>See the best practice details here\nrails-bestpractices.com/posts/81-remove-tab …\n"],["RailsBestPractices::Lexicals::RemoveTrailingWhitespaceCheck","","RailsBestPractices/Lexicals/RemoveTrailingWhitespaceCheck.html","","<p>Make sure there are no trailing whitespace in codes.\n<p>See the best practice details here\nrails-bestpractices.com/posts/60-remove-trailing-whitespace …\n"],["RailsBestPractices::Prepares","","RailsBestPractices/Prepares.html","",""],["RailsBestPractices::Prepares::ConfigPrepare","","RailsBestPractices/Prepares/ConfigPrepare.html","","<p>Remember all configs\n"],["RailsBestPractices::Prepares::ControllerPrepare","","RailsBestPractices/Prepares/ControllerPrepare.html","","<p>Remember controllers and controller methods\n"],["RailsBestPractices::Prepares::GemfilePrepare","","RailsBestPractices/Prepares/GemfilePrepare.html","","<p>Remember all gems in Gemfile\n"],["RailsBestPractices::Prepares::HelperPrepare","","RailsBestPractices/Prepares/HelperPrepare.html","","<p>Remember helper methods.\n"],["RailsBestPractices::Prepares::InitializerPrepare","","RailsBestPractices/Prepares/InitializerPrepare.html","","<p>Check all initializers\n"],["RailsBestPractices::Prepares::MailerPrepare","","RailsBestPractices/Prepares/MailerPrepare.html","","<p>Remember the mailer names.\n"],["RailsBestPractices::Prepares::ModelPrepare","","RailsBestPractices/Prepares/ModelPrepare.html","","<p>Remember models and model associations.\n"],["RailsBestPractices::Prepares::RoutePrepare","","RailsBestPractices/Prepares/RoutePrepare.html","","<p>Remembber routes.\n"],["RailsBestPractices::Prepares::SchemaPrepare","","RailsBestPractices/Prepares/SchemaPrepare.html","","<p>Remember the model attributes.\n"],["RailsBestPractices::Reviews","","RailsBestPractices/Reviews.html","",""],["RailsBestPractices::Reviews::AddModelVirtualAttributeReview","","RailsBestPractices/Reviews/AddModelVirtualAttributeReview.html","","<p>Make sure to add a model virual attribute to simplify model creation.\n<p>See the best practice details here …\n"],["RailsBestPractices::Reviews::AlwaysAddDbIndexReview","","RailsBestPractices/Reviews/AlwaysAddDbIndexReview.html","","<p>Review db/schema.rb file to make sure every reference key has a database\nindex.\n<p>See the best practice …\n"],["RailsBestPractices::Reviews::CheckSaveReturnValueReview","","RailsBestPractices/Reviews/CheckSaveReturnValueReview.html","","<p>Review all code to make sure we either check the return value of “save” or\nuse “save!” …\n"],["RailsBestPractices::Reviews::DefaultScopeIsEvilReview","","RailsBestPractices/Reviews/DefaultScopeIsEvilReview.html","","<p>Review model files to make sure not use default_scope\n<p>See the best practice details here\nrails-bestpractices.com/posts/806-default_scope-is-evil …\n"],["RailsBestPractices::Reviews::DryBundlerInCapistranoReview","","RailsBestPractices/Reviews/DryBundlerInCapistranoReview.html","","<p>Review config/deploy.rb file to make sure using the bundler’s capistrano\nrecipe.\n<p>See the best practice …\n"],["RailsBestPractices::Reviews::HashSyntaxReview","","RailsBestPractices/Reviews/HashSyntaxReview.html","","<p>Check ruby 1.8 style hash and suggest to change hash syntax to 1.9.\n<p>Review process:\n\n<pre>check hash nodes in ...</pre>\n"],["RailsBestPractices::Reviews::IsolateSeedDataReview","","RailsBestPractices/Reviews/IsolateSeedDataReview.html","","<p>Make sure not to insert data in migration, move them to seed file.\n<p>See the best practice details here …\n"],["RailsBestPractices::Reviews::KeepFindersOnTheirOwnModelReview","","RailsBestPractices/Reviews/KeepFindersOnTheirOwnModelReview.html","","<p>Review model files to ake sure finders are on their own model.\n<p>See the best practice details here\nrails-bestpractices.com/posts/13-keep-finders-on-their-own-model. …\n"],["RailsBestPractices::Reviews::LawOfDemeterReview","","RailsBestPractices/Reviews/LawOfDemeterReview.html","","<p>Review to make sure not to avoid the law of demeter.\n<p>See the best practice details here\nrails-bestpractices.com/posts/15-the-law-of-demeter. …\n"],["RailsBestPractices::Reviews::MoveCodeIntoControllerReview","","RailsBestPractices/Reviews/MoveCodeIntoControllerReview.html","","<p>Review a view file to make sure there is no finder, finder should be moved\nto controller.\n<p>See the best …\n"],["RailsBestPractices::Reviews::MoveCodeIntoHelperReview","","RailsBestPractices/Reviews/MoveCodeIntoHelperReview.html","","<p>Review a view file to make sure there is no complex options_for_select\nmessage call.\n<p>See the best practice …\n"],["RailsBestPractices::Reviews::MoveCodeIntoModelReview","","RailsBestPractices/Reviews/MoveCodeIntoModelReview.html","","<p>Review a view file to make sure there is no complex logic call for model.\n<p>See the best practice details …\n"],["RailsBestPractices::Reviews::MoveFinderToNamedScopeReview","","RailsBestPractices/Reviews/MoveFinderToNamedScopeReview.html","","<p>Review a controller file to make sure there are no complex finder.\n<p>See the best practice details here …\n"],["RailsBestPractices::Reviews::MoveModelLogicIntoModelReview","","RailsBestPractices/Reviews/MoveModelLogicIntoModelReview.html","","<p>Review a controller file to make sure that complex model logic should not\nexist in controller, should …\n"],["RailsBestPractices::Reviews::NeedlessDeepNestingReview","","RailsBestPractices/Reviews/NeedlessDeepNestingReview.html","","<p>Review config/routes.rb file to make sure not to use too deep nesting\nroutes.\n<p>See the best practice details …\n"],["RailsBestPractices::Reviews::NotRescueExceptionReview","","RailsBestPractices/Reviews/NotRescueExceptionReview.html","","<p>Review all code to make sure we don’t rescue Exception This is a common\nmistake by Java or C# devs in …\n"],["RailsBestPractices::Reviews::NotUseDefaultRouteReview","","RailsBestPractices/Reviews/NotUseDefaultRouteReview.html","","<p>Review config/routes file to make sure not use default route that rails\ngenerated.\n<p>See the best practice …\n"],["RailsBestPractices::Reviews::NotUseTimeAgoInWordsReview","","RailsBestPractices/Reviews/NotUseTimeAgoInWordsReview.html","","<p>Review view and helper files to make sure not use time_ago_in_words or\ndistance_of_time_in_words_to_now. …\n"],["RailsBestPractices::Reviews::OveruseRouteCustomizationsReview","","RailsBestPractices/Reviews/OveruseRouteCustomizationsReview.html","","<p>Review config/routes.rb file to make sure there are no overuse route\ncustomizations.\n<p>See the best practice …\n"],["RailsBestPractices::Reviews::ProtectMassAssignmentReview","","RailsBestPractices/Reviews/ProtectMassAssignmentReview.html","","<p>Review model files to make sure to use attr_accessible, attr_protected or\nstrong_parameters to protect …\n"],["RailsBestPractices::Reviews::RemoveEmptyHelpersReview","","RailsBestPractices/Reviews/RemoveEmptyHelpersReview.html","","<p>Review a helper file to make sure it is not an empty moduel.\n<p>See the best practice details here\nrails-bestpractices.com/posts/72-remove-empty-helpers. …\n"],["RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview","","RailsBestPractices/Reviews/RemoveUnusedMethodsInControllersReview.html","","<p>Find out unused methods in controllers.\n<p>Implementation:\n<p>Review process:\n"],["RailsBestPractices::Reviews::RemoveUnusedMethodsInHelpersReview","","RailsBestPractices/Reviews/RemoveUnusedMethodsInHelpersReview.html","","<p>Find out unused methods in helpers.\n<p>Implementation:\n<p>Review process:\n"],["RailsBestPractices::Reviews::RemoveUnusedMethodsInModelsReview","","RailsBestPractices/Reviews/RemoveUnusedMethodsInModelsReview.html","","<p>Find out unused methods in models.\n<p>Implemenation:\n<p>Review process:\n"],["RailsBestPractices::Reviews::ReplaceComplexCreationWithFactoryMethodReview","","RailsBestPractices/Reviews/ReplaceComplexCreationWithFactoryMethodReview.html","","<p>Review a controller file to make sure that complex model creation should\nnot exist in controller, should …\n"],["RailsBestPractices::Reviews::ReplaceInstanceVariableWithLocalVariableReview","","RailsBestPractices/Reviews/ReplaceInstanceVariableWithLocalVariableReview.html","","<p>Review a partail view file to make sure there is no instance variable.\n<p>See the best practice details here …\n"],["RailsBestPractices::Reviews::RestrictAutoGeneratedRoutesReview","","RailsBestPractices/Reviews/RestrictAutoGeneratedRoutesReview.html","","<p>Review a route file to make sure all auto-generated routes have\ncorresponding actions in controller. …\n"],["RailsBestPractices::Reviews::Review","","RailsBestPractices/Reviews/Review.html","","<p>A Review class that takes charge of reviewing one rails best practice.\n"],["RailsBestPractices::Reviews::SimplifyRenderInControllersReview","","RailsBestPractices/Reviews/SimplifyRenderInControllersReview.html","","<p>Review a controller file to make sure using simplified syntax for render.\n<p>See the best practice details …\n"],["RailsBestPractices::Reviews::SimplifyRenderInViewsReview","","RailsBestPractices/Reviews/SimplifyRenderInViewsReview.html","","<p>Review a view file to make sure using simplified syntax for render.\n<p>See the best practice details here …\n"],["RailsBestPractices::Reviews::UseBeforeFilterReview","","RailsBestPractices/Reviews/UseBeforeFilterReview.html","","<p>Review a controller file to make sure to use before_filter to remove\nduplicated first code line_number …\n"],["RailsBestPractices::Reviews::UseModelAssociationReview","","RailsBestPractices/Reviews/UseModelAssociationReview.html","","<p>review a controller file to make sure to use model association instead of\nforeign key id assignment. …\n"],["RailsBestPractices::Reviews::UseMultipartAlternativeAsContentTypeOfEmailReview","","RailsBestPractices/Reviews/UseMultipartAlternativeAsContentTypeOfEmailReview.html","","<p>Make sure to use multipart/alternative as content_type of email.\n<p>See the best practice details here\nrails-bestpractices.com/posts/41-use-multipart-alternative-as-content_type-of-email.\n…\n"],["RailsBestPractices::Reviews::UseObserverReview","","RailsBestPractices/Reviews/UseObserverReview.html","","<p>Make sure to use observer (sorry we only check the mailer deliver now).\n<p>See the best practice details …\n"],["RailsBestPractices::Reviews::UseParenthesesInMethodDefReview","","RailsBestPractices/Reviews/UseParenthesesInMethodDefReview.html","","<p>Check if method definition has parentheses around parameters.\n<p>Review process:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">check</span> <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">node</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-identifier\">all</span> <span class=\"ruby-identifier\">files</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["RailsBestPractices::Reviews::UseQueryAttributeReview","","RailsBestPractices/Reviews/UseQueryAttributeReview.html","","<p>Make sure to use query attribute instead of nil?, blank? and present?.\n<p>See the best practice details here …\n"],["RailsBestPractices::Reviews::UseSayWithTimeInMigrationsReview","","RailsBestPractices/Reviews/UseSayWithTimeInMigrationsReview.html","","<p>Review a migration file to make sure to use say or say_with_time for\ncustomized data changes to produce …\n"],["RailsBestPractices::Reviews::UseScopeAccessReview","","RailsBestPractices/Reviews/UseScopeAccessReview.html","","<p>Review a controller to make sure to use scope access instead of manually\nchecking current_user and redirect. …\n"],["RailsBestPractices::Reviews::UseTurboSprocketsRails3Review","","RailsBestPractices/Reviews/UseTurboSprocketsRails3Review.html","","<p>Prepare Gemfile and review Capfile file to make sure using\nturbo-sprocket-rails3\n<p>See the best practice …\n"],["add_association","RailsBestPractices::Core::ModelAssociations","RailsBestPractices/Core/ModelAssociations.html#method-i-add_association","(model_name, association_name, association_meta, association_class=nil)","<p>@param [String] model name @param [String] association name @param [String]\nassociation meta, has_many …\n"],["add_attribute","RailsBestPractices::Core::ModelAttributes","RailsBestPractices/Core/ModelAttributes.html#method-i-add_attribute","(model_name, attribute_name, attribute_type)","<p>Add a model attribute.\n<p>@param [String] model name @param [String] attribute name @param [String]\nattribute …\n"],["add_decendant","RailsBestPractices::Core::Mod","RailsBestPractices/Core/Mod.html#method-i-add_decendant","(decendant)",""],["add_error","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-i-add_error","(message, filename = @node.file, line_number = @node.line_number)","<p>add error if source code violates rails best practice.\n<p>@param [String] message, is the string message …\n"],["add_expr_debug","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_expr_debug","(src, code)",""],["add_expr_escaped","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_expr_literal","(src, code)",""],["add_method","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-add_method","(class_name, method_name, meta={}, access_control=\"public\")","<p>Add a method.\n<p>@param [String] class name @param [String] method name @param [Hash] method\nmeta, file and …\n"],["add_module_decendant","RailsBestPractices::Core::Modules","RailsBestPractices/Core/Modules.html#method-i-add_module_decendant","(module_name, decendant)","<p>add module decendant.\n<p>@param [String] module name @param [String] decendant name\n"],["add_postamble","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_postamble","(src)",""],["add_preamble","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_preamble","(src)",""],["add_route","RailsBestPractices::Core::Routes","RailsBestPractices/Core/Routes.html#method-i-add_route","(namespaces, controller_name, action_name)","<p>add a route.\n<p>@param [Array] namesapces @param [String] controller name @param [String]\naction name\n"],["add_stmt","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_stmt","(src, code)",""],["add_text","Erubis::OnlyRuby","Erubis/OnlyRuby.html#method-i-add_text","(src, text)",""],["after_lexical","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-after_lexical","()",""],["after_prepare","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-after_prepare","()",""],["after_review","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-after_review","()",""],["analyze","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-analyze","()","<p>Analyze rails codes.\n<p>there are two steps to check rails codes,\n<p>prepare process, check all model and mailer …\n"],["analyze_source_codes","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-analyze_source_codes","()","<p>analyze source codes.\n"],["analyze_vcs","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-analyze_vcs","()","<p>analyze version control system info.\n"],["base_path","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-c-base_path","()","<p>get the base path, by default, the base path is current path.\n<p>@return [String] the base path\n"],["base_path=","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-c-base_path-3D","(path)","<p>set the base path.\n<p>@param [String] path the base path\n"],["call_method","RailsBestPractices::Core::Check::Callable","RailsBestPractices/Core/Check/Callable.html#method-i-call_method","(method_name, class_name=nil)",""],["check","RailsBestPractices::Lexicals::LongLineCheck","RailsBestPractices/Lexicals/LongLineCheck.html#method-i-check","(filename, content)","<p>check if a line is over 80 characters\n<p>@param [String] filename name of the file @param [String] content …\n"],["check","RailsBestPractices::Lexicals::RemoveTabCheck","RailsBestPractices/Lexicals/RemoveTabCheck.html#method-i-check","(filename, content)","<p>check if the content of file contains a tab.\n<p>@param [String] filename name of the file @param [String] …\n"],["check","RailsBestPractices::Lexicals::RemoveTrailingWhitespaceCheck","RailsBestPractices/Lexicals/RemoveTrailingWhitespaceCheck.html#method-i-check","(filename, content)","<p>check if the content of file contain a trailing whitespace.\n<p>@param [String] filename name of the file …\n"],["check","RailsBestPractices::Prepares::GemfilePrepare","RailsBestPractices/Prepares/GemfilePrepare.html#method-i-check","(filename, content)",""],["check_method_add_block?","RailsBestPractices::Reviews::RestrictAutoGeneratedRoutesReview","RailsBestPractices/Reviews/RestrictAutoGeneratedRoutesReview.html#method-i-check_method_add_block-3F","(node)",""],["classable_modules","RailsBestPractices::Core::Check::Classable","RailsBestPractices/Core/Check/Classable.html#method-i-classable_modules","()","<p>modules.\n"],["clear","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-clear","()","<p>Clear all prepare objects.\n"],["configs","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-configs","()",""],["controller_methods","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-controller_methods","()",""],["controller_name_with_namespaces","RailsBestPractices::Core::Route","RailsBestPractices/Core/Route.html#method-i-controller_name_with_namespaces","()",""],["controllers","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-controllers","()",""],["current_access_control","RailsBestPractices::Core::Check::Accessable","RailsBestPractices/Core/Check/Accessable.html#method-i-current_access_control","()","<p>get the current acces control.\n"],["current_class_name","RailsBestPractices::Core::Check::Classable","RailsBestPractices/Core/Check/Classable.html#method-i-current_class_name","()","<p>get the current class name.\n"],["current_controller_name","RailsBestPractices::Prepares::RoutePrepare","RailsBestPractices/Prepares/RoutePrepare.html#method-i-current_controller_name","()",""],["current_extend_class_name","RailsBestPractices::Core::Check::Classable","RailsBestPractices/Core/Check/Classable.html#method-i-current_extend_class_name","()","<p>get the current extend class name.\n"],["current_module_name","RailsBestPractices::Core::Check::Moduleable","RailsBestPractices/Core/Check/Moduleable.html#method-i-current_module_name","()","<p>get the current module name.\n"],["current_namespaces","RailsBestPractices::Prepares::RoutePrepare","RailsBestPractices/Prepares/RoutePrepare.html#method-i-current_namespaces","()",""],["debug","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-c-debug","()",""],["debug?","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-c-debug-3F","()",""],["display_bar?","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-display_bar-3F","()","<p>if disaply progress bar.\n"],["each","RailsBestPractices::Core::ModelAssociations","RailsBestPractices/Core/ModelAssociations.html#method-i-each","(&block)","<p>delegate each to @associations.\n"],["empty_body?","RailsBestPractices::Reviews::RemoveEmptyHelpersReview","RailsBestPractices/Reviews/RemoveEmptyHelpersReview.html#method-i-empty_body-3F","(module_node)",""],["empty_hash?","RailsBestPractices::Reviews::HashSyntaxReview","RailsBestPractices/Reviews/HashSyntaxReview.html#method-i-empty_hash-3F","(node)","<p>check if hash node is empty.\n"],["error_types","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-error_types","()","<p>unique error types.\n"],["errors","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-errors","()","<p>delegate errors to runner\n"],["errors","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-i-errors","()","<p>errors that vialote the rails best practices.\n"],["errors","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-errors","()","<p>get all errors from lexicals and reviews.\n<p>@return [Array] all errors from lexicals and reviews\n"],["except_methods","RailsBestPractices::Core::Check::Exceptable","RailsBestPractices/Core/Check/Exceptable.html#method-i-except_methods","()",""],["excepted?","RailsBestPractices::Core::Check::Exceptable","RailsBestPractices/Core/Check/Exceptable.html#method-i-excepted-3F","(method)","<p>check if the method is in the except methods list.\n"],["expand_dirs_to_files","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-expand_dirs_to_files","(*dirs)","<p>expand all files with extenstion rb, erb, haml, slim, builder and rxml\nunder the dirs\n<p>@param [Array] dirs …\n"],["file_accept","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-file_accept","(files, patterns)","<p>accept specific files.\n<p>@param [Array] files @param [Regexp] patterns, files match any pattern will\nbe …\n"],["file_ignore","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-file_ignore","(files, pattern)","<p>ignore specific files.\n<p>@param [Array] files @param [Regexp] pattern files match the pattern will\nbe ignored …\n"],["file_sort","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-file_sort","(files)","<p>sort files, models first, mailers, helpers, and then sort other files by\ncharacters.\n<p>models and mailers …\n"],["first_line_number","RailsBestPractices::Core::Error","RailsBestPractices/Core/Error.html#method-i-first_line_number","()",""],["gem_version","RailsBestPractices::Core::Gems","RailsBestPractices/Core/Gems.html#method-i-gem_version","(gem_name)",""],["gems","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-gems","()",""],["generate","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-generate","()","<p>generate configuration yaml file.\n"],["get_all_unused_methods","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-get_all_unused_methods","(access_control=nil)","<p>Get all unused methods.\n<p>@param [String] access control @return [Array] array of Method\n"],["get_association","RailsBestPractices::Core::ModelAssociations","RailsBestPractices/Core/ModelAssociations.html#method-i-get_association","(model_name, association_name)","<p>Get a model association.\n<p>@param [String] model name @param [String] association name @return [Hash]\n{“meta” …\n"],["get_association_class_name","RailsBestPractices::Core::ModelAssociations","RailsBestPractices/Core/ModelAssociations.html#method-i-get_association_class_name","(table_name, association_name)","<p>Get association’s class name\n<p>@param [String] table name @param [String] association_name @return\n[String] …\n"],["get_attribute_type","RailsBestPractices::Core::ModelAttributes","RailsBestPractices/Core/ModelAttributes.html#method-i-get_attribute_type","(model_name, attribute_name)","<p>Get attribute type.\n<p>@param [String] model name @param [String] attribute name @return [String]\nattribute …\n"],["get_method","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-get_method","(class_name, method_name, access_control=nil)","<p>Get a method in a class.\n<p>@param [String] class name @param [String] method name @param [String]\naccess …\n"],["get_methods","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-get_methods","(class_name, access_control=nil)","<p>Get methods of a class.\n<p>@param [String] class name @param [String] access control @return [Array]\nall …\n"],["has_gem?","RailsBestPractices::Core::Gems","RailsBestPractices/Core/Gems.html#method-i-has_gem-3F","(gem_name)",""],["has_method?","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-has_method-3F","(class_name, method_name, access_control=nil)","<p>If a class has a method.\n<p>@param [String] class name @param [String] method name @param [String]\naccess …\n"],["has_parameters?","RailsBestPractices::Reviews::UseParenthesesInMethodDefReview","RailsBestPractices/Reviews/UseParenthesesInMethodDefReview.html#method-i-has_parameters-3F","(def_node)",""],["hash_is_18?","RailsBestPractices::Reviews::HashSyntaxReview","RailsBestPractices/Reviews/HashSyntaxReview.html#method-i-hash_is_18-3F","(node)","<p>check if hash key/value pairs are ruby 1.8 style.\n"],["helper_methods","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-helper_methods","()",""],["helpers","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-helpers","()",""],["include?","RailsBestPractices::Core::Klasses","RailsBestPractices/Core/Klasses.html#method-i-include-3F","(class_name)","<p>If include the class.\n<p>@param [String] class name @return [Boolean] include or not\n"],["include_forbidden_attributes_protection?","RailsBestPractices::Prepares::InitializerPrepare","RailsBestPractices/Prepares/InitializerPrepare.html#method-i-include_forbidden_attributes_protection-3F","(node)","<p>check if the node is\n\n<pre>ActiveRecord::Base.send(:include, ActiveModel::ForbiddenAttributesProtection)</pre>\n"],["include_partial?","RailsBestPractices::Reviews::SimplifyRenderInViewsReview","RailsBestPractices/Reviews/SimplifyRenderInViewsReview.html#method-i-include_partial-3F","(hash_node)",""],["included","RailsBestPractices::Core::Check::Accessable","RailsBestPractices/Core/Check/Accessable.html#method-c-included","(base)",""],["included","RailsBestPractices::Core::Check::Callable","RailsBestPractices/Core/Check/Callable.html#method-c-included","(base)",""],["included","RailsBestPractices::Core::Check::Classable","RailsBestPractices/Core/Check/Classable.html#method-c-included","(base)",""],["included","RailsBestPractices::Core::Check::Exceptable","RailsBestPractices/Core/Check/Exceptable.html#method-c-included","(base)",""],["included","RailsBestPractices::Core::Check::InheritedResourcesable","RailsBestPractices/Core/Check/InheritedResourcesable.html#method-c-included","(base)",""],["included","RailsBestPractices::Core::Check::Moduleable","RailsBestPractices/Core/Check/Moduleable.html#method-c-included","(base)",""],["internal_except_methods","RailsBestPractices::Core::Check::Exceptable","RailsBestPractices/Core/Check/Exceptable.html#method-i-internal_except_methods","()",""],["internal_except_methods","RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInControllersReview.html#method-i-internal_except_methods","()",""],["internal_except_methods","RailsBestPractices::Reviews::RemoveUnusedMethodsInHelpersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInHelpersReview.html#method-i-internal_except_methods","()",""],["internal_except_methods","RailsBestPractices::Reviews::RemoveUnusedMethodsInModelsReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInModelsReview.html#method-i-internal_except_methods","()",""],["is_association?","RailsBestPractices::Core::ModelAssociations","RailsBestPractices/Core/ModelAssociations.html#method-i-is_association-3F","(model_name, association_name)","<p>If it is a model’s association.\n<p>@param [String] model name @param [String] association name @return\n[Boolean] …\n"],["is_attribute?","RailsBestPractices::Core::ModelAttributes","RailsBestPractices/Core/ModelAttributes.html#method-i-is_attribute-3F","(model_name, attribute_name)","<p>If it is a model’s attribute.\n<p>@param [String] model name @param [String] attribute name @return [Boolean]\n…\n"],["klasses","RailsBestPractices::Core::Check::Classable","RailsBestPractices/Core/Check/Classable.html#method-i-klasses","()",""],["klasses","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-klasses","()",""],["lexical","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-lexical","(filename, content)","<p>lexical analysis the file.\n<p>@param [String] filename of the file @param [String] content of the file\n"],["load_git_info","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-load_git_info","()","<p>load git commit and git username info.\n"],["load_hg_info","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-load_hg_info","()","<p>load hg commit and hg username info.\n"],["mailers","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-mailers","()",""],["mark_parent_class_method_used","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-mark_parent_class_method_used","(class_name, method_name)","<p>Mark parent class’ method as used.\n<p>@param [String] class name @param [String] method name\n"],["mark_parent_class_methods_publicize","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-mark_parent_class_methods_publicize","(class_name, method_name)","<p>Mark parent classs’ method as public.\n<p>@param [String] class name @param [String] method name\n"],["mark_publicize","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-mark_publicize","(class_name, method_name)","<p>Mark the method as public.\n<p>@param [String] class name @param [String] method name\n"],["mark_publicize","RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInControllersReview.html#method-i-mark_publicize","(method_name, class_name=current_class_name)",""],["mark_subclasses_method_used","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-mark_subclasses_method_used","(class_name, method_name)","<p>Mark sub classes’ method as used.\n<p>@param [String] class name @param [String] method name\n"],["mark_used","RailsBestPractices::Core::Check::Callable","RailsBestPractices/Core/Check/Callable.html#method-i-mark_used","(method_node)",""],["mark_used","RailsBestPractices::Core::Method","RailsBestPractices/Core/Method.html#method-i-mark_used","()","<p>Mark the method as used.\n"],["method_missing","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-i-method_missing","(method_name, *args)","<p>method_missing to catch all start and end process for each node type, like\n\n<pre>start_def\nend_def\nstart_call ...</pre>\n"],["methods","RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInControllersReview.html#method-i-methods","()",""],["methods","RailsBestPractices::Reviews::RemoveUnusedMethodsInHelpersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInHelpersReview.html#method-i-methods","()",""],["methods","RailsBestPractices::Reviews::RemoveUnusedMethodsInModelsReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInModelsReview.html#method-i-methods","()",""],["model_associations","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-model_associations","()",""],["model_associations","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-model_associations","()","<p>get the model associations from Prepares.\n<p>@return [Hash]\n"],["model_attributes","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-model_attributes","()",""],["model_attributes","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-model_attributes","()","<p>get the model attributes from Prepares.\n<p>@return [Hash]\n"],["model_classnames","RailsBestPractices::Reviews::CheckSaveReturnValueReview","RailsBestPractices/Reviews/CheckSaveReturnValueReview.html#method-i-model_classnames","()",""],["model_methods","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-model_methods","()",""],["models","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-models","()",""],["models","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-models","()","<p>get the models from Prepares.\n<p>@return [Array]\n"],["moduleable_modules","RailsBestPractices::Core::Check::Moduleable","RailsBestPractices/Core/Check/Moduleable.html#method-i-moduleable_modules","()","<p>modules.\n"],["new","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-c-new","(path, options={})","<p>initialize\n<p>@param [String] path where to generate the configuration yaml file @param\n[Hash] options\n"],["new","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-c-new","(options={})",""],["new","RailsBestPractices::Core::Error","RailsBestPractices/Core/Error.html#method-c-new","(options={})",""],["new","RailsBestPractices::Core::Gem","RailsBestPractices/Core/Gem.html#method-c-new","(name, version)",""],["new","RailsBestPractices::Core::Klass","RailsBestPractices/Core/Klass.html#method-c-new","(class_name, extend_class_name, modules)",""],["new","RailsBestPractices::Core::Method","RailsBestPractices/Core/Method.html#method-c-new","(class_name, method_name, access_control, meta)",""],["new","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-c-new","()",""],["new","RailsBestPractices::Core::Mod","RailsBestPractices/Core/Mod.html#method-c-new","(module_name, modules)",""],["new","RailsBestPractices::Core::ModelAssociations","RailsBestPractices/Core/ModelAssociations.html#method-c-new","()",""],["new","RailsBestPractices::Core::ModelAttributes","RailsBestPractices/Core/ModelAttributes.html#method-c-new","()",""],["new","RailsBestPractices::Core::Route","RailsBestPractices/Core/Route.html#method-c-new","(namespaces, controller_name, action_name)",""],["new","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-c-new","(options={})","<p>initialize the runner.\n<p>@param [Hash] options pass the prepares and reviews.\n"],["new","RailsBestPractices::Lexicals::LongLineCheck","RailsBestPractices/Lexicals/LongLineCheck.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Prepares::ConfigPrepare","RailsBestPractices/Prepares/ConfigPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::ControllerPrepare","RailsBestPractices/Prepares/ControllerPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::GemfilePrepare","RailsBestPractices/Prepares/GemfilePrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::HelperPrepare","RailsBestPractices/Prepares/HelperPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::InitializerPrepare","RailsBestPractices/Prepares/InitializerPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::MailerPrepare","RailsBestPractices/Prepares/MailerPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::ModelPrepare","RailsBestPractices/Prepares/ModelPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::RoutePrepare","RailsBestPractices/Prepares/RoutePrepare.html#method-c-new","()",""],["new","RailsBestPractices::Prepares::SchemaPrepare","RailsBestPractices/Prepares/SchemaPrepare.html#method-c-new","()",""],["new","RailsBestPractices::Reviews::AlwaysAddDbIndexReview","RailsBestPractices/Reviews/AlwaysAddDbIndexReview.html#method-c-new","()",""],["new","RailsBestPractices::Reviews::IsolateSeedDataReview","RailsBestPractices/Reviews/IsolateSeedDataReview.html#method-c-new","()",""],["new","RailsBestPractices::Reviews::MoveCodeIntoHelperReview","RailsBestPractices/Reviews/MoveCodeIntoHelperReview.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Reviews::MoveCodeIntoModelReview","RailsBestPractices/Reviews/MoveCodeIntoModelReview.html#method-c-new","(options={})",""],["new","RailsBestPractices::Reviews::MoveModelLogicIntoModelReview","RailsBestPractices/Reviews/MoveModelLogicIntoModelReview.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Reviews::NeedlessDeepNestingReview","RailsBestPractices/Reviews/NeedlessDeepNestingReview.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Reviews::OveruseRouteCustomizationsReview","RailsBestPractices/Reviews/OveruseRouteCustomizationsReview.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInControllersReview.html#method-c-new","(options={})",""],["new","RailsBestPractices::Reviews::RemoveUnusedMethodsInHelpersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInHelpersReview.html#method-c-new","(options={})",""],["new","RailsBestPractices::Reviews::RemoveUnusedMethodsInModelsReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInModelsReview.html#method-c-new","(options={})",""],["new","RailsBestPractices::Reviews::ReplaceComplexCreationWithFactoryMethodReview","RailsBestPractices/Reviews/ReplaceComplexCreationWithFactoryMethodReview.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Reviews::RestrictAutoGeneratedRoutesReview","RailsBestPractices/Reviews/RestrictAutoGeneratedRoutesReview.html#method-c-new","()",""],["new","RailsBestPractices::Reviews::UseBeforeFilterReview","RailsBestPractices/Reviews/UseBeforeFilterReview.html#method-c-new","(options = {})",""],["new","RailsBestPractices::Reviews::UseObserverReview","RailsBestPractices/Reviews/UseObserverReview.html#method-c-new","()",""],["no_parentheses_around_parameters?","RailsBestPractices::Reviews::UseParenthesesInMethodDefReview","RailsBestPractices/Reviews/UseParenthesesInMethodDefReview.html#method-i-no_parentheses_around_parameters-3F","(def_node)",""],["output","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-output","()","<p>Output the analyze result.\n"],["output_html_errors","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-output_html_errors","()","<p>output errors with html format.\n"],["output_terminal_errors","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-output_terminal_errors","()","<p>output errors on terminal.\n"],["output_yaml_errors","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-output_yaml_errors","()","<p>output errors with yaml format.\n"],["parse_file?","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-i-parse_file-3F","(node_file)","<p>check if the check will need to parse the node file.\n<p>@param [String] the file name of node. @return [Boolean] …\n"],["parse_files","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-parse_files","()","<p>get all files for parsing.\n<p>@return [Array] all files for parsing\n"],["plain_output","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-plain_output","(message, color)","<p>plain output with color.\n<p>@param [String] message to output @param [String] color\n"],["possible_public_used","RailsBestPractices::Core::Methods","RailsBestPractices/Core/Methods.html#method-i-possible_public_used","(method_name)","<p>Remomber the method name, the method is probably be used for the class’\npublic method.\n<p>@param [String] …\n"],["prepare","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-prepare","(filename, content)","<p>parepare the file.\n<p>@param [String] filename of the file @param [String] content of the file\n"],["process","RailsBestPractices::Analyzer","RailsBestPractices/Analyzer.html#method-i-process","(process)","<p>process lexical, prepare or reivew.\n<p>get all files for the process, analyze each file, and increment progress …\n"],["publicize","RailsBestPractices::Core::Method","RailsBestPractices/Core/Method.html#method-i-publicize","()","<p>Mark the method as public\n"],["remember_variable_use_count","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-remember_variable_use_count","(node)","<p>remember use count for the variable in the call or assign node.\n<p>find the variable in the call or assign …\n"],["reset_variable_use_count","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-reset_variable_use_count","()","<p>reset @variable_use_count hash.\n"],["return_value_is_used?","RailsBestPractices::Reviews::CheckSaveReturnValueReview","RailsBestPractices/Reviews/CheckSaveReturnValueReview.html#method-i-return_value_is_used-3F","(node)",""],["review","RailsBestPractices::Core::Runner","RailsBestPractices/Core/Runner.html#method-i-review","(filename, content)","<p>review the file.\n<p>@param [String] filename of the file @param [String] content of the file\n"],["routes","RailsBestPractices::Prepares","RailsBestPractices/Prepares.html#method-c-routes","()",""],["short_filename","RailsBestPractices::Core::Error","RailsBestPractices/Core/Error.html#method-i-short_filename","()",""],["skip_command_callback_nodes","RailsBestPractices::Core::Check::Callable","RailsBestPractices/Core/Check/Callable.html#method-i-skip_command_callback_nodes","()","<p>skip start_command callback for these nodes\n"],["skip_command_callback_nodes","RailsBestPractices::Reviews::RemoveUnusedMethodsInControllersReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInControllersReview.html#method-i-skip_command_callback_nodes","()","<p>skip render and around_filter nodes for start_command callbacks.\n"],["skip_command_callback_nodes","RailsBestPractices::Reviews::RemoveUnusedMethodsInModelsReview","RailsBestPractices/Reviews/RemoveUnusedMethodsInModelsReview.html#method-i-skip_command_callback_nodes","()","<p>skip scope and validate nodes for start_command callbacks.\n"],["to_s","RailsBestPractices::Core::Gem","RailsBestPractices/Core/Gem.html#method-i-to_s","()",""],["to_s","RailsBestPractices::Core::Klass","RailsBestPractices/Core/Klass.html#method-i-to_s","()",""],["to_s","RailsBestPractices::Core::Mod","RailsBestPractices/Core/Mod.html#method-i-to_s","()",""],["to_s","RailsBestPractices::Core::Route","RailsBestPractices/Core/Route.html#method-i-to_s","()",""],["url","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-c-url","(url=nil)",""],["url","RailsBestPractices::Core::Check","RailsBestPractices/Core/Check.html#method-i-url","()","<p>default url is empty.\n<p>@return [String] the url of rails best practice\n"],["valid_hash?","RailsBestPractices::Reviews::SimplifyRenderInViewsReview","RailsBestPractices/Reviews/SimplifyRenderInViewsReview.html#method-i-valid_hash-3F","(hash_node)",""],["valid_keys?","RailsBestPractices::Reviews::HashSyntaxReview","RailsBestPractices/Reviews/HashSyntaxReview.html#method-i-valid_keys-3F","(node)","<p>check if the hash keys are valid to be converted to ruby 1.9 syntax.\n"],["variable","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-variable","(node)","<p>find variable in the call or field node.\n"],["variable_use_count","RailsBestPractices::Reviews::Review","RailsBestPractices/Reviews/Review.html#method-i-variable_use_count","()","<p>return @variable_use_count hash.\n"]]}}