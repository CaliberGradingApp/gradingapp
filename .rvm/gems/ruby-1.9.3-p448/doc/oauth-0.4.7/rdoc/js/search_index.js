var search_data = {"index":{"searchIndex":["actioncontroller","base","testrequest","digest","hmac","eventmachine","httpclient","net","httpgenericrequest","oauth","accesstoken","cli","client","helper","consumer","consumertoken","error","helper","oauthtesthelper","problem","requestproxy","actioncontrollerrequest","base","curl","easy","eventmachine","httprequest","jabberrequest","mockrequest","net","http","httprequest","rackrequest","typhoeus","request","unknownrequesttype","requesttoken","server","servertoken","signature","base","hmac","base","md5","rmd160","sha1","sha2","md5","plaintext","rsa","sha1","sha1","unknownsignaturemethod","token","unauthorized","object","string","<<()","==()","==()","==()","access_token_path()","access_token_path()","access_token_url()","access_token_url()","access_token_url?()","all_parameters()","amend_user_agent_header()","apply_oauth!()","authorize_path()","authorize_path()","authorize_url()","authorize_url()","authorize_url()","authorize_url?()","available_methods()","block_length()","body()","body_hash()","body_hash()","build()","build_authorize_url()","bytes()","bytesize()","callback_confirmed?()","combine_query()","configure_oauth()","consumer_key()","create_consumer()","create_http()","create_http_request()","create_signed_request()","delete()","digest_class()","digest_klass()","digest_length()","escape()","execute()","execute()","extract_command_and_parse_options()","from_hash()","generate_consumer_credentials()","generate_credentials()","generate_key()","generate_nonce()","get()","get_access_token()","get_access_token()","get_request_token()","hash_body()","hash_class()","head()","header()","header_params()","http()","http_method()","implements()","initialize_copy()","inspect()","marshal_dump()","marshal_load()","merged_parameters()","method()","method()","method()","method()","method()","method()","method()","method()","mock_incoming_request_with_authorize_header()","mock_incoming_request_with_query()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","non_oauth_parameters()","nonce()","nonce()","normalize()","normalize_nested_query()","normalize_uri()","normalized_oauth_uri()","normalized_parameters()","normalized_uri()","normalized_uri()","normalized_uri()","oauth!()","oauth!()","oauth_callback()","oauth_consumer_key()","oauth_header()","oauth_nonce()","oauth_parameters()","oauth_parameters()","oauth_signature()","oauth_signature_method()","oauth_timestamp()","oauth_token()","oauth_verifier()","oauth_version()","option_parser()","options()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters()","parameters_for_signature()","parameters_for_signature()","parameters_with_oauth()","parse_header()","parse_options()","post()","post_parameters()","prepare_parameters()","process_with_new_base_test()","process_with_oauth()","proxies()","proxy()","proxy()","public_key()","put()","query_parameters()","query_params()","query_params()","query_string_blank?()","request()","request()","request()","request_endpoint()","request_params()","request_params()","request_token_path()","request_token_path()","request_token_url()","request_token_url()","request_token_url?()","reset()","scheme()","secret()","set_oauth_body()","set_oauth_header()","set_oauth_header()","set_oauth_parameters()","set_oauth_query_string()","set_oauth_query_string()","sign()","sign()","sign!()","sign!()","sign!()","signature()","signature()","signature()","signature()","signature()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_base_string()","signature_method()","signed?()","signed_uri()","site()","stringify_keys()","sufficient_options?()","tap()","timestamp()","timestamp()","to_query()","to_s()","to_s()","token()","token_request()","unescape()","update()","uri()","uri()","uri()","uri()","uri()","uri()","uri()","uri()","uri()","usage()","use_oauth=()","use_oauth?()","valid_command?()","verbose?()","verify()","verify()","license","readme","todo"],"longSearchIndex":["actioncontroller","actioncontroller::base","actioncontroller::testrequest","digest","digest::hmac","eventmachine","eventmachine::httpclient","net","net::httpgenericrequest","oauth","oauth::accesstoken","oauth::cli","oauth::client","oauth::client::helper","oauth::consumer","oauth::consumertoken","oauth::error","oauth::helper","oauth::oauthtesthelper","oauth::problem","oauth::requestproxy","oauth::requestproxy::actioncontrollerrequest","oauth::requestproxy::base","oauth::requestproxy::curl","oauth::requestproxy::curl::easy","oauth::requestproxy::eventmachine","oauth::requestproxy::eventmachine::httprequest","oauth::requestproxy::jabberrequest","oauth::requestproxy::mockrequest","oauth::requestproxy::net","oauth::requestproxy::net::http","oauth::requestproxy::net::http::httprequest","oauth::requestproxy::rackrequest","oauth::requestproxy::typhoeus","oauth::requestproxy::typhoeus::request","oauth::requestproxy::unknownrequesttype","oauth::requesttoken","oauth::server","oauth::servertoken","oauth::signature","oauth::signature::base","oauth::signature::hmac","oauth::signature::hmac::base","oauth::signature::hmac::md5","oauth::signature::hmac::rmd160","oauth::signature::hmac::sha1","oauth::signature::hmac::sha2","oauth::signature::md5","oauth::signature::plaintext","oauth::signature::rsa","oauth::signature::rsa::sha1","oauth::signature::sha1","oauth::signature::unknownsignaturemethod","oauth::token","oauth::unauthorized","object","string","digest::hmac#<<()","oauth::signature::base#==()","oauth::signature::plaintext#==()","oauth::signature::rsa::sha1#==()","oauth::consumer#access_token_path()","oauth::server#access_token_path()","oauth::consumer#access_token_url()","oauth::server#access_token_url()","oauth::consumer#access_token_url?()","oauth::requestproxy::eventmachine::httprequest#all_parameters()","oauth::client::helper#amend_user_agent_header()","actioncontroller::testrequest#apply_oauth!()","oauth::consumer#authorize_path()","oauth::server#authorize_path()","oauth::consumer#authorize_url()","oauth::requesttoken#authorize_url()","oauth::server#authorize_url()","oauth::consumer#authorize_url?()","oauth::signature::available_methods()","digest::hmac#block_length()","oauth::requestproxy::net::http::httprequest#body()","oauth::signature::body_hash()","oauth::signature::base#body_hash()","oauth::signature::build()","oauth::requesttoken#build_authorize_url()","string#bytes()","string#bytesize()","oauth::requesttoken#callback_confirmed?()","eventmachine::httpclient#combine_query()","actioncontroller::testrequest#configure_oauth()","oauth::requestproxy::base#consumer_key()","oauth::server#create_consumer()","oauth::consumer#create_http()","oauth::consumer#create_http_request()","oauth::consumer#create_signed_request()","oauth::accesstoken#delete()","oauth::signature::base::digest_class()","oauth::signature::base::digest_klass()","digest::hmac#digest_length()","oauth::helper#escape()","oauth::cli#execute()","oauth::cli::execute()","oauth::cli#extract_command_and_parse_options()","oauth::consumertoken::from_hash()","oauth::server#generate_consumer_credentials()","oauth::server#generate_credentials()","oauth::helper#generate_key()","oauth::helper#generate_nonce()","oauth::accesstoken#get()","oauth::consumer#get_access_token()","oauth::requesttoken#get_access_token()","oauth::consumer#get_request_token()","oauth::client::helper#hash_body()","oauth::signature::base::hash_class()","oauth::accesstoken#head()","oauth::client::helper#header()","oauth::requestproxy::base#header_params()","oauth::consumer#http()","oauth::consumer#http_method()","oauth::signature::base::implements()","digest::hmac#initialize_copy()","digest::hmac#inspect()","oauth::consumer#marshal_dump()","oauth::consumer#marshal_load()","oauth::requestproxy::eventmachine::httprequest#merged_parameters()","oauth::requestproxy::actioncontrollerrequest#method()","oauth::requestproxy::curl::easy#method()","oauth::requestproxy::eventmachine::httprequest#method()","oauth::requestproxy::jabberrequest#method()","oauth::requestproxy::mockrequest#method()","oauth::requestproxy::net::http::httprequest#method()","oauth::requestproxy::rackrequest#method()","oauth::requestproxy::typhoeus::request#method()","oauth::oauthtesthelper#mock_incoming_request_with_authorize_header()","oauth::oauthtesthelper#mock_incoming_request_with_query()","digest::hmac::new()","oauth::cli::new()","oauth::client::helper::new()","oauth::consumer::new()","oauth::consumertoken::new()","oauth::problem::new()","oauth::requestproxy::base::new()","oauth::server::new()","oauth::servertoken::new()","oauth::signature::base::new()","oauth::token::new()","oauth::unauthorized::new()","oauth::requestproxy::base#non_oauth_parameters()","oauth::client::helper#nonce()","oauth::requestproxy::base#nonce()","oauth::helper#normalize()","oauth::helper#normalize_nested_query()","eventmachine::httpclient#normalize_uri()","eventmachine::httpclient#normalized_oauth_uri()","oauth::requestproxy::base#normalized_parameters()","oauth::requestproxy::base#normalized_uri()","oauth::requestproxy::jabberrequest#normalized_uri()","oauth::requestproxy::mockrequest#normalized_uri()","eventmachine::httpclient#oauth!()","net::httpgenericrequest#oauth!()","oauth::requestproxy::base#oauth_callback()","oauth::requestproxy::base#oauth_consumer_key()","oauth::requestproxy::base#oauth_header()","oauth::requestproxy::base#oauth_nonce()","oauth::client::helper#oauth_parameters()","oauth::requestproxy::base#oauth_parameters()","oauth::requestproxy::base#oauth_signature()","oauth::requestproxy::base#oauth_signature_method()","oauth::requestproxy::base#oauth_timestamp()","oauth::requestproxy::base#oauth_token()","oauth::requestproxy::base#oauth_verifier()","oauth::requestproxy::base#oauth_version()","oauth::cli#option_parser()","oauth::client::helper#options()","oauth::client::helper#parameters()","oauth::requestproxy::actioncontrollerrequest#parameters()","oauth::requestproxy::base#parameters()","oauth::requestproxy::curl::easy#parameters()","oauth::requestproxy::eventmachine::httprequest#parameters()","oauth::requestproxy::jabberrequest#parameters()","oauth::requestproxy::mockrequest#parameters()","oauth::requestproxy::net::http::httprequest#parameters()","oauth::requestproxy::rackrequest#parameters()","oauth::requestproxy::typhoeus::request#parameters()","oauth::requestproxy::actioncontrollerrequest#parameters_for_signature()","oauth::requestproxy::base#parameters_for_signature()","oauth::client::helper#parameters_with_oauth()","oauth::helper#parse_header()","oauth::cli#parse_options()","oauth::accesstoken#post()","oauth::requestproxy::eventmachine::httprequest#post_parameters()","oauth::cli#prepare_parameters()","actioncontroller::base#process_with_new_base_test()","actioncontroller::base#process_with_oauth()","oauth::requestproxy::base::proxies()","oauth::consumer#proxy()","oauth::requestproxy::proxy()","oauth::signature::rsa::sha1#public_key()","oauth::accesstoken#put()","oauth::requestproxy::eventmachine::httprequest#query_parameters()","oauth::requestproxy::actioncontrollerrequest#query_params()","oauth::requestproxy::rackrequest#query_params()","oauth::requestproxy::base#query_string_blank?()","oauth::accesstoken#request()","oauth::consumer#request()","oauth::consumertoken#request()","oauth::consumer#request_endpoint()","oauth::requestproxy::actioncontrollerrequest#request_params()","oauth::requestproxy::rackrequest#request_params()","oauth::consumer#request_token_path()","oauth::server#request_token_path()","oauth::consumer#request_token_url()","oauth::server#request_token_url()","oauth::consumer#request_token_url?()","digest::hmac#reset()","oauth::consumer#scheme()","oauth::signature::plaintext#secret()","eventmachine::httpclient#set_oauth_body()","actioncontroller::testrequest#set_oauth_header()","eventmachine::httpclient#set_oauth_header()","actioncontroller::testrequest#set_oauth_parameters()","actioncontroller::testrequest#set_oauth_query_string()","eventmachine::httpclient#set_oauth_query_string()","oauth::requestproxy::base#sign()","oauth::signature::sign()","oauth::consumer#sign!()","oauth::consumertoken#sign!()","oauth::requestproxy::base#sign!()","oauth::client::helper#signature()","oauth::requestproxy::base#signature()","oauth::requestproxy::rackrequest#signature()","oauth::signature::base#signature()","oauth::signature::plaintext#signature()","eventmachine::httpclient#signature_base_string()","net::httpgenericrequest#signature_base_string()","oauth::client::helper#signature_base_string()","oauth::consumer#signature_base_string()","oauth::requestproxy::base#signature_base_string()","oauth::signature::signature_base_string()","oauth::signature::base#signature_base_string()","oauth::signature::md5#signature_base_string()","oauth::signature::plaintext#signature_base_string()","oauth::signature::sha1#signature_base_string()","oauth::requestproxy::base#signature_method()","oauth::requestproxy::base#signed?()","oauth::requestproxy::base#signed_uri()","oauth::consumer#site()","oauth::helper#stringify_keys()","oauth::cli#sufficient_options?()","object#tap()","oauth::client::helper#timestamp()","oauth::requestproxy::base#timestamp()","oauth::token#to_query()","oauth::problem#to_s()","oauth::unauthorized#to_s()","oauth::requestproxy::base#token()","oauth::consumer#token_request()","oauth::helper#unescape()","digest::hmac#update()","oauth::consumer#uri()","oauth::requestproxy::actioncontrollerrequest#uri()","oauth::requestproxy::curl::easy#uri()","oauth::requestproxy::eventmachine::httprequest#uri()","oauth::requestproxy::jabberrequest#uri()","oauth::requestproxy::mockrequest#uri()","oauth::requestproxy::net::http::httprequest#uri()","oauth::requestproxy::rackrequest#uri()","oauth::requestproxy::typhoeus::request#uri()","oauth::cli#usage()","actioncontroller::testrequest::use_oauth=()","actioncontroller::testrequest::use_oauth?()","oauth::cli#valid_command?()","oauth::cli#verbose?()","oauth::signature::verify()","oauth::signature::base#verify()","","",""],"info":[["ActionController","","ActionController.html","",""],["ActionController::Base","","ActionController/Base.html","",""],["ActionController::TestRequest","","ActionController/TestRequest.html","",""],["Digest","","Digest.html","",""],["Digest::HMAC","","Digest/HMAC.html","",""],["EventMachine","","EventMachine.html","",""],["EventMachine::HttpClient","","EventMachine/HttpClient.html","","<p>Extensions for em-http so that we can use consumer.sign! with an\nEventMachine::HttpClient instance.  …\n"],["Net","","Net.html","",""],["Net::HTTPGenericRequest","","Net/HTTPGenericRequest.html","",""],["OAuth","","OAuth.html","",""],["OAuth::AccessToken","","OAuth/AccessToken.html","","<p>The Access Token is used for the actual “real” web service calls that you\nperform against the …\n"],["OAuth::CLI","","OAuth/CLI.html","",""],["OAuth::Client","","OAuth/Client.html","",""],["OAuth::Client::Helper","","OAuth/Client/Helper.html","",""],["OAuth::Consumer","","OAuth/Consumer.html","",""],["OAuth::ConsumerToken","","OAuth/ConsumerToken.html","","<p>Superclass for tokens used by OAuth Clients\n"],["OAuth::Error","","OAuth/Error.html","",""],["OAuth::Helper","","OAuth/Helper.html","",""],["OAuth::OAuthTestHelper","","OAuth/OAuthTestHelper.html","",""],["OAuth::Problem","","OAuth/Problem.html","",""],["OAuth::RequestProxy","","OAuth/RequestProxy.html","",""],["OAuth::RequestProxy::ActionControllerRequest","","OAuth/RequestProxy/ActionControllerRequest.html","",""],["OAuth::RequestProxy::Base","","OAuth/RequestProxy/Base.html","",""],["OAuth::RequestProxy::Curl","","OAuth/RequestProxy/Curl.html","",""],["OAuth::RequestProxy::Curl::Easy","","OAuth/RequestProxy/Curl/Easy.html","",""],["OAuth::RequestProxy::EventMachine","","OAuth/RequestProxy/EventMachine.html","",""],["OAuth::RequestProxy::EventMachine::HttpRequest","","OAuth/RequestProxy/EventMachine/HttpRequest.html","",""],["OAuth::RequestProxy::JabberRequest","","OAuth/RequestProxy/JabberRequest.html","",""],["OAuth::RequestProxy::MockRequest","","OAuth/RequestProxy/MockRequest.html","","<p>RequestProxy for Hashes to facilitate simpler signature creation. Usage:\n\n<pre>request = OAuth::RequestProxy.proxy ...</pre>\n"],["OAuth::RequestProxy::Net","","OAuth/RequestProxy/Net.html","",""],["OAuth::RequestProxy::Net::HTTP","","OAuth/RequestProxy/Net/HTTP.html","",""],["OAuth::RequestProxy::Net::HTTP::HTTPRequest","","OAuth/RequestProxy/Net/HTTP/HTTPRequest.html","",""],["OAuth::RequestProxy::RackRequest","","OAuth/RequestProxy/RackRequest.html","",""],["OAuth::RequestProxy::Typhoeus","","OAuth/RequestProxy/Typhoeus.html","",""],["OAuth::RequestProxy::Typhoeus::Request","","OAuth/RequestProxy/Typhoeus/Request.html","",""],["OAuth::RequestProxy::UnknownRequestType","","OAuth/RequestProxy/UnknownRequestType.html","",""],["OAuth::RequestToken","","OAuth/RequestToken.html","","<p>The RequestToken is used for the initial Request. This is normally created\nby the Consumer object.\n"],["OAuth::Server","","OAuth/Server.html","","<p>This is mainly used to create consumer credentials and can pretty much be\nignored if you want to create …\n"],["OAuth::ServerToken","","OAuth/ServerToken.html","","<p>Used on the server for generating tokens\n"],["OAuth::Signature","","OAuth/Signature.html","",""],["OAuth::Signature::Base","","OAuth/Signature/Base.html","",""],["OAuth::Signature::HMAC","","OAuth/Signature/HMAC.html","",""],["OAuth::Signature::HMAC::Base","","OAuth/Signature/HMAC/Base.html","",""],["OAuth::Signature::HMAC::MD5","","OAuth/Signature/HMAC/MD5.html","",""],["OAuth::Signature::HMAC::RMD160","","OAuth/Signature/HMAC/RMD160.html","",""],["OAuth::Signature::HMAC::SHA1","","OAuth/Signature/HMAC/SHA1.html","",""],["OAuth::Signature::HMAC::SHA2","","OAuth/Signature/HMAC/SHA2.html","",""],["OAuth::Signature::MD5","","OAuth/Signature/MD5.html","",""],["OAuth::Signature::PLAINTEXT","","OAuth/Signature/PLAINTEXT.html","",""],["OAuth::Signature::RSA","","OAuth/Signature/RSA.html","",""],["OAuth::Signature::RSA::SHA1","","OAuth/Signature/RSA/SHA1.html","",""],["OAuth::Signature::SHA1","","OAuth/Signature/SHA1.html","",""],["OAuth::Signature::UnknownSignatureMethod","","OAuth/Signature/UnknownSignatureMethod.html","",""],["OAuth::Token","","OAuth/Token.html","","<p>Superclass for the various tokens used by OAuth\n"],["OAuth::Unauthorized","","OAuth/Unauthorized.html","",""],["Object","","Object.html","","<p>these are to backport methods from 1.8.7/1.9.1 to 1.8.6\n"],["String","","String.html","",""],["<<","Digest::HMAC","Digest/HMAC.html#method-i-3C-3C","(text)",""],["==","OAuth::Signature::Base","OAuth/Signature/Base.html#method-i-3D-3D","(cmp_signature)",""],["==","OAuth::Signature::PLAINTEXT","OAuth/Signature/PLAINTEXT.html#method-i-3D-3D","(cmp_signature)",""],["==","OAuth::Signature::RSA::SHA1","OAuth/Signature/RSA/SHA1.html#method-i-3D-3D","(cmp_signature)",""],["access_token_path","OAuth::Consumer","OAuth/Consumer.html#method-i-access_token_path","()",""],["access_token_path","OAuth::Server","OAuth/Server.html#method-i-access_token_path","()",""],["access_token_url","OAuth::Consumer","OAuth/Consumer.html#method-i-access_token_url","()",""],["access_token_url","OAuth::Server","OAuth/Server.html#method-i-access_token_url","()",""],["access_token_url?","OAuth::Consumer","OAuth/Consumer.html#method-i-access_token_url-3F","()",""],["all_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-all_parameters","()",""],["amend_user_agent_header","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-amend_user_agent_header","(headers)",""],["apply_oauth!","ActionController::TestRequest","ActionController/TestRequest.html#method-i-apply_oauth-21","()",""],["authorize_path","OAuth::Consumer","OAuth/Consumer.html#method-i-authorize_path","()",""],["authorize_path","OAuth::Server","OAuth/Server.html#method-i-authorize_path","()",""],["authorize_url","OAuth::Consumer","OAuth/Consumer.html#method-i-authorize_url","()",""],["authorize_url","OAuth::RequestToken","OAuth/RequestToken.html#method-i-authorize_url","(params = nil)","<p>Generate an authorization URL for user authorization\n"],["authorize_url","OAuth::Server","OAuth/Server.html#method-i-authorize_url","()",""],["authorize_url?","OAuth::Consumer","OAuth/Consumer.html#method-i-authorize_url-3F","()",""],["available_methods","OAuth::Signature","OAuth/Signature.html#method-c-available_methods","()","<p>Returns a list of available signature methods\n"],["block_length","Digest::HMAC","Digest/HMAC.html#method-i-block_length","()",""],["body","OAuth::RequestProxy::Net::HTTP::HTTPRequest","OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#method-i-body","()",""],["body_hash","OAuth::Signature","OAuth/Signature.html#method-c-body_hash","(request, options = {}, &block)","<p>Create the body hash for a request\n"],["body_hash","OAuth::Signature::Base","OAuth/Signature/Base.html#method-i-body_hash","()",""],["build","OAuth::Signature","OAuth/Signature.html#method-c-build","(request, options = {}, &block)","<p>Build a signature from a <code>request</code>.\n<p>Raises UnknownSignatureMethod exception if the signature method is unknown.\n…\n"],["build_authorize_url","OAuth::RequestToken","OAuth/RequestToken.html#method-i-build_authorize_url","(base_url, params)","<p>construct an authorization url\n"],["bytes","String","String.html#method-i-bytes","()",""],["bytesize","String","String.html#method-i-bytesize","()",""],["callback_confirmed?","OAuth::RequestToken","OAuth/RequestToken.html#method-i-callback_confirmed-3F","()",""],["combine_query","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-combine_query","(path, query, uri_query)",""],["configure_oauth","ActionController::TestRequest","ActionController/TestRequest.html#method-i-configure_oauth","(consumer = nil, token = nil, options = {})",""],["consumer_key","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-consumer_key","()","<p>TODO deprecate these\n"],["create_consumer","OAuth::Server","OAuth/Server.html#method-i-create_consumer","()","<p>mainly for testing purposes\n"],["create_http","OAuth::Consumer","OAuth/Consumer.html#method-i-create_http","(_url = nil)","<p>Instantiates the http object\n"],["create_http_request","OAuth::Consumer","OAuth/Consumer.html#method-i-create_http_request","(http_method, path, *arguments)","<p>create the http request object for a given http_method and path\n"],["create_signed_request","OAuth::Consumer","OAuth/Consumer.html#method-i-create_signed_request","(http_method, path, token = nil, request_options = {}, *arguments)","<p>Creates and signs an http request. It’s recommended to use the Token\nclasses to set this up correctly …\n"],["delete","OAuth::AccessToken","OAuth/AccessToken.html#method-i-delete","(path, headers = {})","<p>Make a regular DELETE request using AccessToken\n\n<pre>@response = @token.delete('/people/123')\n@response = @token.delete('/people/123', ...</pre>\n"],["digest_class","OAuth::Signature::Base","OAuth/Signature/Base.html#method-c-digest_class","(digest_class = nil)",""],["digest_klass","OAuth::Signature::Base","OAuth/Signature/Base.html#method-c-digest_klass","(digest_klass = nil)",""],["digest_length","Digest::HMAC","Digest/HMAC.html#method-i-digest_length","()",""],["escape","OAuth::Helper","OAuth/Helper.html#method-i-escape","(value)","<p>Escape <code>value</code> by URL encoding all non-reserved character.\n<p>See Also: OAuth core spec version 1.0, section …\n"],["execute","OAuth::CLI","OAuth/CLI.html#method-i-execute","(stdout, stdin, stderr, arguments = [])",""],["execute","OAuth::CLI","OAuth/CLI.html#method-c-execute","(stdout, stdin, stderr, arguments = [])",""],["extract_command_and_parse_options","OAuth::CLI","OAuth/CLI.html#method-i-extract_command_and_parse_options","(arguments)",""],["from_hash","OAuth::ConsumerToken","OAuth/ConsumerToken.html#method-c-from_hash","(consumer, hash)",""],["generate_consumer_credentials","OAuth::Server","OAuth/Server.html#method-i-generate_consumer_credentials","(params = {})",""],["generate_credentials","OAuth::Server","OAuth/Server.html#method-i-generate_credentials","()",""],["generate_key","OAuth::Helper","OAuth/Helper.html#method-i-generate_key","(size=32)","<p>Generate a random key of up to <code>size</code> bytes. The value returned\nis Base64 encoded with non-word characters …\n"],["generate_nonce","OAuth::Helper","OAuth/Helper.html#method-i-generate_nonce","(size=32)",""],["get","OAuth::AccessToken","OAuth/AccessToken.html#method-i-get","(path, headers = {})","<p>Make a regular GET request using AccessToken\n\n<pre>@response = @token.get('/people')\n@response = @token.get('/people', ...</pre>\n"],["get_access_token","OAuth::Consumer","OAuth/Consumer.html#method-i-get_access_token","(request_token, request_options = {}, *arguments, &block)",""],["get_access_token","OAuth::RequestToken","OAuth/RequestToken.html#method-i-get_access_token","(options = {}, *arguments)","<p>exchange for AccessToken on server\n"],["get_request_token","OAuth::Consumer","OAuth/Consumer.html#method-i-get_request_token","(request_options = {}, *arguments, &block)","<p>Makes a request to the service for a new OAuth::RequestToken\n\n<pre>@request_token = @consumer.get_request_token</pre>\n"],["hash_body","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-hash_body","()",""],["hash_class","OAuth::Signature::Base","OAuth/Signature/Base.html#method-c-hash_class","(hash_class = nil)",""],["head","OAuth::AccessToken","OAuth/AccessToken.html#method-i-head","(path, headers = {})","<p>Make a regular HEAD request using AccessToken\n\n<pre>@response = @token.head('/people')</pre>\n"],["header","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-header","()",""],["header_params","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-header_params","()",""],["http","OAuth::Consumer","OAuth/Consumer.html#method-i-http","()","<p>The HTTP object for the site. The HTTP Object is what you get when you do\nNet::HTTP.new\n"],["http_method","OAuth::Consumer","OAuth/Consumer.html#method-i-http_method","()","<p>The default http method\n"],["implements","OAuth::Signature::Base","OAuth/Signature/Base.html#method-c-implements","(signature_method = nil)",""],["initialize_copy","Digest::HMAC","Digest/HMAC.html#method-i-initialize_copy","(other)",""],["inspect","Digest::HMAC","Digest/HMAC.html#method-i-inspect","()",""],["marshal_dump","OAuth::Consumer","OAuth/Consumer.html#method-i-marshal_dump","(*args)",""],["marshal_load","OAuth::Consumer","OAuth/Consumer.html#method-i-marshal_load","(data)",""],["merged_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-merged_parameters","(params, *extra_params)",""],["method","OAuth::RequestProxy::ActionControllerRequest","OAuth/RequestProxy/ActionControllerRequest.html#method-i-method","()",""],["method","OAuth::RequestProxy::Curl::Easy","OAuth/RequestProxy/Curl/Easy.html#method-i-method","()",""],["method","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-method","()","<p>Request in this con\n"],["method","OAuth::RequestProxy::JabberRequest","OAuth/RequestProxy/JabberRequest.html#method-i-method","()",""],["method","OAuth::RequestProxy::MockRequest","OAuth/RequestProxy/MockRequest.html#method-i-method","()",""],["method","OAuth::RequestProxy::Net::HTTP::HTTPRequest","OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#method-i-method","()",""],["method","OAuth::RequestProxy::RackRequest","OAuth/RequestProxy/RackRequest.html#method-i-method","()",""],["method","OAuth::RequestProxy::Typhoeus::Request","OAuth/RequestProxy/Typhoeus/Request.html#method-i-method","()",""],["mock_incoming_request_with_authorize_header","OAuth::OAuthTestHelper","OAuth/OAuthTestHelper.html#method-i-mock_incoming_request_with_authorize_header","(request)",""],["mock_incoming_request_with_query","OAuth::OAuthTestHelper","OAuth/OAuthTestHelper.html#method-i-mock_incoming_request_with_query","(request)",""],["new","Digest::HMAC","Digest/HMAC.html#method-c-new","(key, digester)",""],["new","OAuth::CLI","OAuth/CLI.html#method-c-new","()",""],["new","OAuth::Client::Helper","OAuth/Client/Helper.html#method-c-new","(request, options = {})",""],["new","OAuth::Consumer","OAuth/Consumer.html#method-c-new","(consumer_key, consumer_secret, options = {})","<p>Create a new consumer instance by passing it a configuration hash:\n\n<pre>@consumer = OAuth::Consumer.new(key, ...</pre>\n"],["new","OAuth::ConsumerToken","OAuth/ConsumerToken.html#method-c-new","(consumer, token=\"\", secret=\"\")",""],["new","OAuth::Problem","OAuth/Problem.html#method-c-new","(problem, request = nil, params = {})",""],["new","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-c-new","(request, options = {})",""],["new","OAuth::Server","OAuth/Server.html#method-c-new","(base_url, paths = {})","<p>Create a new server instance\n"],["new","OAuth::ServerToken","OAuth/ServerToken.html#method-c-new","()",""],["new","OAuth::Signature::Base","OAuth/Signature/Base.html#method-c-new","(request, options = {}, &block)",""],["new","OAuth::Token","OAuth/Token.html#method-c-new","(token, secret)",""],["new","OAuth::Unauthorized","OAuth/Unauthorized.html#method-c-new","(request = nil)",""],["non_oauth_parameters","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-non_oauth_parameters","()",""],["nonce","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-nonce","()",""],["nonce","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-nonce","()",""],["normalize","OAuth::Helper","OAuth/Helper.html#method-i-normalize","(params)","<p>Normalize a <code>Hash</code> of parameter values. Parameters are sorted by\nname, using lexicographical byte value …\n"],["normalize_nested_query","OAuth::Helper","OAuth/Helper.html#method-i-normalize_nested_query","(value, prefix = nil)","<p>Returns a string representation of the Hash like in URL query string\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">build_nested_query</span>({:<span class=\"ruby-identifier\">level_1</span> =<span class=\"ruby-operator\">&gt;</span> {:<span class=\"ruby-identifier\">level_2</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["normalize_uri","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-normalize_uri","()","<p>This code was lifted from the em-http-request because it was removed from\nthe gem June 19, 2010 see: …\n"],["normalized_oauth_uri","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-normalized_oauth_uri","(http)","<p>Since we expect to get the host etc details from the http instance (…), we\ncreate a fake url here. …\n"],["normalized_parameters","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-normalized_parameters","()","<p>See 9.1.1. in specs Normalize Request Parameters\n"],["normalized_uri","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-normalized_uri","()","<p>See 9.1.2 in specs\n"],["normalized_uri","OAuth::RequestProxy::JabberRequest","OAuth/RequestProxy/JabberRequest.html#method-i-normalized_uri","()",""],["normalized_uri","OAuth::RequestProxy::MockRequest","OAuth/RequestProxy/MockRequest.html#method-i-normalized_uri","()",""],["oauth!","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-oauth-21","(http, consumer = nil, token = nil, options = {})","<p>Add the OAuth information to an HTTP request. Depending on the\n<code>options[:scheme]</code> setting this may add …\n"],["oauth!","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-oauth-21","(http, consumer = nil, token = nil, options = {})","<p>Add the OAuth information to an HTTP request. Depending on the\n<code>options[:scheme]</code> setting this may add …\n"],["oauth_callback","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_callback","()","<p>OAuth parameters\n"],["oauth_consumer_key","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_consumer_key","()",""],["oauth_header","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_header","(options = {})","<p>Authorization header for OAuth\n"],["oauth_nonce","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_nonce","()",""],["oauth_parameters","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-oauth_parameters","()",""],["oauth_parameters","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_parameters","()",""],["oauth_signature","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_signature","()",""],["oauth_signature_method","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_signature_method","()",""],["oauth_timestamp","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_timestamp","()",""],["oauth_token","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_token","()",""],["oauth_verifier","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_verifier","()",""],["oauth_version","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-oauth_version","()",""],["option_parser","OAuth::CLI","OAuth/CLI.html#method-i-option_parser","(arguments = \"\")",""],["options","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-options","()",""],["parameters","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::ActionControllerRequest","OAuth/RequestProxy/ActionControllerRequest.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-parameters","()","<p>Parameter accessors\n"],["parameters","OAuth::RequestProxy::Curl::Easy","OAuth/RequestProxy/Curl/Easy.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::JabberRequest","OAuth/RequestProxy/JabberRequest.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::MockRequest","OAuth/RequestProxy/MockRequest.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::Net::HTTP::HTTPRequest","OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::RackRequest","OAuth/RequestProxy/RackRequest.html#method-i-parameters","()",""],["parameters","OAuth::RequestProxy::Typhoeus::Request","OAuth/RequestProxy/Typhoeus/Request.html#method-i-parameters","()",""],["parameters_for_signature","OAuth::RequestProxy::ActionControllerRequest","OAuth/RequestProxy/ActionControllerRequest.html#method-i-parameters_for_signature","()","<p>Override from OAuth::RequestProxy::Base to avoid roundtrip conversion to\nHash or Array and thus preserve …\n"],["parameters_for_signature","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-parameters_for_signature","()",""],["parameters_with_oauth","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-parameters_with_oauth","()",""],["parse_header","OAuth::Helper","OAuth/Helper.html#method-i-parse_header","(header)","<p>Parse an Authorization / WWW-Authenticate header into a hash. Takes care of\nunescaping and removing surrounding …\n"],["parse_options","OAuth::CLI","OAuth/CLI.html#method-i-parse_options","(arguments)",""],["post","OAuth::AccessToken","OAuth/AccessToken.html#method-i-post","(path, body = '', headers = {})","<p>Make a regular POST request using AccessToken\n\n<pre>@response = @token.post('/people')\n@response = @token.post('/people', ...</pre>\n"],["post_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-post_parameters","()",""],["prepare_parameters","OAuth::CLI","OAuth/CLI.html#method-i-prepare_parameters","()",""],["process_with_new_base_test","ActionController::Base","ActionController/Base.html#method-i-process_with_new_base_test","(request, response=nil)",""],["process_with_oauth","ActionController::Base","ActionController/Base.html#method-i-process_with_oauth","(request, response=nil)",""],["proxies","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-c-proxies","(klass)",""],["proxy","OAuth::Consumer","OAuth/Consumer.html#method-i-proxy","()",""],["proxy","OAuth::RequestProxy","OAuth/RequestProxy.html#method-c-proxy","(request, options = {})",""],["public_key","OAuth::Signature::RSA::SHA1","OAuth/Signature/RSA/SHA1.html#method-i-public_key","()",""],["put","OAuth::AccessToken","OAuth/AccessToken.html#method-i-put","(path, body = '', headers = {})","<p>Make a regular PUT request using AccessToken\n\n<pre>@response = @token.put('/people/123')\n@response = @token.put('/people/123', ...</pre>\n"],["query_parameters","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-query_parameters","()",""],["query_params","OAuth::RequestProxy::ActionControllerRequest","OAuth/RequestProxy/ActionControllerRequest.html#method-i-query_params","()",""],["query_params","OAuth::RequestProxy::RackRequest","OAuth/RequestProxy/RackRequest.html#method-i-query_params","()",""],["query_string_blank?","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-query_string_blank-3F","()",""],["request","OAuth::AccessToken","OAuth/AccessToken.html#method-i-request","(http_method, path, *arguments)","<p>The less intrusive way. Otherwise, if we are to do it correctly inside\nconsumer, we need to restructure …\n"],["request","OAuth::Consumer","OAuth/Consumer.html#method-i-request","(http_method, path, token = nil, request_options = {}, *arguments)","<p>Creates, signs and performs an http request. It’s recommended to use the\nOAuth::Token classes to set …\n"],["request","OAuth::ConsumerToken","OAuth/ConsumerToken.html#method-i-request","(http_method, path, *arguments)","<p>Make a signed request using given http_method to the path\n\n<pre>@token.request(:get,  '/people')\n@token.request(:post, ...</pre>\n"],["request_endpoint","OAuth::Consumer","OAuth/Consumer.html#method-i-request_endpoint","()",""],["request_params","OAuth::RequestProxy::ActionControllerRequest","OAuth/RequestProxy/ActionControllerRequest.html#method-i-request_params","()",""],["request_params","OAuth::RequestProxy::RackRequest","OAuth/RequestProxy/RackRequest.html#method-i-request_params","()",""],["request_token_path","OAuth::Consumer","OAuth/Consumer.html#method-i-request_token_path","()",""],["request_token_path","OAuth::Server","OAuth/Server.html#method-i-request_token_path","()",""],["request_token_url","OAuth::Consumer","OAuth/Consumer.html#method-i-request_token_url","()","<p>TODO this is ugly, rewrite\n"],["request_token_url","OAuth::Server","OAuth/Server.html#method-i-request_token_url","()",""],["request_token_url?","OAuth::Consumer","OAuth/Consumer.html#method-i-request_token_url-3F","()",""],["reset","Digest::HMAC","Digest/HMAC.html#method-i-reset","()",""],["scheme","OAuth::Consumer","OAuth/Consumer.html#method-i-scheme","()",""],["secret","OAuth::Signature::PLAINTEXT","OAuth/Signature/PLAINTEXT.html#method-i-secret","()",""],["set_oauth_body","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-set_oauth_body","()",""],["set_oauth_header","ActionController::TestRequest","ActionController/TestRequest.html#method-i-set_oauth_header","()",""],["set_oauth_header","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-set_oauth_header","()",""],["set_oauth_parameters","ActionController::TestRequest","ActionController/TestRequest.html#method-i-set_oauth_parameters","()",""],["set_oauth_query_string","ActionController::TestRequest","ActionController/TestRequest.html#method-i-set_oauth_query_string","()",""],["set_oauth_query_string","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-set_oauth_query_string","()",""],["sign","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-sign","(options = {})",""],["sign","OAuth::Signature","OAuth/Signature.html#method-c-sign","(request, options = {}, &block)","<p>Sign a <code>request</code>\n"],["sign!","OAuth::Consumer","OAuth/Consumer.html#method-i-sign-21","(request, token = nil, request_options = {})","<p>Sign the Request object. Use this if you have an externally generated http\nrequest object you want to …\n"],["sign!","OAuth::ConsumerToken","OAuth/ConsumerToken.html#method-i-sign-21","(request, options = {})","<p>Sign a request generated elsewhere using Net:HTTP::Post.new or friends\n"],["sign!","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-sign-21","(options = {})",""],["signature","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-signature","(extra_options = {})",""],["signature","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-signature","()",""],["signature","OAuth::RequestProxy::RackRequest","OAuth/RequestProxy/RackRequest.html#method-i-signature","()",""],["signature","OAuth::Signature::Base","OAuth/Signature/Base.html#method-i-signature","()",""],["signature","OAuth::Signature::PLAINTEXT","OAuth/Signature/PLAINTEXT.html#method-i-signature","()",""],["signature_base_string","EventMachine::HttpClient","EventMachine/HttpClient.html#method-i-signature_base_string","(http, consumer = nil, token = nil, options = {})","<p>Create a string suitable for signing for an HTTP request. This process\ninvolves parameter normalization …\n"],["signature_base_string","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-signature_base_string","(http, consumer = nil, token = nil, options = {})","<p>Create a string suitable for signing for an HTTP request. This process\ninvolves parameter normalization …\n"],["signature_base_string","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-signature_base_string","(extra_options = {})",""],["signature_base_string","OAuth::Consumer","OAuth/Consumer.html#method-i-signature_base_string","(request, token = nil, request_options = {})","<p>Return the signature_base_string\n"],["signature_base_string","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-signature_base_string","()","<p>See 9.1 in specs\n"],["signature_base_string","OAuth::Signature","OAuth/Signature.html#method-c-signature_base_string","(request, options = {}, &block)","<p>Create the signature base string for <code>request</code>. This string is\nthe normalized parameter information.\n<p>See …\n"],["signature_base_string","OAuth::Signature::Base","OAuth/Signature/Base.html#method-i-signature_base_string","()",""],["signature_base_string","OAuth::Signature::MD5","OAuth/Signature/MD5.html#method-i-signature_base_string","()",""],["signature_base_string","OAuth::Signature::PLAINTEXT","OAuth/Signature/PLAINTEXT.html#method-i-signature_base_string","()",""],["signature_base_string","OAuth::Signature::SHA1","OAuth/Signature/SHA1.html#method-i-signature_base_string","()",""],["signature_method","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-signature_method","()",""],["signed?","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-signed-3F","()","<p>Has this request been signed yet?\n"],["signed_uri","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-signed_uri","(with_oauth = true)","<p>URI, including OAuth parameters\n"],["site","OAuth::Consumer","OAuth/Consumer.html#method-i-site","()",""],["stringify_keys","OAuth::Helper","OAuth/Helper.html#method-i-stringify_keys","(hash)",""],["sufficient_options?","OAuth::CLI","OAuth/CLI.html#method-i-sufficient_options-3F","()",""],["tap","Object","Object.html#method-i-tap","()",""],["timestamp","OAuth::Client::Helper","OAuth/Client/Helper.html#method-i-timestamp","()",""],["timestamp","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-timestamp","()",""],["to_query","OAuth::Token","OAuth/Token.html#method-i-to_query","()",""],["to_s","OAuth::Problem","OAuth/Problem.html#method-i-to_s","()",""],["to_s","OAuth::Unauthorized","OAuth/Unauthorized.html#method-i-to_s","()",""],["token","OAuth::RequestProxy::Base","OAuth/RequestProxy/Base.html#method-i-token","()",""],["token_request","OAuth::Consumer","OAuth/Consumer.html#method-i-token_request","(http_method, path, token = nil, request_options = {}, *arguments)","<p>Creates a request and parses the result as url_encoded. This is used\ninternally for the RequestToken …\n"],["unescape","OAuth::Helper","OAuth/Helper.html#method-i-unescape","(value)",""],["update","Digest::HMAC","Digest/HMAC.html#method-i-update","(text)",""],["uri","OAuth::Consumer","OAuth/Consumer.html#method-i-uri","(custom_uri = nil)","<p>Contains the root URI for this site\n"],["uri","OAuth::RequestProxy::ActionControllerRequest","OAuth/RequestProxy/ActionControllerRequest.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::Curl::Easy","OAuth/RequestProxy/Curl/Easy.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::EventMachine::HttpRequest","OAuth/RequestProxy/EventMachine/HttpRequest.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::JabberRequest","OAuth/RequestProxy/JabberRequest.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::MockRequest","OAuth/RequestProxy/MockRequest.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::Net::HTTP::HTTPRequest","OAuth/RequestProxy/Net/HTTP/HTTPRequest.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::RackRequest","OAuth/RequestProxy/RackRequest.html#method-i-uri","()",""],["uri","OAuth::RequestProxy::Typhoeus::Request","OAuth/RequestProxy/Typhoeus/Request.html#method-i-uri","()",""],["usage","OAuth::CLI","OAuth/CLI.html#method-i-usage","()",""],["use_oauth=","ActionController::TestRequest","ActionController/TestRequest.html#method-c-use_oauth-3D","(bool)",""],["use_oauth?","ActionController::TestRequest","ActionController/TestRequest.html#method-c-use_oauth-3F","()",""],["valid_command?","OAuth::CLI","OAuth/CLI.html#method-i-valid_command-3F","()",""],["verbose?","OAuth::CLI","OAuth/CLI.html#method-i-verbose-3F","()",""],["verify","OAuth::Signature","OAuth/Signature.html#method-c-verify","(request, options = {}, &block)","<p>Verify the signature of <code>request</code>\n"],["verify","OAuth::Signature::Base","OAuth/Signature/Base.html#method-i-verify","()",""],["LICENSE","","LICENSE.html","","<p>Copyright © 2007 Blaine Cook, Larry Halff, Pelle Braendgaard\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_rdoc.html","","<p>Ruby OAuth\n<p>What\n<p>This is a RubyGem for implementing both OAuth clients and servers in Ruby\napplications. …\n"],["TODO","","TODO.html","","<p>Common use-cases should be streamlined:\n<p>I have a URL that I want to sign (given consumer key/secret, optional …\n"]]}}