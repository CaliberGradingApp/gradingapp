var search_data = {"index":{"searchIndex":["codeanalyzer","analyzerexception","checker","checkingvisitor","base","default","plain","nil","warning","sexp","add_callback()","add_warning()","after_check()","after_check()","all()","all_conditions()","argument()","arguments()","array_size()","array_size()","array_values()","base_class()","blank?()","blank?()","block_node()","body()","callbacks()","check()","check()","check()","check_node()","children()","class_name()","conditional_statement()","const?()","exception_classes()","exception_variable()","get_callbacks()","grep_node()","grep_nodes()","grep_nodes_count()","hash_keys()","hash_size()","hash_size()","hash_value()","hash_values()","interesting_files()","interesting_files()","interesting_nodes()","interesting_nodes()","left_value()","line_number()","message()","method_missing()","method_name()","module_name()","new()","new()","new()","new_method()","node_end()","node_start()","old_method()","parse()","parse_file?()","present?()","present?()","receiver()","recursive_children()","remove_line_and_column()","right_value()","statements()","to_object()","to_s()","to_s()","to_s()","warnings()","warnings()"],"longSearchIndex":["codeanalyzer","codeanalyzer::analyzerexception","codeanalyzer::checker","codeanalyzer::checkingvisitor","codeanalyzer::checkingvisitor::base","codeanalyzer::checkingvisitor::default","codeanalyzer::checkingvisitor::plain","codeanalyzer::nil","codeanalyzer::warning","sexp","codeanalyzer::checker::add_callback()","codeanalyzer::checker#add_warning()","codeanalyzer::checkingvisitor::base#after_check()","codeanalyzer::checkingvisitor::default#after_check()","sexp#all()","sexp#all_conditions()","sexp#argument()","sexp#arguments()","codeanalyzer::nil#array_size()","sexp#array_size()","sexp#array_values()","sexp#base_class()","codeanalyzer::nil#blank?()","sexp#blank?()","sexp#block_node()","sexp#body()","codeanalyzer::checker::callbacks()","codeanalyzer::checkingvisitor::default#check()","codeanalyzer::checkingvisitor::plain#check()","sexp#check()","codeanalyzer::checkingvisitor::default#check_node()","sexp#children()","sexp#class_name()","sexp#conditional_statement()","sexp#const?()","sexp#exception_classes()","sexp#exception_variable()","codeanalyzer::checker::get_callbacks()","sexp#grep_node()","sexp#grep_nodes()","sexp#grep_nodes_count()","sexp#hash_keys()","codeanalyzer::nil#hash_size()","sexp#hash_size()","sexp#hash_value()","sexp#hash_values()","codeanalyzer::checker::interesting_files()","codeanalyzer::checker#interesting_files()","codeanalyzer::checker#interesting_nodes()","codeanalyzer::checker::interesting_nodes()","sexp#left_value()","sexp#line_number()","sexp#message()","codeanalyzer::nil#method_missing()","sexp#method_name()","sexp#module_name()","codeanalyzer::checkingvisitor::base::new()","codeanalyzer::checkingvisitor::default::new()","codeanalyzer::warning::new()","sexp#new_method()","codeanalyzer::checker#node_end()","codeanalyzer::checker#node_start()","sexp#old_method()","codeanalyzer::checkingvisitor::default#parse()","codeanalyzer::checker#parse_file?()","codeanalyzer::nil#present?()","sexp#present?()","sexp#receiver()","sexp#recursive_children()","sexp#remove_line_and_column()","sexp#right_value()","sexp#statements()","sexp#to_object()","codeanalyzer::nil#to_s()","codeanalyzer::warning#to_s()","sexp#to_s()","codeanalyzer::checker#warnings()","codeanalyzer::checkingvisitor::base#warnings()"],"info":[["CodeAnalyzer","","CodeAnalyzer.html","",""],["CodeAnalyzer::AnalyzerException","","CodeAnalyzer/AnalyzerException.html","",""],["CodeAnalyzer::Checker","","CodeAnalyzer/Checker.html","","<p>A checker class that takes charge of checking the sexp.\n"],["CodeAnalyzer::CheckingVisitor","","CodeAnalyzer/CheckingVisitor.html","",""],["CodeAnalyzer::CheckingVisitor::Base","","CodeAnalyzer/CheckingVisitor/Base.html","","<p>Base class for checking visitor.\n"],["CodeAnalyzer::CheckingVisitor::Default","","CodeAnalyzer/CheckingVisitor/Default.html","","<p>This is the default checking visitor to check ruby sexp nodes.\n"],["CodeAnalyzer::CheckingVisitor::Plain","","CodeAnalyzer/CheckingVisitor/Plain.html","","<p>This is the checking visitor to check ruby plain code.\n"],["CodeAnalyzer::Nil","","CodeAnalyzer/Nil.html","","<p>Fake nil.\n"],["CodeAnalyzer::Warning","","CodeAnalyzer/Warning.html","","<p>Warning is the violation.\n<p>it indicates the filenname, line number and error message for the\nviolation. …\n"],["Sexp","","Sexp.html","",""],["add_callback","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-c-add_callback","(*names, &block)",""],["add_warning","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-add_warning","(message, filename = @node.file, line_number = @node.line)","<p>add an warning.\n<p>@param [String] message, is the warning message @param [String] filename,\nis the filename …\n"],["after_check","CodeAnalyzer::CheckingVisitor::Base","CodeAnalyzer/CheckingVisitor/Base.html#method-i-after_check","()",""],["after_check","CodeAnalyzer::CheckingVisitor::Default","CodeAnalyzer/CheckingVisitor/Default.html#method-i-after_check","()","<p>trigger all after_check callbacks defined in all checkers.\n"],["all","Sexp","Sexp.html#method-i-all","()","<p>Get all arguments.\n\n<pre>s(:args_add_block,\n  s(:args_add,\n    s(:args_add, s(:args_new), s(:string_literal, ...</pre>\n"],["all_conditions","Sexp","Sexp.html#method-i-all_conditions","()","<p>Get all condition nodes.\n\n<pre>s(:binary,\n  s(:binary,\n    s(:var_ref, s(:@ident, &quot;user&quot;, s(1, 0))),\n    :==, ...</pre>\n"],["argument","Sexp","Sexp.html#method-i-argument","()","<p>Get only argument for binary.\n\n<pre>s(:binary,\n  s(:var_ref, s(:@ident, &quot;user&quot;, s(1, 0))),\n  :==,\n  s(:var_ref, ...</pre>\n"],["arguments","Sexp","Sexp.html#method-i-arguments","()","<p>Get arguments node.\n\n<pre>s(:command,\n  s(:@ident, &quot;resources&quot;, s(1, 0)),\n  s(:args_add_block,\n    s(:args_add, ...</pre>\n"],["array_size","CodeAnalyzer::Nil","CodeAnalyzer/Nil.html#method-i-array_size","()","<p>array_size is 0.\n"],["array_size","Sexp","Sexp.html#method-i-array_size","()","<p>Get the array size.\n\n<pre>s(:array,\n  s(:args_add,\n    s(:args_add, s(:args_new), s(:string_literal, s(:string_add, ...</pre>\n"],["array_values","Sexp","Sexp.html#method-i-array_values","()","<p>Get the array values.\n\n<pre>s(:array,\n  s(:args_add,\n    s(:args_add, s(:args_new), s(:string_literal, s(:string_add, ...</pre>\n"],["base_class","Sexp","Sexp.html#method-i-base_class","()","<p>Get the base class of the class node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-keyword\">class</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">const_ref</span>, <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-ivar\">@const</span>, <span class=\"ruby-string\">&quot;User&quot;</span>, <span class=\"ruby-identifier\">s</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">6</span>))),\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">const_path_ref</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blank?","CodeAnalyzer::Nil","CodeAnalyzer/Nil.html#method-i-blank-3F","()","<p>true\n"],["blank?","Sexp","Sexp.html#method-i-blank-3F","()","<p>false\n"],["block_node","Sexp","Sexp.html#method-i-block_node","()","<p>Get block node.\n\n<pre>s(:method_add_block,\n  s(:command,\n    s(:@ident, &quot;resources&quot;, s(1, 0)),\n    s(:args_add_block, ...</pre>\n"],["body","Sexp","Sexp.html#method-i-body","()","<p>Get body node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-keyword\">class</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">const_ref</span>, <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-ivar\">@const</span>, <span class=\"ruby-string\">&quot;User&quot;</span>, <span class=\"ruby-identifier\">s</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">6</span>))),\n  <span class=\"ruby-keyword\">nil</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">bodystmt</span>,\n    <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">stmts_add</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["callbacks","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-c-callbacks","()",""],["check","CodeAnalyzer::CheckingVisitor::Default","CodeAnalyzer/CheckingVisitor/Default.html#method-i-check","(filename, content)","<p>check the ruby sexp nodes for the ruby file.\n<p>@param [String] filename is the filename of ruby code. @param …\n"],["check","CodeAnalyzer::CheckingVisitor::Plain","CodeAnalyzer/CheckingVisitor/Plain.html#method-i-check","(filename, content)","<p>check the ruby plain code.\n<p>@param [String] filename is the filename of ruby code. @param [String]\ncontent …\n"],["check","Sexp","Sexp.html#method-i-check","(visitor)","<p>check current node.\n<p>@param [CodeAnalyzer::CheckingVisitor::Default] visitor the visitor to\ncheck current …\n"],["check_node","CodeAnalyzer::CheckingVisitor::Default","CodeAnalyzer/CheckingVisitor/Default.html#method-i-check_node","(node)","<p>recursively check ruby sexp node.\n<p>it triggers the interesting checkers’ start callbacks.\n<p>recursively check …\n"],["children","Sexp","Sexp.html#method-i-children","()","<p>return child nodes of a sexp node.\n<p>@return [Array] child nodes.\n"],["class_name","Sexp","Sexp.html#method-i-class_name","()","<p>Get the class name of the class node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-keyword\">class</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">const_ref</span>, <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-ivar\">@const</span>, <span class=\"ruby-string\">&quot;User&quot;</span>, <span class=\"ruby-identifier\">s</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">6</span>))),\n  <span class=\"ruby-keyword\">nil</span>,\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["conditional_statement","Sexp","Sexp.html#method-i-conditional_statement","()","<p>Get the conditional statement of if node.\n\n<pre>s(:if,\n  s(:var_ref, s(:@kw, &quot;true&quot;, s(1, 3))),\n  s(:stmts_add, ...</pre>\n"],["const?","Sexp","Sexp.html#method-i-const-3F","()","<p>check if the self node is a const.\n"],["exception_classes","Sexp","Sexp.html#method-i-exception_classes","()","<p>Get expcetion class of rescue node.\n\n<pre>s(:rescue,\n  s(\n    s(:var_ref,\n      s(:@const, &quot;CustomException&quot;, ...</pre>\n"],["exception_variable","Sexp","Sexp.html#method-i-exception_variable","()","<p>Get exception variable of rescue node.\n\n<pre>s(:rescue,\n  nil,\n  s(:var_field, s(:@ident, &quot;e&quot;, s(1, 20))),\n ...</pre>\n"],["get_callbacks","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-c-get_callbacks","(name)",""],["grep_node","Sexp","Sexp.html#method-i-grep_node","(options)","<p>grep all the recursive child nodes with conditions, and yield the first\nmatch node.\n<p>@param [Hash] options …\n"],["grep_nodes","Sexp","Sexp.html#method-i-grep_nodes","(options)","<p>grep all the recursive child nodes with conditions, and yield each match\nnode.\n<p>@param [Hash] options grep …\n"],["grep_nodes_count","Sexp","Sexp.html#method-i-grep_nodes_count","(options)","<p>grep all the recursive child nodes with conditions, and get the count of\nmatch nodes.\n<p>@param [Hash] options …\n"],["hash_keys","Sexp","Sexp.html#method-i-hash_keys","()","<p>Get the hash keys.\n\n<pre>s(:hash,\n  s(:assoclist_from_args,\n    s(\n      s(:assoc_new, s(:@label, &quot;first_name:&quot;, ...</pre>\n"],["hash_size","CodeAnalyzer::Nil","CodeAnalyzer/Nil.html#method-i-hash_size","()","<p>hash_size is 0.\n"],["hash_size","Sexp","Sexp.html#method-i-hash_size","()","<p>Get hash size.\n\n<pre>s(:hash,\n  s(:assoclist_from_args,\n    s(\n      s(:assoc_new, s(:@label, &quot;first_name:&quot;, ...</pre>\n"],["hash_value","Sexp","Sexp.html#method-i-hash_value","(key)","<p>Get hash value node.\n\n<pre>s(:hash,\n  s(:assoclist_from_args,\n    s(\n      s(:assoc_new, s(:@label, &quot;first_name:&quot;, ...</pre>\n"],["hash_values","Sexp","Sexp.html#method-i-hash_values","()","<p>Get the hash values.\n\n<pre>s(:hash,\n  s(:assoclist_from_args,\n    s(\n      s(:assoc_new, s(:@label, &quot;first_name:&quot;, ...</pre>\n"],["interesting_files","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-c-interesting_files","(*file_patterns)",""],["interesting_files","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-interesting_files","()","<p>interesting files that the check will parse.\n"],["interesting_nodes","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-interesting_nodes","()","<p>interesting nodes that the check will parse.\n"],["interesting_nodes","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-c-interesting_nodes","(*nodes)",""],["left_value","Sexp","Sexp.html#method-i-left_value","()","<p>Get the left value of the assign node.\n\n<pre>s(:assign,\n  s(:var_field, s(:@ident, &quot;user&quot;, s(1, 0))),\n  s(:var_ref, ...</pre>\n"],["line_number","Sexp","Sexp.html#method-i-line_number","()","<p>return the line number of a sexp node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-ivar\">@ident</span>, <span class=\"ruby-string\">&quot;test&quot;</span>, <span class=\"ruby-identifier\">s</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">12</span>)\n  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>\n</pre>\n"],["message","Sexp","Sexp.html#method-i-message","()","<p>Get the message node.\n\n<pre>s(:command,\n  s(:@ident, &quot;has_many&quot;, s(1, 0)),\n  s(:args_add_block,\n    s(:args_add, ...</pre>\n"],["method_missing","CodeAnalyzer::Nil","CodeAnalyzer/Nil.html#method-i-method_missing","(method_sym, *arguments, &block)","<p>return self.\n"],["method_name","Sexp","Sexp.html#method-i-method_name","()","<p>Get the method name of def node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-keyword\">def</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-ivar\">@ident</span>, <span class=\"ruby-string\">&quot;show&quot;</span>, <span class=\"ruby-identifier\">s</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">4</span>)),\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">params</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-keyword\">nil</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["module_name","Sexp","Sexp.html#method-i-module_name","()","<p>Get the module name of the module node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-keyword\">module</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">const_ref</span>, <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-ivar\">@const</span>, <span class=\"ruby-string\">&quot;Admin&quot;</span>, <span class=\"ruby-identifier\">s</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">7</span>))),\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">bodystmt</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","CodeAnalyzer::CheckingVisitor::Base","CodeAnalyzer/CheckingVisitor/Base.html#method-c-new","(options={})",""],["new","CodeAnalyzer::CheckingVisitor::Default","CodeAnalyzer/CheckingVisitor/Default.html#method-c-new","(options={})",""],["new","CodeAnalyzer::Warning","CodeAnalyzer/Warning.html#method-c-new","(options={})",""],["new_method","Sexp","Sexp.html#method-i-new_method","()","<p>new method for alias node.\n\n<pre>s(:alias,\n  s(:symbol_literal, s(:@ident, &quot;new&quot;, s(1, 6))),\n  s(:symbol_literal, ...</pre>\n"],["node_end","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-node_end","(node)","<p>delegate to end_### according to the sexp_type, like\n\n<pre>end_call\nend_def</pre>\n<p>@param [Sexp] node\n"],["node_start","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-node_start","(node)","<p>delegate to start_### according to the sexp_type, like\n\n<pre>start_call\nstart_def</pre>\n<p>@param [Sexp] node\n"],["old_method","Sexp","Sexp.html#method-i-old_method","()","<p>old method for alias node.\n\n<pre>s(:alias,\n  s(:symbol_literal, s(:@ident, &quot;new&quot;, s(1, 6))),\n  s(:symbol_literal, ...</pre>\n"],["parse","CodeAnalyzer::CheckingVisitor::Default","CodeAnalyzer/CheckingVisitor/Default.html#method-i-parse","(filename, content)","<p>parse ruby code.\n<p>@param [String] filename is the filename of ruby code. @param [String]\ncontent is the …\n"],["parse_file?","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-parse_file-3F","(node_file)","<p>check if the checker will parse the node file.\n<p>@param [String] the file name of node. @return [Boolean] …\n"],["present?","CodeAnalyzer::Nil","CodeAnalyzer/Nil.html#method-i-present-3F","()","<p>false\n"],["present?","Sexp","Sexp.html#method-i-present-3F","()","<p>true\n"],["receiver","Sexp","Sexp.html#method-i-receiver","()","<p>Get receiver node.\n\n<pre>s(:call,\n  s(:var_ref,\n    s(:@ident, &quot;user&quot;, s(1, 0))\n  ),\n  :&quot;.&quot;,\n  s(:@ident, &quot;name&quot;, ...</pre>\n"],["recursive_children","Sexp","Sexp.html#method-i-recursive_children","()","<p>recursively find all child nodes, and yeild each child node.\n"],["remove_line_and_column","Sexp","Sexp.html#method-i-remove_line_and_column","()","<p>remove the line and column info from sexp.\n"],["right_value","Sexp","Sexp.html#method-i-right_value","()","<p>Get the right value of assign node.\n\n<pre>s(:assign,\n  s(:var_field, s(:@ident, &quot;user&quot;, s(1, 0))),\n  s(:var_ref, ...</pre>\n"],["statements","Sexp","Sexp.html#method-i-statements","()","<p>Get all statements nodes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">bodystmt</span>,\n  <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">stmts_add</span>,\n    <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">stmts_add</span>, <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-identifier\">stmts_new</span>),\n      <span class=\"ruby-identifier\">s</span>(:<span class=\"ruby-keyword\">def</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_object","Sexp","Sexp.html#method-i-to_object","()","<p>To object.\n\n<pre>s(:array,\n  s(:args_add,\n    s(:args_add, s(:args_new), s(:string_literal, s(:string_add, s(:string_content), ...</pre>\n"],["to_s","CodeAnalyzer::Nil","CodeAnalyzer/Nil.html#method-i-to_s","()","<p>return self for to_s.\n"],["to_s","CodeAnalyzer::Warning","CodeAnalyzer/Warning.html#method-i-to_s","()",""],["to_s","Sexp","Sexp.html#method-i-to_s","()","<p>to_s.\n<p>@return [String] to_s\n"],["warnings","CodeAnalyzer::Checker","CodeAnalyzer/Checker.html#method-i-warnings","()","<p>all warnings.\n"],["warnings","CodeAnalyzer::CheckingVisitor::Base","CodeAnalyzer/CheckingVisitor/Base.html#method-i-warnings","()",""]]}}