var search_data = {"index":{"searchIndex":["omniauth","authhash","infohash","builder","configuration","error","failureendpoint","form","nosessionerror","strategies","developer","strategy","classmethods","options","test","phonysession","strategymacros","strategytestcase","utils","add_camelization()","add_mock()","app()","app_response()","args()","auth_hash()","build()","button()","call()","call()","call()","call()","call()","call!()","call_app!()","callback_call()","callback_path()","callback_phase()","callback_url()","camelize()","compile_stack()","config()","configure()","configure()","configure()","credentials()","css()","current_path()","custom_path()","deep_merge()","default_logger()","default_options()","defaults()","extra()","fail!()","fieldset()","footer()","form_css()","full_host()","header()","html()","included()","info()","input_field()","inspect()","label_field()","log()","logger()","merge_stack()","mock_auth_for()","mock_call!()","mock_callback_call()","mock_request_call()","name()","name()","name?()","new()","new()","new()","new()","new()","new()","on_auth_path?()","on_callback_path?()","on_failure()","on_failure()","on_path?()","on_request_path?()","option()","options()","options_call()","options_request?()","origin_query_param()","password_field()","path_prefix()","provider()","query_string()","rack14?()","raise_out!()","redirect()","redirect_to_failure()","regular_writer()","request()","request_call()","request_path()","request_phase()","request_phase()","script_name()","session()","session()","sets_an_auth_hash()","sets_provider_to()","sets_uid_to()","sets_user_info_to()","setup_path()","setup_phase()","skip_info?()","ssl?()","strategies()","strategy()","strategy_name_query_param()","subkey_class()","subkey_class()","text_field()","to_hash()","to_html()","to_response()","uid()","user_info()","valid?()","valid?()"],"longSearchIndex":["omniauth","omniauth::authhash","omniauth::authhash::infohash","omniauth::builder","omniauth::configuration","omniauth::error","omniauth::failureendpoint","omniauth::form","omniauth::nosessionerror","omniauth::strategies","omniauth::strategies::developer","omniauth::strategy","omniauth::strategy::classmethods","omniauth::strategy::options","omniauth::test","omniauth::test::phonysession","omniauth::test::strategymacros","omniauth::test::strategytestcase","omniauth::utils","omniauth::configuration#add_camelization()","omniauth::configuration#add_mock()","omniauth::test::strategytestcase#app()","omniauth::test::strategytestcase#app_response()","omniauth::strategy::classmethods#args()","omniauth::strategy#auth_hash()","omniauth::form::build()","omniauth::form#button()","omniauth::builder#call()","omniauth::failureendpoint#call()","omniauth::failureendpoint::call()","omniauth::strategy#call()","omniauth::test::phonysession#call()","omniauth::strategy#call!()","omniauth::strategy#call_app!()","omniauth::strategy#callback_call()","omniauth::strategy#callback_path()","omniauth::strategy#callback_phase()","omniauth::strategy#callback_url()","omniauth::utils#camelize()","omniauth::strategy::classmethods#compile_stack()","omniauth::config()","omniauth::configure()","omniauth::builder#configure()","omniauth::strategy::classmethods#configure()","omniauth::strategy#credentials()","omniauth::form#css()","omniauth::strategy#current_path()","omniauth::strategy#custom_path()","omniauth::utils#deep_merge()","omniauth::configuration::default_logger()","omniauth::strategy::classmethods#default_options()","omniauth::configuration::defaults()","omniauth::strategy#extra()","omniauth::strategy#fail!()","omniauth::form#fieldset()","omniauth::form#footer()","omniauth::utils#form_css()","omniauth::strategy#full_host()","omniauth::form#header()","omniauth::form#html()","omniauth::strategy::included()","omniauth::strategy#info()","omniauth::form#input_field()","omniauth::strategy#inspect()","omniauth::form#label_field()","omniauth::strategy#log()","omniauth::logger()","omniauth::strategy#merge_stack()","omniauth::mock_auth_for()","omniauth::strategy#mock_call!()","omniauth::strategy#mock_callback_call()","omniauth::strategy#mock_request_call()","omniauth::authhash::infohash#name()","omniauth::strategy#name()","omniauth::authhash::infohash#name?()","omniauth::builder::new()","omniauth::configuration::new()","omniauth::failureendpoint::new()","omniauth::form::new()","omniauth::strategy::new()","omniauth::test::phonysession::new()","omniauth::strategy#on_auth_path?()","omniauth::strategy#on_callback_path?()","omniauth::builder#on_failure()","omniauth::configuration#on_failure()","omniauth::strategy#on_path?()","omniauth::strategy#on_request_path?()","omniauth::strategy::classmethods#option()","omniauth::builder#options()","omniauth::strategy#options_call()","omniauth::strategy#options_request?()","omniauth::failureendpoint#origin_query_param()","omniauth::form#password_field()","omniauth::strategy#path_prefix()","omniauth::builder#provider()","omniauth::strategy#query_string()","omniauth::builder#rack14?()","omniauth::failureendpoint#raise_out!()","omniauth::strategy#redirect()","omniauth::failureendpoint#redirect_to_failure()","omniauth::authhash#regular_writer()","omniauth::strategy#request()","omniauth::strategy#request_call()","omniauth::strategy#request_path()","omniauth::strategies::developer#request_phase()","omniauth::strategy#request_phase()","omniauth::strategy#script_name()","omniauth::strategy#session()","omniauth::test::strategytestcase#session()","omniauth::test::strategymacros#sets_an_auth_hash()","omniauth::test::strategymacros#sets_provider_to()","omniauth::test::strategymacros#sets_uid_to()","omniauth::test::strategymacros#sets_user_info_to()","omniauth::strategy#setup_path()","omniauth::strategy#setup_phase()","omniauth::strategy#skip_info?()","omniauth::strategy#ssl?()","omniauth::strategies()","omniauth::test::strategytestcase#strategy()","omniauth::failureendpoint#strategy_name_query_param()","omniauth::authhash::subkey_class()","omniauth::authhash::infohash::subkey_class()","omniauth::form#text_field()","omniauth::authhash::infohash#to_hash()","omniauth::form#to_html()","omniauth::form#to_response()","omniauth::strategy#uid()","omniauth::strategy#user_info()","omniauth::authhash#valid?()","omniauth::authhash::infohash#valid?()"],"info":[["OmniAuth","","OmniAuth.html","",""],["OmniAuth::AuthHash","","OmniAuth/AuthHash.html","","<p>The AuthHash is a normalized schema returned by all OmniAuth strategies. It\nmaps as much user information …\n"],["OmniAuth::AuthHash::InfoHash","","OmniAuth/AuthHash/InfoHash.html","",""],["OmniAuth::Builder","","OmniAuth/Builder.html","",""],["OmniAuth::Configuration","","OmniAuth/Configuration.html","",""],["OmniAuth::Error","","OmniAuth/Error.html","",""],["OmniAuth::FailureEndpoint","","OmniAuth/FailureEndpoint.html","","<p>This simple Rack endpoint that serves as the default ‘failure’ mechanism\nfor OmniAuth. If a strategy …\n"],["OmniAuth::Form","","OmniAuth/Form.html","",""],["OmniAuth::NoSessionError","","OmniAuth/NoSessionError.html","",""],["OmniAuth::Strategies","","OmniAuth/Strategies.html","",""],["OmniAuth::Strategies::Developer","","OmniAuth/Strategies/Developer.html","","<p>The Developer strategy is a very simple strategy that can be used as a\nplaceholder in your application …\n"],["OmniAuth::Strategy","","OmniAuth/Strategy.html","","<p>The Strategy is the base unit of OmniAuth’s ability to wrangle multiple\nproviders. Each strategy provided …\n"],["OmniAuth::Strategy::ClassMethods","","OmniAuth/Strategy/ClassMethods.html","",""],["OmniAuth::Strategy::Options","","OmniAuth/Strategy/Options.html","",""],["OmniAuth::Test","","OmniAuth/Test.html","","<p>Support for testing OmniAuth strategies.\n"],["OmniAuth::Test::PhonySession","","OmniAuth/Test/PhonySession.html","",""],["OmniAuth::Test::StrategyMacros","","OmniAuth/Test/StrategyMacros.html","",""],["OmniAuth::Test::StrategyTestCase","","OmniAuth/Test/StrategyTestCase.html","","<p>Support for testing OmniAuth strategies.\n<p>@example Usage\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyStrategyTest</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Test</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Unit</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TestCase</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["OmniAuth::Utils","","OmniAuth/Utils.html","",""],["add_camelization","OmniAuth::Configuration","OmniAuth/Configuration.html#method-i-add_camelization","(name, camelized)","<p>This is a convenience method to be used by strategy authors so that they\ncan add special cases to the …\n"],["add_mock","OmniAuth::Configuration","OmniAuth/Configuration.html#method-i-add_mock","(provider, mock={})",""],["app","OmniAuth::Test::StrategyTestCase","OmniAuth/Test/StrategyTestCase.html#method-i-app","()",""],["app_response","OmniAuth::Test::StrategyTestCase","OmniAuth/Test/StrategyTestCase.html#method-i-app_response","()",""],["args","OmniAuth::Strategy::ClassMethods","OmniAuth/Strategy/ClassMethods.html#method-i-args","(args = nil)","<p>Sets (and retrieves) option key names for initializer arguments to be\nrecorded as. This takes care of …\n"],["auth_hash","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-auth_hash","()",""],["build","OmniAuth::Form","OmniAuth/Form.html#method-c-build","(options = {},&block)",""],["button","OmniAuth::Form","OmniAuth/Form.html#method-i-button","(text)",""],["call","OmniAuth::Builder","OmniAuth/Builder.html#method-i-call","(env)",""],["call","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-i-call","()",""],["call","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-c-call","(env)",""],["call","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-call","(env)","<p>Duplicates this instance and runs #call! on it. @param [Hash] The Rack\nenvironment.\n"],["call","OmniAuth::Test::PhonySession","OmniAuth/Test/PhonySession.html#method-i-call","(env)",""],["call!","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-call-21","(env)","<p>The logic for dispatching any additional actions that need to be taken. For\ninstance, calling the request …\n"],["call_app!","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-call_app-21","(env = @env)",""],["callback_call","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-callback_call","()","<p>Performs the steps necessary to run the callback phase of a strategy.\n"],["callback_path","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-callback_path","()",""],["callback_phase","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-callback_phase","()",""],["callback_url","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-callback_url","()",""],["camelize","OmniAuth::Utils","OmniAuth/Utils.html#method-i-camelize","(word, first_letter_in_uppercase = true)",""],["compile_stack","OmniAuth::Strategy::ClassMethods","OmniAuth/Strategy/ClassMethods.html#method-i-compile_stack","(ancestors, method, context)",""],["config","OmniAuth","OmniAuth.html#method-c-config","()",""],["configure","OmniAuth","OmniAuth.html#method-c-configure","()",""],["configure","OmniAuth::Builder","OmniAuth/Builder.html#method-i-configure","(&block)",""],["configure","OmniAuth::Strategy::ClassMethods","OmniAuth/Strategy/ClassMethods.html#method-i-configure","(options = nil)","<p>This allows for more declarative subclassing of strategies by allowing\ndefault options to be set using …\n"],["credentials","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-credentials","()",""],["css","OmniAuth::Form","OmniAuth/Form.html#method-i-css","()",""],["current_path","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-current_path","()",""],["custom_path","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-custom_path","(kind)",""],["deep_merge","OmniAuth::Utils","OmniAuth/Utils.html#method-i-deep_merge","(hash, other_hash)",""],["default_logger","OmniAuth::Configuration","OmniAuth/Configuration.html#method-c-default_logger","()",""],["default_options","OmniAuth::Strategy::ClassMethods","OmniAuth/Strategy/ClassMethods.html#method-i-default_options","()","<p>Returns an inherited set of default options set at the class-level for each\nstrategy.\n"],["defaults","OmniAuth::Configuration","OmniAuth/Configuration.html#method-c-defaults","()",""],["extra","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-extra","()",""],["fail!","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-fail-21","(message_key, exception = nil)",""],["fieldset","OmniAuth::Form","OmniAuth/Form.html#method-i-fieldset","(legend, options = {}, &block)",""],["footer","OmniAuth::Form","OmniAuth/Form.html#method-i-footer","()",""],["form_css","OmniAuth::Utils","OmniAuth/Utils.html#method-i-form_css","()",""],["full_host","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-full_host","()",""],["header","OmniAuth::Form","OmniAuth/Form.html#method-i-header","(title,header_info)",""],["html","OmniAuth::Form","OmniAuth/Form.html#method-i-html","(html)",""],["included","OmniAuth::Strategy","OmniAuth/Strategy.html#method-c-included","(base)",""],["info","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-info","()",""],["input_field","OmniAuth::Form","OmniAuth/Form.html#method-i-input_field","(type, name)",""],["inspect","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-inspect","()",""],["label_field","OmniAuth::Form","OmniAuth/Form.html#method-i-label_field","(text, target)",""],["log","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-log","(level, message)","<p>Direct access to the OmniAuth logger, automatically prefixed with this\nstrategy’s name.\n<p>@example\n\n<pre>log :warn, ...</pre>\n"],["logger","OmniAuth","OmniAuth.html#method-c-logger","()",""],["merge_stack","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-merge_stack","(stack)",""],["mock_auth_for","OmniAuth","OmniAuth.html#method-c-mock_auth_for","(provider)",""],["mock_call!","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-mock_call-21","(env)","<p>This is called in lieu of the normal request process in the event that\nOmniAuth has been configured to …\n"],["mock_callback_call","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-mock_callback_call","()",""],["mock_request_call","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-mock_request_call","()",""],["name","OmniAuth::AuthHash::InfoHash","OmniAuth/AuthHash/InfoHash.html#method-i-name","()",""],["name","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-name","()",""],["name?","OmniAuth::AuthHash::InfoHash","OmniAuth/AuthHash/InfoHash.html#method-i-name-3F","()",""],["new","OmniAuth::Builder","OmniAuth/Builder.html#method-c-new","(app, &block)",""],["new","OmniAuth::Configuration","OmniAuth/Configuration.html#method-c-new","()",""],["new","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-c-new","(env)",""],["new","OmniAuth::Form","OmniAuth/Form.html#method-c-new","(options = {})",""],["new","OmniAuth::Strategy","OmniAuth/Strategy.html#method-c-new","(app, *args, &block)","<p>Initializes the strategy by passing in the Rack endpoint, the unique URL\nsegment name for this strategy, …\n"],["new","OmniAuth::Test::PhonySession","OmniAuth/Test/PhonySession.html#method-c-new","(app)",""],["on_auth_path?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-on_auth_path-3F","()","<p>Returns true if the environment recognizes either the request or callback\npath.\n"],["on_callback_path?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-on_callback_path-3F","()",""],["on_failure","OmniAuth::Builder","OmniAuth/Builder.html#method-i-on_failure","(&block)",""],["on_failure","OmniAuth::Configuration","OmniAuth/Configuration.html#method-i-on_failure","(&block)",""],["on_path?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-on_path-3F","(path)",""],["on_request_path?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-on_request_path-3F","()",""],["option","OmniAuth::Strategy::ClassMethods","OmniAuth/Strategy/ClassMethods.html#method-i-option","(name, value = nil)","<p>Directly declare a default option for your class. This is a useful from a\ndocumentation perspective as …\n"],["options","OmniAuth::Builder","OmniAuth/Builder.html#method-i-options","(options = false)",""],["options_call","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-options_call","()","<p>Responds to an OPTIONS request.\n"],["options_request?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-options_request-3F","()",""],["origin_query_param","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-i-origin_query_param","()",""],["password_field","OmniAuth::Form","OmniAuth/Form.html#method-i-password_field","(label, name)",""],["path_prefix","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-path_prefix","()",""],["provider","OmniAuth::Builder","OmniAuth/Builder.html#method-i-provider","(klass, *args, &block)",""],["query_string","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-query_string","()",""],["rack14?","OmniAuth::Builder","OmniAuth/Builder.html#method-i-rack14-3F","()",""],["raise_out!","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-i-raise_out-21","()",""],["redirect","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-redirect","(uri)",""],["redirect_to_failure","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-i-redirect_to_failure","()",""],["regular_writer","OmniAuth::AuthHash","OmniAuth/AuthHash.html#method-i-regular_writer","(key, value)",""],["request","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-request","()",""],["request_call","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-request_call","()","<p>Performs the steps necessary to run the request phase of a strategy.\n"],["request_path","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-request_path","()",""],["request_phase","OmniAuth::Strategies::Developer","OmniAuth/Strategies/Developer.html#method-i-request_phase","()",""],["request_phase","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-request_phase","()","<p>@abstract This method is called when the user is on the request path. You\nshould perform any information …\n"],["script_name","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-script_name","()",""],["session","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-session","()",""],["session","OmniAuth::Test::StrategyTestCase","OmniAuth/Test/StrategyTestCase.html#method-i-session","()",""],["sets_an_auth_hash","OmniAuth::Test::StrategyMacros","OmniAuth/Test/StrategyMacros.html#method-i-sets_an_auth_hash","()",""],["sets_provider_to","OmniAuth::Test::StrategyMacros","OmniAuth/Test/StrategyMacros.html#method-i-sets_provider_to","(provider)",""],["sets_uid_to","OmniAuth::Test::StrategyMacros","OmniAuth/Test/StrategyMacros.html#method-i-sets_uid_to","(uid)",""],["sets_user_info_to","OmniAuth::Test::StrategyMacros","OmniAuth/Test/StrategyMacros.html#method-i-sets_user_info_to","(user_info)",""],["setup_path","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-setup_path","()",""],["setup_phase","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-setup_phase","()","<p>The setup phase looks for the `:setup` option to exist and, if it is, will\ncall either the Rack endpoint …\n"],["skip_info?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-skip_info-3F","()","<p>Determines whether or not user info should be retrieved. This allows some\nstrategies to save a call to …\n"],["ssl?","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-ssl-3F","()",""],["strategies","OmniAuth","OmniAuth.html#method-c-strategies","()",""],["strategy","OmniAuth::Test::StrategyTestCase","OmniAuth/Test/StrategyTestCase.html#method-i-strategy","()",""],["strategy_name_query_param","OmniAuth::FailureEndpoint","OmniAuth/FailureEndpoint.html#method-i-strategy_name_query_param","()",""],["subkey_class","OmniAuth::AuthHash","OmniAuth/AuthHash.html#method-c-subkey_class","()",""],["subkey_class","OmniAuth::AuthHash::InfoHash","OmniAuth/AuthHash/InfoHash.html#method-c-subkey_class","()",""],["text_field","OmniAuth::Form","OmniAuth/Form.html#method-i-text_field","(label, name)",""],["to_hash","OmniAuth::AuthHash::InfoHash","OmniAuth/AuthHash/InfoHash.html#method-i-to_hash","()",""],["to_html","OmniAuth::Form","OmniAuth/Form.html#method-i-to_html","()",""],["to_response","OmniAuth::Form","OmniAuth/Form.html#method-i-to_response","()",""],["uid","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-uid","()",""],["user_info","OmniAuth::Strategy","OmniAuth/Strategy.html#method-i-user_info","()",""],["valid?","OmniAuth::AuthHash","OmniAuth/AuthHash.html#method-i-valid-3F","()","<p>Tells you if this is considered to be a valid OmniAuth AuthHash. The\nrequirements for that are that it …\n"],["valid?","OmniAuth::AuthHash::InfoHash","OmniAuth/AuthHash/InfoHash.html#method-i-valid-3F","()",""]]}}