var search_data = {"index":{"searchIndex":["hashie","clash","chainerror","dash","extensions","coercion","classmethods","instancemethods","deepmerge","indifferentaccess","keyconversion","mergeinitializer","methodaccess","methodquery","methodreader","methodwriter","stringifykeys","structure","classmethods","symbolizekeys","hash","hashextensions","mash","prettyinspect","trash","[]()","[]()","[]()","[]=()","[]=()","[]=()","_end!()","_regular_reader()","_regular_writer()","coerce_key()","coerce_keys()","coerce_value()","convert!()","convert_key()","convert_key()","convert_value()","custom_reader()","custom_writer()","deep_merge()","deep_merge()","deep_merge!()","deep_merge!()","deep_update()","delete()","dup()","fetch()","has_key?()","hash_lacking_indifference?()","hash_with_indifference?()","hashie_inspect()","hashie_stringify_keys()","hashie_stringify_keys!()","include?()","included()","included()","included()","included()","included()","included()","included()","indifferent_access?()","indifferent_default()","indifferent_delete()","indifferent_fetch()","indifferent_key?()","indifferent_replace()","indifferent_update()","indifferent_values_at()","indifferent_writer()","inherited()","initializing_reader()","inject()","inject!()","key()","key?()","key_coercion()","key_coercions()","lenient_value_coercions()","member?()","merge()","merge!()","method_missing()","method_missing()","method_missing()","method_missing()","new()","new()","new()","new()","permitted_keys()","property()","property()","property?()","regular_dup()","regular_reader()","replace()","replace()","replace()","required?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","shallow_merge()","shallow_update()","strict_value_coercions()","stringify_keys()","stringify_keys!()","stringify_keys_recursively!()","symbolize_keys()","symbolize_keys!()","symbolize_keys_recursively!()","to_hash()","to_json()","to_mash()","underbang_reader()","update()","value_coercion()"],"longSearchIndex":["hashie","hashie::clash","hashie::clash::chainerror","hashie::dash","hashie::extensions","hashie::extensions::coercion","hashie::extensions::coercion::classmethods","hashie::extensions::coercion::instancemethods","hashie::extensions::deepmerge","hashie::extensions::indifferentaccess","hashie::extensions::keyconversion","hashie::extensions::mergeinitializer","hashie::extensions::methodaccess","hashie::extensions::methodquery","hashie::extensions::methodreader","hashie::extensions::methodwriter","hashie::extensions::stringifykeys","hashie::extensions::structure","hashie::extensions::structure::classmethods","hashie::extensions::symbolizekeys","hashie::hash","hashie::hashextensions","hashie::mash","hashie::prettyinspect","hashie::trash","hashie::dash#[]()","hashie::mash::[]()","hashie::mash#[]()","hashie::dash#[]=()","hashie::extensions::coercion::instancemethods#[]=()","hashie::trash#[]=()","hashie::clash#_end!()","hashie::dash#_regular_reader()","hashie::dash#_regular_writer()","hashie::extensions::coercion::classmethods#coerce_key()","hashie::extensions::coercion::classmethods#coerce_keys()","hashie::extensions::coercion::classmethods#coerce_value()","hashie::extensions::indifferentaccess#convert!()","hashie::extensions::indifferentaccess#convert_key()","hashie::extensions::methodwriter#convert_key()","hashie::extensions::indifferentaccess#convert_value()","hashie::mash#custom_reader()","hashie::extensions::coercion::instancemethods#custom_writer()","hashie::extensions::deepmerge#deep_merge()","hashie::mash#deep_merge()","hashie::extensions::deepmerge#deep_merge!()","hashie::mash#deep_merge!()","hashie::mash#deep_update()","hashie::mash#delete()","hashie::mash#dup()","hashie::mash#fetch()","hashie::mash#has_key?()","hashie::extensions::indifferentaccess#hash_lacking_indifference?()","hashie::extensions::indifferentaccess#hash_with_indifference?()","hashie::prettyinspect#hashie_inspect()","hashie::hashextensions#hashie_stringify_keys()","hashie::hashextensions#hashie_stringify_keys!()","hashie::mash#include?()","hashie::extensions::coercion::included()","hashie::extensions::indifferentaccess::included()","hashie::extensions::keyconversion::included()","hashie::extensions::methodaccess::included()","hashie::extensions::structure::included()","hashie::hashextensions::included()","hashie::prettyinspect::included()","hashie::extensions::indifferentaccess#indifferent_access?()","hashie::extensions::indifferentaccess#indifferent_default()","hashie::extensions::indifferentaccess#indifferent_delete()","hashie::extensions::indifferentaccess#indifferent_fetch()","hashie::extensions::indifferentaccess#indifferent_key?()","hashie::extensions::indifferentaccess#indifferent_replace()","hashie::extensions::indifferentaccess#indifferent_update()","hashie::extensions::indifferentaccess#indifferent_values_at()","hashie::extensions::indifferentaccess#indifferent_writer()","hashie::dash::inherited()","hashie::mash#initializing_reader()","hashie::extensions::indifferentaccess::inject()","hashie::extensions::indifferentaccess::inject!()","hashie::extensions::structure::classmethods#key()","hashie::mash#key?()","hashie::extensions::coercion::classmethods#key_coercion()","hashie::extensions::coercion::classmethods#key_coercions()","hashie::extensions::coercion::classmethods#lenient_value_coercions()","hashie::mash#member?()","hashie::mash#merge()","hashie::mash#merge!()","hashie::extensions::methodquery#method_missing()","hashie::extensions::methodreader#method_missing()","hashie::extensions::methodwriter#method_missing()","hashie::mash#method_missing()","hashie::clash::new()","hashie::dash::new()","hashie::extensions::mergeinitializer::new()","hashie::mash::new()","hashie::extensions::structure::classmethods#permitted_keys()","hashie::dash::property()","hashie::trash::property()","hashie::dash::property?()","hashie::mash#regular_dup()","hashie::mash#regular_reader()","hashie::dash#replace()","hashie::extensions::coercion::instancemethods#replace()","hashie::mash#replace()","hashie::dash::required?()","hashie::extensions::methodquery#respond_to?()","hashie::extensions::methodreader#respond_to?()","hashie::extensions::methodwriter#respond_to?()","hashie::mash#respond_to?()","hashie::mash#shallow_merge()","hashie::mash#shallow_update()","hashie::extensions::coercion::classmethods#strict_value_coercions()","hashie::extensions::stringifykeys#stringify_keys()","hashie::extensions::stringifykeys#stringify_keys!()","hashie::extensions::stringifykeys#stringify_keys_recursively!()","hashie::extensions::symbolizekeys#symbolize_keys()","hashie::extensions::symbolizekeys#symbolize_keys!()","hashie::extensions::symbolizekeys#symbolize_keys_recursively!()","hashie::hash#to_hash()","hashie::hash#to_json()","hashie::hashextensions#to_mash()","hashie::mash#underbang_reader()","hashie::mash#update()","hashie::extensions::coercion::classmethods#value_coercion()"],"info":[["Hashie","","Hashie.html","",""],["Hashie::Clash","","Hashie/Clash.html","","<p>A Clash is a “Chainable Lazy Hash”. Inspired by libraries such as Arel, a\nClash allows you …\n"],["Hashie::Clash::ChainError","","Hashie/Clash/ChainError.html","",""],["Hashie::Dash","","Hashie/Dash.html","","<p>A Dash is a ‘defined’ or ‘discrete’ Hash, that is, a Hash that has a set of\ndefined keys that are accessible …\n"],["Hashie::Extensions","","Hashie/Extensions.html","",""],["Hashie::Extensions::Coercion","","Hashie/Extensions/Coercion.html","",""],["Hashie::Extensions::Coercion::ClassMethods","","Hashie/Extensions/Coercion/ClassMethods.html","",""],["Hashie::Extensions::Coercion::InstanceMethods","","Hashie/Extensions/Coercion/InstanceMethods.html","",""],["Hashie::Extensions::DeepMerge","","Hashie/Extensions/DeepMerge.html","",""],["Hashie::Extensions::IndifferentAccess","","Hashie/Extensions/IndifferentAccess.html","","<p>IndifferentAccess gives you the ability to not care whether your hash has\nstring or symbol keys. Made …\n"],["Hashie::Extensions::KeyConversion","","Hashie/Extensions/KeyConversion.html","",""],["Hashie::Extensions::MergeInitializer","","Hashie/Extensions/MergeInitializer.html","","<p>The MergeInitializer is a super-simple mixin that allows you to initialize\na subclass of Hash with another …\n"],["Hashie::Extensions::MethodAccess","","Hashie/Extensions/MethodAccess.html","","<p>A macro module that will automatically include MethodReader, MethodWriter,\nand MethodQuery, giving you …\n"],["Hashie::Extensions::MethodQuery","","Hashie/Extensions/MethodQuery.html","","<p>MethodQuery gives you the ability to check for the truthiness of a key via\nmethod calls. Note that it …\n"],["Hashie::Extensions::MethodReader","","Hashie/Extensions/MethodReader.html","","<p>MethodReader allows you to access keys of the hash via method calls. This\ngives you an OStruct like way …\n"],["Hashie::Extensions::MethodWriter","","Hashie/Extensions/MethodWriter.html","","<p>MethodWriter gives you #key_name= shortcuts for writing to your hash. Keys\nare written as strings, override …\n"],["Hashie::Extensions::StringifyKeys","","Hashie/Extensions/StringifyKeys.html","",""],["Hashie::Extensions::Structure","","Hashie/Extensions/Structure.html","","<p>The Structure extension provides facilities for declaring properties that a\nHash can have. This provides …\n"],["Hashie::Extensions::Structure::ClassMethods","","Hashie/Extensions/Structure/ClassMethods.html","",""],["Hashie::Extensions::SymbolizeKeys","","Hashie/Extensions/SymbolizeKeys.html","",""],["Hashie::Hash","","Hashie/Hash.html","","<p>A Hashie Hash is simply a Hash that has convenience functions baked in such\nas stringify_keys that may …\n"],["Hashie::HashExtensions","","Hashie/HashExtensions.html","",""],["Hashie::Mash","","Hashie/Mash.html","","<p>Mash allows you to create pseudo-objects that have method-like accessors\nfor hash keys. This is useful …\n"],["Hashie::PrettyInspect","","Hashie/PrettyInspect.html","",""],["Hashie::Trash","","Hashie/Trash.html","","<p>A Trash is a ‘translated’ Dash where the keys can be remapped from a source\nhash.\n<p>Trashes are useful when …\n"],["[]","Hashie::Dash","Hashie/Dash.html#method-i-5B-5D","(property)","<p>Retrieve a value from the Dash (will return the property’s default value if\nit hasn’t been set).\n"],["[]","Hashie::Mash","Hashie/Mash.html#method-c-5B-5D","(source_hash = nil, default = nil, &blk)",""],["[]","Hashie::Mash","Hashie/Mash.html#method-i-5B-5D","(key)",""],["[]=","Hashie::Dash","Hashie/Dash.html#method-i-5B-5D-3D","(property, value)","<p>Set a value on the Dash in a Hash-like way. Only works on pre-existing\nproperties.\n"],["[]=","Hashie::Extensions::Coercion::InstanceMethods","Hashie/Extensions/Coercion/InstanceMethods.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Hashie::Trash","Hashie/Trash.html#method-i-5B-5D-3D","(property, value)","<p>Set a value on the Dash in a Hash-like way. Only works on pre-existing\nproperties.\n"],["_end!","Hashie::Clash","Hashie/Clash.html#method-i-_end-21","()","<p>Jump back up a level if you are using bang method chaining. For example:\n<p>c = Hashie::Clash.new.foo(‘bar’) …\n"],["_regular_reader","Hashie::Dash","Hashie/Dash.html#method-i-_regular_reader","(property)",""],["_regular_writer","Hashie::Dash","Hashie/Dash.html#method-i-_regular_writer","(property, value)",""],["coerce_key","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-coerce_key","(*attrs)","<p>Set up a coercion rule such that any time the specified key is set it will\nbe coerced into the specified …\n"],["coerce_keys","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-coerce_keys","(*attrs)",""],["coerce_value","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-coerce_value","(from, into, options = {})","<p>Set up a coercion rule such that any time a value of the specified type is\nset it will be coerced into …\n"],["convert!","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-convert-21","()","<p>Iterates through the keys and values, reconverting them to their proper\nindifferent state. Used when …\n"],["convert_key","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","Hashie::Extensions::MethodWriter","Hashie/Extensions/MethodWriter.html#method-i-convert_key","(key)",""],["convert_value","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-convert_value","(value)",""],["custom_reader","Hashie::Mash","Hashie/Mash.html#method-i-custom_reader","(key)","<p>Retrieves an attribute set in the Mash. Will convert any key passed in to a\nstring before retrieving. …\n"],["custom_writer","Hashie::Extensions::Coercion::InstanceMethods","Hashie/Extensions/Coercion/InstanceMethods.html#method-i-custom_writer","(key, value)",""],["deep_merge","Hashie::Extensions::DeepMerge","Hashie/Extensions/DeepMerge.html#method-i-deep_merge","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n"],["deep_merge","Hashie::Mash","Hashie/Mash.html#method-i-deep_merge","(other_hash, &blk)","<p>Performs a deep_update on a duplicate of the current mash.\n"],["deep_merge!","Hashie::Extensions::DeepMerge","Hashie/Extensions/DeepMerge.html#method-i-deep_merge-21","(other_hash)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively. Modifies the receiver in place.\n"],["deep_merge!","Hashie::Mash","Hashie/Mash.html#method-i-deep_merge-21","(other_hash, &blk)",""],["deep_update","Hashie::Mash","Hashie/Mash.html#method-i-deep_update","(other_hash, &blk)","<p>Recursively merges this mash with the passed in hash, merging each hash in\nthe hierarchy.\n"],["delete","Hashie::Mash","Hashie/Mash.html#method-i-delete","(key)",""],["dup","Hashie::Mash","Hashie/Mash.html#method-i-dup","()","<p>Duplicates the current mash as a new mash.\n"],["fetch","Hashie::Mash","Hashie/Mash.html#method-i-fetch","(key, *args)",""],["has_key?","Hashie::Mash","Hashie/Mash.html#method-i-has_key-3F","(key)",""],["hash_lacking_indifference?","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-hash_lacking_indifference-3F","(other)",""],["hash_with_indifference?","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-hash_with_indifference-3F","(other)",""],["hashie_inspect","Hashie::PrettyInspect","Hashie/PrettyInspect.html#method-i-hashie_inspect","()",""],["hashie_stringify_keys","Hashie::HashExtensions","Hashie/HashExtensions.html#method-i-hashie_stringify_keys","()","<p>Convert all of the keys of a Hash to their string representations.\n"],["hashie_stringify_keys!","Hashie::HashExtensions","Hashie/HashExtensions.html#method-i-hashie_stringify_keys-21","()","<p>Destructively convert all of the keys of a Hash to their string\nrepresentations.\n"],["include?","Hashie::Mash","Hashie/Mash.html#method-i-include-3F","(key)",""],["included","Hashie::Extensions::Coercion","Hashie/Extensions/Coercion.html#method-c-included","(base)",""],["included","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-c-included","(base)",""],["included","Hashie::Extensions::KeyConversion","Hashie/Extensions/KeyConversion.html#method-c-included","(base)",""],["included","Hashie::Extensions::MethodAccess","Hashie/Extensions/MethodAccess.html#method-c-included","(base)",""],["included","Hashie::Extensions::Structure","Hashie/Extensions/Structure.html#method-c-included","(base)",""],["included","Hashie::HashExtensions","Hashie/HashExtensions.html#method-c-included","(base)",""],["included","Hashie::PrettyInspect","Hashie/PrettyInspect.html#method-c-included","(base)",""],["indifferent_access?","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_access-3F","()",""],["indifferent_default","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_default","(key = nil)",""],["indifferent_delete","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_delete","(key)",""],["indifferent_fetch","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_fetch","(key, *args)",""],["indifferent_key?","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_key-3F","(key)",""],["indifferent_replace","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_replace","(other_hash)",""],["indifferent_update","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_update","(other_hash)",""],["indifferent_values_at","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_values_at","(*indices)",""],["indifferent_writer","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-i-indifferent_writer","(key, value)",""],["inherited","Hashie::Dash","Hashie/Dash.html#method-c-inherited","(klass)",""],["initializing_reader","Hashie::Mash","Hashie/Mash.html#method-i-initializing_reader","(key)","<p>This is the bang method reader, it will return a new Mash if there isn’t a\nvalue already assigned to …\n"],["inject","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-c-inject","(hash)","<p>Injects indifferent access into a duplicate of the hash provided. See\n#inject!\n"],["inject!","Hashie::Extensions::IndifferentAccess","Hashie/Extensions/IndifferentAccess.html#method-c-inject-21","(hash)","<p>This will inject indifferent access into an instance of a hash without\nmodifying the actual class. This …\n"],["key","Hashie::Extensions::Structure::ClassMethods","Hashie/Extensions/Structure/ClassMethods.html#method-i-key","(key, options = {})",""],["key?","Hashie::Mash","Hashie/Mash.html#method-i-key-3F","(key)",""],["key_coercion","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-key_coercion","(key)","<p>Returns the specific key coercion for the specified key, if one exists.\n"],["key_coercions","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-key_coercions","()","<p>Returns a hash of any existing key coercions.\n"],["lenient_value_coercions","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-lenient_value_coercions","()","<p>Return all value coercions that have the :strict rule as false.\n"],["member?","Hashie::Mash","Hashie/Mash.html#method-i-member-3F","(key)",""],["merge","Hashie::Mash","Hashie/Mash.html#method-i-merge","(other_hash, &blk)",""],["merge!","Hashie::Mash","Hashie/Mash.html#method-i-merge-21","(other_hash, &blk)",""],["method_missing","Hashie::Extensions::MethodQuery","Hashie/Extensions/MethodQuery.html#method-i-method_missing","(name, *args)",""],["method_missing","Hashie::Extensions::MethodReader","Hashie/Extensions/MethodReader.html#method-i-method_missing","(name, *args)",""],["method_missing","Hashie::Extensions::MethodWriter","Hashie/Extensions/MethodWriter.html#method-i-method_missing","(name, *args)",""],["method_missing","Hashie::Mash","Hashie/Mash.html#method-i-method_missing","(method_name, *args, &blk)",""],["new","Hashie::Clash","Hashie/Clash.html#method-c-new","(other_hash = {}, parent = nil)","<p>Initialize a new clash by passing in a Hash to convert and, optionally, the\nparent to which this Clash …\n"],["new","Hashie::Dash","Hashie/Dash.html#method-c-new","(attributes = {}, &block)","<p>You may initialize a Dash with an attributes hash just like you would many\nother kinds of data objects. …\n"],["new","Hashie::Extensions::MergeInitializer","Hashie/Extensions/MergeInitializer.html#method-c-new","(hash = {}, default = nil, &block)",""],["new","Hashie::Mash","Hashie/Mash.html#method-c-new","(source_hash = nil, default = nil, &blk)","<p>If you pass in an existing hash, it will convert it to a Mash including\nrecursively descending into arrays …\n"],["permitted_keys","Hashie::Extensions::Structure::ClassMethods","Hashie/Extensions/Structure/ClassMethods.html#method-i-permitted_keys","()",""],["property","Hashie::Dash","Hashie/Dash.html#method-c-property","(property_name, options = {})","<p>Defines a property on the Dash. Options are as follows:\n<p><code>:default</code> - Specify a default value for this property, ...\n"],["property","Hashie::Trash","Hashie/Trash.html#method-c-property","(property_name, options = {})","<p>Defines a property on the Trash. Options are as follows:\n<p><code>:default</code> - Specify a default value for this property, ...\n\n"],["property?","Hashie::Dash","Hashie/Dash.html#method-c-property-3F","(name)","<p>Check to see if the specified property has already been defined.\n"],["regular_dup","Hashie::Mash","Hashie/Mash.html#method-i-regular_dup","()",""],["regular_reader","Hashie::Mash","Hashie/Mash.html#method-i-regular_reader","(key)",""],["replace","Hashie::Dash","Hashie/Dash.html#method-i-replace","(other_hash)",""],["replace","Hashie::Extensions::Coercion::InstanceMethods","Hashie/Extensions/Coercion/InstanceMethods.html#method-i-replace","(other_hash)",""],["replace","Hashie::Mash","Hashie/Mash.html#method-i-replace","(other_hash)",""],["required?","Hashie::Dash","Hashie/Dash.html#method-c-required-3F","(name)","<p>Check to see if the specified property is required.\n"],["respond_to?","Hashie::Extensions::MethodQuery","Hashie/Extensions/MethodQuery.html#method-i-respond_to-3F","(name, include_private = false)",""],["respond_to?","Hashie::Extensions::MethodReader","Hashie/Extensions/MethodReader.html#method-i-respond_to-3F","(name, include_private = false)",""],["respond_to?","Hashie::Extensions::MethodWriter","Hashie/Extensions/MethodWriter.html#method-i-respond_to-3F","(name, include_private = false)",""],["respond_to?","Hashie::Mash","Hashie/Mash.html#method-i-respond_to-3F","(method_name, include_private=false)","<p>Will return true if the Mash has had a key set in addition to normal\nrespond_to? functionality.\n"],["shallow_merge","Hashie::Mash","Hashie/Mash.html#method-i-shallow_merge","(other_hash)","<p>Performs a shallow_update on a duplicate of the current mash\n"],["shallow_update","Hashie::Mash","Hashie/Mash.html#method-i-shallow_update","(other_hash)","<p>Merges (non-recursively) the hash from the argument, changing the receiving\nhash\n"],["strict_value_coercions","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-strict_value_coercions","()","<p>Return all value coercions that have the :strict rule as true.\n"],["stringify_keys","Hashie::Extensions::StringifyKeys","Hashie/Extensions/StringifyKeys.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n"],["stringify_keys!","Hashie::Extensions::StringifyKeys","Hashie/Extensions/StringifyKeys.html#method-i-stringify_keys-21","()","<p>Convert all keys in the hash to strings.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">test</span> = {:<span class=\"ruby-identifier\">abc</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'def'</span>}\n<span class=\"ruby-identifier\">test</span>.<span class=\"ruby-identifier\">stringify_keys!</span>\n<span class=\"ruby-identifier\">test</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["stringify_keys_recursively!","Hashie::Extensions::StringifyKeys","Hashie/Extensions/StringifyKeys.html#method-i-stringify_keys_recursively-21","(object)","<p>Stringify all keys recursively within nested hashes and arrays.\n"],["symbolize_keys","Hashie::Extensions::SymbolizeKeys","Hashie/Extensions/SymbolizeKeys.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols.\n"],["symbolize_keys!","Hashie::Extensions::SymbolizeKeys","Hashie/Extensions/SymbolizeKeys.html#method-i-symbolize_keys-21","()","<p>Convert all keys in the hash to symbols.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">test</span> = {<span class=\"ruby-string\">'abc'</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">'def'</span>}\n<span class=\"ruby-identifier\">test</span>.<span class=\"ruby-identifier\">symbolize_keys!</span>\n<span class=\"ruby-identifier\">test</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["symbolize_keys_recursively!","Hashie::Extensions::SymbolizeKeys","Hashie/Extensions/SymbolizeKeys.html#method-i-symbolize_keys_recursively-21","(object)","<p>Symbolize all keys recursively within nested hashes and arrays.\n"],["to_hash","Hashie::Hash","Hashie/Hash.html#method-i-to_hash","(options={})","<p>Converts a mash back to a hash (with stringified keys)\n"],["to_json","Hashie::Hash","Hashie/Hash.html#method-i-to_json","(*args)","<p>The C geneartor for the json gem doesn’t like mashies\n"],["to_mash","Hashie::HashExtensions","Hashie/HashExtensions.html#method-i-to_mash","()","<p>Convert this hash into a Mash\n"],["underbang_reader","Hashie::Mash","Hashie/Mash.html#method-i-underbang_reader","(key)","<p>This is the under bang method reader, it will return a temporary new Mash\nif there isn’t a value already …\n"],["update","Hashie::Mash","Hashie/Mash.html#method-i-update","(other_hash, &blk)",""],["value_coercion","Hashie::Extensions::Coercion::ClassMethods","Hashie/Extensions/Coercion/ClassMethods.html#method-i-value_coercion","(value)","<p>Fetch the value coercion, if any, for the specified object.\n"]]}}