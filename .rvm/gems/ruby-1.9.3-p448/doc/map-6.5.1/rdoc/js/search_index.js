var search_data = {"index":{"searchIndex":["kernel","map","arguments","integrations","activerecord","classmethods","options","param","struct","<=>()","==()","=~()","[]()","[]=()","_explode()","add()","add()","add_conversion_method!()","allocate()","alphanumeric_key_for()","alphanumeric_key_for()","apply()","args_for_arity()","bcall()","blank?()","blank?()","breadth_first_each()","breadth_first_each()","bytesize()","call()","clear()","clone()","coerce()","collection_has?()","collection_has?()","collection_key()","collection_key()","collection_set()","collection_set()","combine()","combine()","combine!()","contains()","conversion_methods()","conversion_methods()","convert()","convert_key()","convert_key()","convert_value()","convert_value()","copy()","default()","default=()","define_conversion_method!()","del_opt()","del_opts()","delete()","delete_if()","demongoize()","depth_first_each()","depth_first_each()","depth_first_keys()","depth_first_keys()","depth_first_values()","depth_first_values()","deserialize()","dup()","each()","each_key()","each_pair()","each_value()","each_with_index()","escape()","evolve()","explode()","extractable_options?()","fetch()","first()","for()","for()","for()","forcing()","forcing?()","from_hash()","get()","get_opt()","get_opts()","has?()","has_opt()","has_opts()","id()","included()","initialize_from_array()","initialize_from_hash()","inspect()","intersection()","invert()","keep_if()","key?()","key_for()","key_for()","keys()","keys_for()","klass()","last()","leaf_for()","libdir()","load()","map_for()","map_for()","match()","merge()","method_missing()","method_missing()","mongoize()","name_for()","new()","new()","new()","options()","options_for()","options_for!()","pairs_for()","param_for()","param_for()","parse()","parse()","pop()","pop()","pop!()","popped?()","push()","reject()","reject!()","reorder()","reorder!()","replace()","respond_to?()","reverse_merge()","reverse_merge!()","rm()","select()","serialize()","set()","set_opt()","set_opts()","shift()","stringify_keys()","stringify_keys!()","struct()","struct()","symbolize_keys()","symbolize_keys!()","tap()","to_array()","to_hash()","to_list()","to_map()","to_map()","to_options()","to_options!()","to_params()","to_s()","to_yaml()","unshift()","update()","update_options_for!()","values()","values_at()","version()","with_indifferent_access()","with_indifferent_access!()"],"longSearchIndex":["kernel","map","map::arguments","map::integrations","map::integrations::activerecord","map::integrations::activerecord::classmethods","map::options","map::param","map::struct","map#<=>()","map#==()","map#=~()","map#[]()","map#[]=()","map::_explode()","map::add()","map#add()","map::add_conversion_method!()","map::allocate()","map::alphanumeric_key_for()","map#alphanumeric_key_for()","map#apply()","map::args_for_arity()","map::bcall()","map::blank?()","map#blank?()","map#breadth_first_each()","map::breadth_first_each()","map::param#bytesize()","map::call()","map#clear()","map#clone()","map::coerce()","map#collection_has?()","map::collection_has?()","map#collection_key()","map::collection_key()","map::collection_set()","map#collection_set()","map::combine()","map#combine()","map#combine!()","map#contains()","map#conversion_methods()","map::conversion_methods()","map#convert()","map#convert_key()","map::convert_key()","map::convert_value()","map#convert_value()","map#copy()","map#default()","map#default=()","map::define_conversion_method!()","map::options#del_opt()","map::options#del_opts()","map#delete()","map#delete_if()","map::demongoize()","map#depth_first_each()","map::depth_first_each()","map#depth_first_keys()","map::depth_first_keys()","map::depth_first_values()","map#depth_first_values()","map#deserialize()","map#dup()","map#each()","map#each_key()","map::each_pair()","map#each_value()","map#each_with_index()","map::param#escape()","map::evolve()","map::explode()","map#extractable_options?()","map#fetch()","map#first()","map::for()","map::arguments::for()","map::options::for()","map#forcing()","map#forcing?()","map::from_hash()","map#get()","map::options#get_opt()","map::options#get_opts()","map#has?()","map::options#has_opt()","map::options#has_opts()","map#id()","map::integrations::activerecord::included()","map#initialize_from_array()","map#initialize_from_hash()","map#inspect()","map::intersection()","map#invert()","map#keep_if()","map#key?()","map#key_for()","map::key_for()","map#keys()","map::keys_for()","map#klass()","map#last()","map#leaf_for()","map::libdir()","map::load()","map::map_for()","map#map_for()","map::match()","map#merge()","map#method_missing()","map::struct#method_missing()","map#mongoize()","map#name_for()","map::new()","map::new()","map::struct::new()","map::arguments#options()","map::options_for()","map::options_for!()","map::pairs_for()","map#param_for()","map::param#param_for()","map::arguments::parse()","map::options::parse()","map#pop()","map::options#pop()","map::options#pop!()","map::options#popped?()","map#push()","map#reject()","map#reject!()","map#reorder()","map#reorder!()","map#replace()","map#respond_to?()","map#reverse_merge()","map#reverse_merge!()","map#rm()","map#select()","map#serialize()","map#set()","map::options#set_opt()","map::options#set_opts()","map#shift()","map#stringify_keys()","map#stringify_keys!()","map::struct()","map#struct()","map#symbolize_keys()","map#symbolize_keys!()","map::tap()","map#to_array()","map#to_hash()","map#to_list()","map::integrations::activerecord#to_map()","map::integrations::activerecord::classmethods#to_map()","map#to_options()","map#to_options!()","map#to_params()","map#to_s()","map#to_yaml()","map#unshift()","map#update()","map::update_options_for!()","map#values()","map#values_at()","map::version()","map#with_indifferent_access()","map#with_indifferent_access!()"],"info":[["Kernel","","Kernel.html","",""],["Map","","Map.html","",""],["Map::Arguments","","Map/Arguments.html","",""],["Map::Integrations","","Map/Integrations.html","",""],["Map::Integrations::ActiveRecord","","Map/Integrations/ActiveRecord.html","",""],["Map::Integrations::ActiveRecord::ClassMethods","","Map/Integrations/ActiveRecord/ClassMethods.html","",""],["Map::Options","","Map/Options.html","",""],["Map::Param","","Map/Param.html","",""],["Map::Struct","","Map/Struct.html","",""],["<=>","Map","Map.html#method-i-3C-3D-3E","(other)",""],["==","Map","Map.html#method-i-3D-3D","(other)","<p>equality / sorting / matching support\n"],["=~","Map","Map.html#method-i-3D-7E","(hash)",""],["[]","Map","Map.html#method-i-5B-5D","(key)",""],["[]=","Map","Map.html#method-i-5B-5D-3D","(key, val)",""],["_explode","Map","Map.html#method-c-_explode","(key, value, accum = {:branches => [], :leaves => []})",""],["add","Map","Map.html#method-c-add","(*args)",""],["add","Map","Map.html#method-i-add","(*args)",""],["add_conversion_method!","Map","Map.html#method-c-add_conversion_method-21","(method)",""],["allocate","Map","Map.html#method-c-allocate","()",""],["alphanumeric_key_for","Map","Map.html#method-c-alphanumeric_key_for","(key)",""],["alphanumeric_key_for","Map","Map.html#method-i-alphanumeric_key_for","(key)",""],["apply","Map","Map.html#method-i-apply","(other)",""],["args_for_arity","Map","Map.html#method-c-args_for_arity","(args, arity)",""],["bcall","Map","Map.html#method-c-bcall","(*args, &block)",""],["blank?","Map","Map.html#method-c-blank-3F","(value)",""],["blank?","Map","Map.html#method-i-blank-3F","(*keys)",""],["breadth_first_each","Map","Map.html#method-i-breadth_first_each","(*args, &block)",""],["breadth_first_each","Map","Map.html#method-c-breadth_first_each","(enumerable, accum = [], &block)",""],["bytesize","Map::Param","Map/Param.html#method-i-bytesize","(string)",""],["call","Map","Map.html#method-c-call","(object, method, *args, &block)",""],["clear","Map","Map.html#method-i-clear","()",""],["clone","Map","Map.html#method-i-clone","()",""],["coerce","Map","Map.html#method-c-coerce","(other)",""],["collection_has?","Map","Map.html#method-i-collection_has-3F","(*args, &block)",""],["collection_has?","Map","Map.html#method-c-collection_has-3F","(collection, key, &block)",""],["collection_key","Map","Map.html#method-i-collection_key","(*args, &block)",""],["collection_key","Map","Map.html#method-c-collection_key","(collection, key, &block)",""],["collection_set","Map","Map.html#method-c-collection_set","(collection, key, value, &block)",""],["collection_set","Map","Map.html#method-i-collection_set","(*args, &block)",""],["combine","Map","Map.html#method-c-combine","(*args)",""],["combine","Map","Map.html#method-i-combine","(*args, &block)",""],["combine!","Map","Map.html#method-i-combine-21","(*args, &block)",""],["contains","Map","Map.html#method-i-contains","(other)",""],["conversion_methods","Map","Map.html#method-i-conversion_methods","()","<p>conversions\n"],["conversion_methods","Map","Map.html#method-c-conversion_methods","()",""],["convert","Map","Map.html#method-i-convert","(key, val)",""],["convert_key","Map","Map.html#method-i-convert_key","(key)",""],["convert_key","Map","Map.html#method-c-convert_key","(key)",""],["convert_value","Map","Map.html#method-c-convert_value","(value)",""],["convert_value","Map","Map.html#method-i-convert_value","(value)",""],["copy","Map","Map.html#method-i-copy","()",""],["default","Map","Map.html#method-i-default","(key = nil)",""],["default=","Map","Map.html#method-i-default-3D","(value)",""],["define_conversion_method!","Map","Map.html#method-c-define_conversion_method-21","(method)",""],["del_opt","Map::Options","Map/Options.html#method-i-del_opt","(opts)",""],["del_opts","Map::Options","Map/Options.html#method-i-del_opts","(*opts)",""],["delete","Map","Map.html#method-i-delete","(key)","<p>mutators\n"],["delete_if","Map","Map.html#method-i-delete_if","(&block)",""],["demongoize","Map","Map.html#method-c-demongoize","(object)",""],["depth_first_each","Map","Map.html#method-i-depth_first_each","(*args, &block)",""],["depth_first_each","Map","Map.html#method-c-depth_first_each","(enumerable, path = [], accum = [], &block)","<p>TODO - technically this returns only leaves so the name isn’t\n<strong>quite</strong> right.  re-factor for 3.0\n"],["depth_first_keys","Map","Map.html#method-i-depth_first_keys","(*args, &block)",""],["depth_first_keys","Map","Map.html#method-c-depth_first_keys","(enumerable, path = [], accum = [], &block)",""],["depth_first_values","Map","Map.html#method-c-depth_first_values","(enumerable, path = [], accum = [], &block)",""],["depth_first_values","Map","Map.html#method-i-depth_first_values","(*args, &block)",""],["deserialize","Map","Map.html#method-i-deserialize","(object)",""],["dup","Map","Map.html#method-i-dup","()",""],["each","Map","Map.html#method-i-each","()",""],["each_key","Map","Map.html#method-i-each_key","()",""],["each_pair","Map","Map.html#method-c-each_pair","(*args, &block)","<p>iterate over arguments in pairs smartly.\n"],["each_value","Map","Map.html#method-i-each_value","()",""],["each_with_index","Map","Map.html#method-i-each_with_index","()","<p>iterator methods\n"],["escape","Map::Param","Map/Param.html#method-i-escape","(s)",""],["evolve","Map","Map.html#method-c-evolve","(object)",""],["explode","Map","Map.html#method-c-explode","(hash)",""],["extractable_options?","Map","Map.html#method-i-extractable_options-3F","()","<p>for rails’ extract_options! compat\n"],["fetch","Map","Map.html#method-i-fetch","(key, *args, &block)",""],["first","Map","Map.html#method-i-first","()",""],["for","Map","Map.html#method-c-for","(*args, &block)",""],["for","Map::Arguments","Map/Arguments.html#method-c-for","(args)",""],["for","Map::Options","Map/Options.html#method-c-for","(arg)",""],["forcing","Map","Map.html#method-i-forcing","(forcing=nil, &block)",""],["forcing?","Map","Map.html#method-i-forcing-3F","(forcing=nil)",""],["from_hash","Map","Map.html#method-c-from_hash","(hash, order = nil)","<p>support for building ordered hasshes from a map’s own image\n"],["get","Map","Map.html#method-i-get","(*keys)","<p>support for compound key indexing and depth first iteration\n"],["get_opt","Map::Options","Map/Options.html#method-i-get_opt","(opts, options = {})",""],["get_opts","Map::Options","Map/Options.html#method-i-get_opts","(*opts)",""],["has?","Map","Map.html#method-i-has-3F","(*keys)",""],["has_opt","Map::Options","Map/Options.html#method-i-has_opt","(opts)",""],["has_opts","Map::Options","Map/Options.html#method-i-has_opts","(*opts)",""],["id","Map","Map.html#method-i-id","()",""],["included","Map::Integrations::ActiveRecord","Map/Integrations/ActiveRecord.html#method-c-included","( klass )",""],["initialize_from_array","Map","Map.html#method-i-initialize_from_array","(array)",""],["initialize_from_hash","Map","Map.html#method-i-initialize_from_hash","(hash)",""],["inspect","Map","Map.html#method-i-inspect","(*args, &block)",""],["intersection","Map","Map.html#method-c-intersection","(a, b)",""],["invert","Map","Map.html#method-i-invert","()",""],["keep_if","Map","Map.html#method-i-keep_if","( &block )","<p>See:\ngithub.com/rubinius/rubinius/blob/98c516820d9f78bd63f29dab7d5ec9bc8692064d/kernel/common/hash19.rb#L476-L484\n…\n"],["key?","Map","Map.html#method-i-key-3F","(key)",""],["key_for","Map","Map.html#method-i-key_for","(*keys)",""],["key_for","Map","Map.html#method-c-key_for","(*keys)",""],["keys","Map","Map.html#method-i-keys","()","<p>instance constructor\n"],["keys_for","Map","Map.html#method-c-keys_for","(enumerable)",""],["klass","Map","Map.html#method-i-klass","()","<p>support methods\n"],["last","Map","Map.html#method-i-last","()",""],["leaf_for","Map","Map.html#method-i-leaf_for","(key, options = {}, &block)",""],["libdir","Map","Map.html#method-c-libdir","(*args, &block)",""],["load","Map","Map.html#method-c-load","(*args, &block)",""],["map_for","Map","Map.html#method-c-map_for","(hash)",""],["map_for","Map","Map.html#method-i-map_for","(hash)",""],["match","Map","Map.html#method-c-match","(haystack, needle)",""],["merge","Map","Map.html#method-i-merge","(*args)",""],["method_missing","Map","Map.html#method-i-method_missing","(*args, &block)","<p>a sane method missing that only supports writing values or reading\n*previously set* values\n"],["method_missing","Map::Struct","Map/Struct.html#method-i-method_missing","(method, *args, &block)",""],["mongoize","Map","Map.html#method-i-mongoize","()",""],["name_for","Map","Map.html#method-i-name_for","(*args, &block)",""],["new","Map","Map.html#method-c-new","(*args, &block)",""],["new","Map","Map.html#method-c-new","(*args, &block)",""],["new","Map::Struct","Map/Struct.html#method-c-new","(map)",""],["options","Map::Arguments","Map/Arguments.html#method-i-options","()",""],["options_for","Map","Map.html#method-c-options_for","(*args, &block)",""],["options_for!","Map","Map.html#method-c-options_for-21","(*args, &block)",""],["pairs_for","Map","Map.html#method-c-pairs_for","(enumerable, *args, &block)",""],["param_for","Map","Map.html#method-i-param_for","(*args, &block)",""],["param_for","Map::Param","Map/Param.html#method-i-param_for","(value, prefix = nil)",""],["parse","Map::Arguments","Map/Arguments.html#method-c-parse","(args)",""],["parse","Map::Options","Map/Options.html#method-c-parse","(arg)",""],["pop","Map","Map.html#method-i-pop","()",""],["pop","Map::Options","Map/Options.html#method-i-pop","()",""],["pop!","Map::Options","Map/Options.html#method-i-pop-21","()",""],["popped?","Map::Options","Map/Options.html#method-i-popped-3F","()",""],["push","Map","Map.html#method-i-push","(*args)",""],["reject","Map","Map.html#method-i-reject","(&block)",""],["reject!","Map","Map.html#method-i-reject-21","(&block)",""],["reorder","Map","Map.html#method-i-reorder","(order = {})","<p>reordering support\n"],["reorder!","Map","Map.html#method-i-reorder-21","(order = {})",""],["replace","Map","Map.html#method-i-replace","(*args)",""],["respond_to?","Map","Map.html#method-i-respond_to-3F","(method, *args, &block)",""],["reverse_merge","Map","Map.html#method-i-reverse_merge","(hash)",""],["reverse_merge!","Map","Map.html#method-i-reverse_merge-21","(hash)",""],["rm","Map","Map.html#method-i-rm","(*args)",""],["select","Map","Map.html#method-i-select","()",""],["serialize","Map","Map.html#method-i-serialize","(object)","<p>for mongoid type system support\n"],["set","Map","Map.html#method-i-set","(*args)",""],["set_opt","Map::Options","Map/Options.html#method-i-set_opt","(opts, value = nil)",""],["set_opts","Map::Options","Map/Options.html#method-i-set_opts","(opts)",""],["shift","Map","Map.html#method-i-shift","()","<p>ordered container specific methods\n"],["stringify_keys","Map","Map.html#method-i-stringify_keys","()",""],["stringify_keys!","Map","Map.html#method-i-stringify_keys-21","()","<p>oh rails - would that map.rb existed before all this non-sense…\n"],["struct","Map","Map.html#method-c-struct","(*args, &block)",""],["struct","Map","Map.html#method-i-struct","()",""],["symbolize_keys","Map","Map.html#method-i-symbolize_keys","()",""],["symbolize_keys!","Map","Map.html#method-i-symbolize_keys-21","()",""],["tap","Map","Map.html#method-c-tap","(*args, &block)",""],["to_array","Map","Map.html#method-i-to_array","()",""],["to_hash","Map","Map.html#method-i-to_hash","()",""],["to_list","Map","Map.html#method-i-to_list","()",""],["to_map","Map::Integrations::ActiveRecord","Map/Integrations/ActiveRecord.html#method-i-to_map","( *args )",""],["to_map","Map::Integrations::ActiveRecord::ClassMethods","Map/Integrations/ActiveRecord/ClassMethods.html#method-i-to_map","( record , *args )",""],["to_options","Map","Map.html#method-i-to_options","()",""],["to_options!","Map","Map.html#method-i-to_options-21","()",""],["to_params","Map","Map.html#method-i-to_params","()",""],["to_s","Map","Map.html#method-i-to_s","()",""],["to_yaml","Map","Map.html#method-i-to_yaml","( opts = {} )",""],["unshift","Map","Map.html#method-i-unshift","(*args)",""],["update","Map","Map.html#method-i-update","(*args)",""],["update_options_for!","Map","Map.html#method-c-update_options_for-21","(args, &block)",""],["values","Map","Map.html#method-i-values","()",""],["values_at","Map","Map.html#method-i-values_at","(*keys)",""],["version","Map","Map.html#method-c-version","()",""],["with_indifferent_access","Map","Map.html#method-i-with_indifferent_access","()",""],["with_indifferent_access!","Map","Map.html#method-i-with_indifferent_access-21","()",""]]}}