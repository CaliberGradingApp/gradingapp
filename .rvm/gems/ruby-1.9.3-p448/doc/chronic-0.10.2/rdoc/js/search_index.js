var search_data = {"index":{"searchIndex":["chronic","date","grabber","handler","handlers","minidate","numerizer","ordinal","parser","pointer","repeater","scalar","season","separator","sign","span","tag","time","timezone","token","+()","-()","<=>()","==()","construct()","could_be_day?()","could_be_hour?()","could_be_minute?()","could_be_month?()","could_be_second?()","could_be_subsecond?()","could_be_year?()","day_or_time()","dealias_and_disambiguate_times()","definitions()","equals?()","find_next_season()","find_within()","from_time()","get_anchor()","get_repeaters()","get_tag()","guess()","handle_generic()","handle_m_d()","handle_o_r_g_r()","handle_o_r_s_r()","handle_od_rm()","handle_od_rmn()","handle_od_rmn_sy()","handle_orr()","handle_p_s_r()","handle_r()","handle_r_g_r()","handle_rdn_od()","handle_rdn_rmn_od()","handle_rdn_rmn_od_sy()","handle_rdn_rmn_sd()","handle_rdn_rmn_sd_sy()","handle_rmn_od()","handle_rmn_od_on()","handle_rmn_od_sy()","handle_rmn_sd()","handle_rmn_sd_on()","handle_rmn_sd_sy()","handle_rmn_sy()","handle_s_r_a_s_r_p_a()","handle_s_r_p()","handle_s_r_p_a()","handle_sd_rmn()","handle_sd_rmn_sy()","handle_sd_sm()","handle_sd_sm_sy()","handle_sm_rmn_sy()","handle_sm_sd()","handle_sm_sd_sy()","handle_sm_sy()","handle_srp()","handle_sy_rmn_od()","handle_sy_sm()","handle_sy_sm_sd()","handle_year_and_month()","inspect()","invoke()","is_between?()","make_year()","match()","month_overflow?()","month_overflow?()","new()","new()","new()","new()","new()","new()","next()","normalize_offset()","numerize()","parse()","parse()","pre_normalize()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan()","scan_for_all()","scan_for_all()","scan_for_all()","scan_for_and()","scan_for_at()","scan_for_colon()","scan_for_commas()","scan_for_dash()","scan_for_day_names()","scan_for_day_portions()","scan_for_dots()","scan_for_in()","scan_for_minus()","scan_for_month_names()","scan_for_on()","scan_for_plus()","scan_for_quote()","scan_for_season_names()","scan_for_slash()","scan_for_space()","scan_for_t()","scan_for_times()","scan_for_units()","scan_for_w()","season_after()","season_before()","start=()","tag()","tagged?()","this()","time_with_rollover()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","untag()","width()","width()","license"],"longSearchIndex":["chronic","chronic::date","chronic::grabber","chronic::handler","chronic::handlers","chronic::minidate","chronic::numerizer","chronic::ordinal","chronic::parser","chronic::pointer","chronic::repeater","chronic::scalar","chronic::season","chronic::separator","chronic::sign","chronic::span","chronic::tag","chronic::time","chronic::timezone","chronic::token","chronic::span#+()","chronic::span#-()","chronic::repeater#<=>()","chronic::handler#==()","chronic::construct()","chronic::date::could_be_day?()","chronic::time::could_be_hour?()","chronic::time::could_be_minute?()","chronic::date::could_be_month?()","chronic::time::could_be_second?()","chronic::time::could_be_subsecond?()","chronic::date::could_be_year?()","chronic::handlers#day_or_time()","chronic::handlers#dealias_and_disambiguate_times()","chronic::parser#definitions()","chronic::minidate#equals?()","chronic::season::find_next_season()","chronic::handlers#find_within()","chronic::minidate::from_time()","chronic::handlers#get_anchor()","chronic::handlers#get_repeaters()","chronic::token#get_tag()","chronic::parser#guess()","chronic::handlers#handle_generic()","chronic::handlers#handle_m_d()","chronic::handlers#handle_o_r_g_r()","chronic::handlers#handle_o_r_s_r()","chronic::handlers#handle_od_rm()","chronic::handlers#handle_od_rmn()","chronic::handlers#handle_od_rmn_sy()","chronic::handlers#handle_orr()","chronic::handlers#handle_p_s_r()","chronic::handlers#handle_r()","chronic::handlers#handle_r_g_r()","chronic::handlers#handle_rdn_od()","chronic::handlers#handle_rdn_rmn_od()","chronic::handlers#handle_rdn_rmn_od_sy()","chronic::handlers#handle_rdn_rmn_sd()","chronic::handlers#handle_rdn_rmn_sd_sy()","chronic::handlers#handle_rmn_od()","chronic::handlers#handle_rmn_od_on()","chronic::handlers#handle_rmn_od_sy()","chronic::handlers#handle_rmn_sd()","chronic::handlers#handle_rmn_sd_on()","chronic::handlers#handle_rmn_sd_sy()","chronic::handlers#handle_rmn_sy()","chronic::handlers#handle_s_r_a_s_r_p_a()","chronic::handlers#handle_s_r_p()","chronic::handlers#handle_s_r_p_a()","chronic::handlers#handle_sd_rmn()","chronic::handlers#handle_sd_rmn_sy()","chronic::handlers#handle_sd_sm()","chronic::handlers#handle_sd_sm_sy()","chronic::handlers#handle_sm_rmn_sy()","chronic::handlers#handle_sm_sd()","chronic::handlers#handle_sm_sd_sy()","chronic::handlers#handle_sm_sy()","chronic::handlers#handle_srp()","chronic::handlers#handle_sy_rmn_od()","chronic::handlers#handle_sy_sm()","chronic::handlers#handle_sy_sm_sd()","chronic::handlers#handle_year_and_month()","chronic::token#inspect()","chronic::handler#invoke()","chronic::minidate#is_between?()","chronic::date::make_year()","chronic::handler#match()","chronic::date::month_overflow?()","chronic::handlers#month_overflow?()","chronic::handler::new()","chronic::minidate::new()","chronic::parser::new()","chronic::season::new()","chronic::tag::new()","chronic::token::new()","chronic::repeater#next()","chronic::time::normalize_offset()","chronic::numerizer::numerize()","chronic::parse()","chronic::parser#parse()","chronic::parser#pre_normalize()","chronic::grabber::scan()","chronic::ordinal::scan()","chronic::pointer::scan()","chronic::repeater::scan()","chronic::scalar::scan()","chronic::separator::scan()","chronic::sign::scan()","chronic::timezone::scan()","chronic::grabber::scan_for_all()","chronic::pointer::scan_for_all()","chronic::timezone::scan_for_all()","chronic::separator::scan_for_and()","chronic::separator::scan_for_at()","chronic::separator::scan_for_colon()","chronic::separator::scan_for_commas()","chronic::separator::scan_for_dash()","chronic::repeater::scan_for_day_names()","chronic::repeater::scan_for_day_portions()","chronic::separator::scan_for_dots()","chronic::separator::scan_for_in()","chronic::sign::scan_for_minus()","chronic::repeater::scan_for_month_names()","chronic::separator::scan_for_on()","chronic::sign::scan_for_plus()","chronic::separator::scan_for_quote()","chronic::repeater::scan_for_season_names()","chronic::separator::scan_for_slash()","chronic::separator::scan_for_space()","chronic::separator::scan_for_t()","chronic::repeater::scan_for_times()","chronic::repeater::scan_for_units()","chronic::separator::scan_for_w()","chronic::season::season_after()","chronic::season::season_before()","chronic::tag#start=()","chronic::token#tag()","chronic::token#tagged?()","chronic::repeater#this()","chronic::handlers#time_with_rollover()","chronic::grabber#to_s()","chronic::ordinal#to_s()","chronic::pointer#to_s()","chronic::repeater#to_s()","chronic::scalar#to_s()","chronic::separator#to_s()","chronic::sign#to_s()","chronic::span#to_s()","chronic::timezone#to_s()","chronic::token#to_s()","chronic::token#untag()","chronic::repeater#width()","chronic::span#width()",""],"info":[["Chronic","","Chronic.html","","<p>Parse natural language dates and times into Time or Chronic::Span objects.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'chronic'</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Chronic::Date","","Chronic/Date.html","",""],["Chronic::Grabber","","Chronic/Grabber.html","",""],["Chronic::Handler","","Chronic/Handler.html","",""],["Chronic::Handlers","","Chronic/Handlers.html","",""],["Chronic::MiniDate","","Chronic/MiniDate.html","",""],["Chronic::Numerizer","","Chronic/Numerizer.html","",""],["Chronic::Ordinal","","Chronic/Ordinal.html","",""],["Chronic::Parser","","Chronic/Parser.html","",""],["Chronic::Pointer","","Chronic/Pointer.html","",""],["Chronic::Repeater","","Chronic/Repeater.html","",""],["Chronic::Scalar","","Chronic/Scalar.html","",""],["Chronic::Season","","Chronic/Season.html","",""],["Chronic::Separator","","Chronic/Separator.html","",""],["Chronic::Sign","","Chronic/Sign.html","",""],["Chronic::Span","","Chronic/Span.html","","<p>A Span represents a range of time. Since this class extends Range, you can\nuse #begin and #end to get …\n"],["Chronic::Tag","","Chronic/Tag.html","","<p>Tokens are tagged with subclassed instances of this class when they match\nspecific criteria.\n"],["Chronic::Time","","Chronic/Time.html","",""],["Chronic::TimeZone","","Chronic/TimeZone.html","",""],["Chronic::Token","","Chronic/Token.html","",""],["+","Chronic::Span","Chronic/Span.html#method-i-2B","(seconds)","<p>Add a number of seconds to this span, returning the resulting Span\n"],["-","Chronic::Span","Chronic/Span.html#method-i-2D","(seconds)","<p>Subtract a number of seconds to this span, returning the resulting Span\n"],["<=>","Chronic::Repeater","Chronic/Repeater.html#method-i-3C-3D-3E","(other)",""],["==","Chronic::Handler","Chronic/Handler.html#method-i-3D-3D","(other)","<p>other - The other Handler object to compare.\n<p>Returns true if these Handlers match.\n"],["construct","Chronic","Chronic.html#method-c-construct","(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, offset = nil)","<p>Construct a new time object determining possible month overflows and leap\nyears.\n<p>year   - Integer year. …\n"],["could_be_day?","Chronic::Date","Chronic/Date.html#method-c-could_be_day-3F","(day)","<p>Checks if given number could be day\n"],["could_be_hour?","Chronic::Time","Chronic/Time.html#method-c-could_be_hour-3F","(hour)","<p>Checks if given number could be hour\n"],["could_be_minute?","Chronic::Time","Chronic/Time.html#method-c-could_be_minute-3F","(minute)","<p>Checks if given number could be minute\n"],["could_be_month?","Chronic::Date","Chronic/Date.html#method-c-could_be_month-3F","(month)","<p>Checks if given number could be month\n"],["could_be_second?","Chronic::Time","Chronic/Time.html#method-c-could_be_second-3F","(second)","<p>Checks if given number could be second\n"],["could_be_subsecond?","Chronic::Time","Chronic/Time.html#method-c-could_be_subsecond-3F","(subsecond)","<p>Checks if given number could be subsecond\n"],["could_be_year?","Chronic::Date","Chronic/Date.html#method-c-could_be_year-3F","(year)","<p>Checks if given number could be year\n"],["day_or_time","Chronic::Handlers","Chronic/Handlers.html#method-i-day_or_time","(day_start, time_tokens, options)","<p>support methods\n"],["dealias_and_disambiguate_times","Chronic::Handlers","Chronic/Handlers.html#method-i-dealias_and_disambiguate_times","(tokens, options)",""],["definitions","Chronic::Parser","Chronic/Parser.html#method-i-definitions","(options = {})","<p>List of Handler definitions. See Chronic.parse for a list of options this\nmethod accepts.\n<p>options - An …\n"],["equals?","Chronic::MiniDate","Chronic/MiniDate.html#method-i-equals-3F","(other)",""],["find_next_season","Chronic::Season","Chronic/Season.html#method-c-find_next_season","(season, pointer)",""],["find_within","Chronic::Handlers","Chronic/Handlers.html#method-i-find_within","(tags, span, pointer)","<p>Recursively finds repeaters within other repeaters. Returns a Span\nrepresenting the innermost time span …\n"],["from_time","Chronic::MiniDate","Chronic/MiniDate.html#method-c-from_time","(time)",""],["get_anchor","Chronic::Handlers","Chronic/Handlers.html#method-i-get_anchor","(tokens, options)",""],["get_repeaters","Chronic::Handlers","Chronic/Handlers.html#method-i-get_repeaters","(tokens)",""],["get_tag","Chronic::Token","Chronic/Token.html#method-i-get_tag","(tag_class)","<p>tag_class - The tag Class to search for.\n<p>Returns The first Tag that matches the given class.\n"],["guess","Chronic::Parser","Chronic/Parser.html#method-i-guess","(span, mode = :middle)","<p>Guess a specific time within the given span.\n<p>span - The Chronic::Span object to calcuate a guess from. …\n"],["handle_generic","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_generic","(tokens, options)","<p>Handle generic timestamp (ruby 1.8)\n"],["handle_m_d","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_m_d","(month, day, time_tokens, options)","<p>Handle month/day\n"],["handle_o_r_g_r","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_o_r_g_r","(tokens, options)","<p>Handle ordinal/repeater/grabber/repeater\n"],["handle_o_r_s_r","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_o_r_s_r","(tokens, options)","<p>Handle ordinal/repeater/separator/repeater\n"],["handle_od_rm","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_od_rm","(tokens, options)","<p>Handle ordinal this month\n"],["handle_od_rmn","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_od_rmn","(tokens, options)","<p>Handle ordinal-day/repeater-month-name\n"],["handle_od_rmn_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_od_rmn_sy","(tokens, options)","<p>Handle oridinal-day/repeater-month-name/scalar-year\n"],["handle_orr","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_orr","(tokens, outer_span, options)","<p>Handle oridinal repeaters\n"],["handle_p_s_r","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_p_s_r","(tokens, options)","<p>Handle pointer/scalar/repeater\n"],["handle_r","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_r","(tokens, options)","<p>Handle repeaters\n"],["handle_r_g_r","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_r_g_r","(tokens, options)","<p>Handle repeater/grabber/repeater\n"],["handle_rdn_od","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rdn_od","(tokens, options)","<p>Handle RepeaterDayName OrdinalDay\n"],["handle_rdn_rmn_od","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rdn_rmn_od","(tokens, options)","<p>Handle RepeaterDayName RepeaterMonthName OrdinalDay\n"],["handle_rdn_rmn_od_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rdn_rmn_od_sy","(tokens, options)","<p>Handle RepeaterDayName RepeaterMonthName OrdinalDay ScalarYear\n"],["handle_rdn_rmn_sd","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rdn_rmn_sd","(tokens, options)","<p>Handle RepeaterDayName RepeaterMonthName ScalarDay\n"],["handle_rdn_rmn_sd_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rdn_rmn_sd_sy","(tokens, options)","<p>Handle RepeaterDayName RepeaterMonthName ScalarDay ScalarYear\n"],["handle_rmn_od","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_od","(tokens, options)","<p>Handle repeater-month-name/ordinal-day\n"],["handle_rmn_od_on","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_od_on","(tokens, options)","<p>Handle repeater-month-name/ordinal-day with separator-on\n"],["handle_rmn_od_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_od_sy","(tokens, options)","<p>Handle repeater-month-name/ordinal-day/scalar-year\n"],["handle_rmn_sd","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_sd","(tokens, options)","<p>Handle repeater-month-name/scalar-day\n"],["handle_rmn_sd_on","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_sd_on","(tokens, options)","<p>Handle repeater-month-name/scalar-day with separator-on\n"],["handle_rmn_sd_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_sd_sy","(tokens, options)","<p>Handle repeater-month-name/scalar-day/scalar-year\n"],["handle_rmn_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_rmn_sy","(tokens, options)","<p>Handle repeater-month-name/scalar-year\n"],["handle_s_r_a_s_r_p_a","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_s_r_a_s_r_p_a","(tokens, options)",""],["handle_s_r_p","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_s_r_p","(tokens, options)","<p>Handle scalar/repeater/pointer\n"],["handle_s_r_p_a","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_s_r_p_a","(tokens, options)","<p>Handle scalar/repeater/pointer/anchor\n"],["handle_sd_rmn","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sd_rmn","(tokens, options)","<p>Handle scalar-day/repeater-month-name\n"],["handle_sd_rmn_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sd_rmn_sy","(tokens, options)","<p>Handle scalar-day/repeater-month-name/scalar-year\n"],["handle_sd_sm","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sd_sm","(tokens, options)","<p>Handle scalar-day/scalar-month\n"],["handle_sd_sm_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sd_sm_sy","(tokens, options)","<p>Handle scalar-day/scalar-month/scalar-year (endian little)\n"],["handle_sm_rmn_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sm_rmn_sy","(tokens, options)",""],["handle_sm_sd","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sm_sd","(tokens, options)","<p>Handle scalar-month/scalar-day\n"],["handle_sm_sd_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sm_sd_sy","(tokens, options)","<p>Handle scalar-month/scalar-day/scalar-year (endian middle)\n"],["handle_sm_sy","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sm_sy","(tokens, options)","<p>Handle scalar-month/scalar-year\n"],["handle_srp","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_srp","(tokens, span, options)","<p>Handle scalar/repeater/pointer helper\n"],["handle_sy_rmn_od","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sy_rmn_od","(tokens, options)",""],["handle_sy_sm","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sy_sm","(tokens, options)","<p>Handle scalar-year/scalar-month\n"],["handle_sy_sm_sd","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_sy_sm_sd","(tokens, options)","<p>Handle scalar-year/scalar-month/scalar-day\n"],["handle_year_and_month","Chronic::Handlers","Chronic/Handlers.html#method-i-handle_year_and_month","(year, month)",""],["inspect","Chronic::Token","Chronic/Token.html#method-i-inspect","()",""],["invoke","Chronic::Handler","Chronic/Handler.html#method-i-invoke","(type, tokens, parser, options)",""],["is_between?","Chronic::MiniDate","Chronic/MiniDate.html#method-i-is_between-3F","(md_start, md_end)",""],["make_year","Chronic::Date","Chronic/Date.html#method-c-make_year","(year, bias)","<p>Build a year from a 2 digit suffix.\n<p>year - The two digit Integer year to build from. bias - The Integer …\n"],["match","Chronic::Handler","Chronic/Handler.html#method-i-match","(tokens, definitions)","<p>tokens - An Array of tokens to process. definitions - A Hash of definitions\nto check against.\n<p>Returns …\n"],["month_overflow?","Chronic::Date","Chronic/Date.html#method-c-month_overflow-3F","(year, month, day)",""],["month_overflow?","Chronic::Handlers","Chronic/Handlers.html#method-i-month_overflow-3F","(year, month, day)",""],["new","Chronic::Handler","Chronic/Handler.html#method-c-new","(pattern, handler_method)","<p>pattern        - An Array of patterns to match tokens against.\nhandler_method - A Symbol representing …\n"],["new","Chronic::MiniDate","Chronic/MiniDate.html#method-c-new","(month, day)",""],["new","Chronic::Parser","Chronic/Parser.html#method-c-new","(options = {})","<p>options - An optional Hash of configuration options:\n\n<pre>:context - If your string represents a birthday, ...</pre>\n"],["new","Chronic::Season","Chronic/Season.html#method-c-new","(start_date, end_date)",""],["new","Chronic::Tag","Chronic/Tag.html#method-c-new","(type, options = {})","<p>type - The Symbol type of this tag.\n"],["new","Chronic::Token","Chronic/Token.html#method-c-new","(word)",""],["next","Chronic::Repeater","Chronic/Repeater.html#method-i-next","(pointer)","<p>returns the next occurance of this repeatable.\n"],["normalize_offset","Chronic::Time","Chronic/Time.html#method-c-normalize_offset","(offset)","<p>normalize offset in seconds to offset as string +mm:ss or -mm:ss\n"],["numerize","Chronic::Numerizer","Chronic/Numerizer.html#method-c-numerize","(string)",""],["parse","Chronic","Chronic.html#method-c-parse","(text, options = {})","<p>Parses a string containing a natural language date or time.\n<p>If the parser can find a date or time, either …\n"],["parse","Chronic::Parser","Chronic/Parser.html#method-i-parse","(text)","<p>Parse “text” with the given options Returns either a Time or Chronic::Span,\ndepending on the …\n"],["pre_normalize","Chronic::Parser","Chronic/Parser.html#method-i-pre_normalize","(text)","<p>Clean up the specified text ready for parsing.\n<p>Clean up the string by stripping unwanted characters, converting …\n"],["scan","Chronic::Grabber","Chronic/Grabber.html#method-c-scan","(tokens, options)","<p>Scan an Array of Tokens and apply any necessary Grabber tags to each token.\n<p>tokens  - An Array of Token …\n"],["scan","Chronic::Ordinal","Chronic/Ordinal.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary Ordinal tags to each\ntoken.\n<p>tokens - An Array of …\n"],["scan","Chronic::Pointer","Chronic/Pointer.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary Pointer tags to each\ntoken.\n<p>tokens - An Array of …\n"],["scan","Chronic::Repeater","Chronic/Repeater.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary Repeater tags to\neach token.\n<p>tokens - An Array …\n"],["scan","Chronic::Scalar","Chronic/Scalar.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary Scalar tags to each\ntoken.\n<p>tokens - An Array of …\n"],["scan","Chronic::Separator","Chronic/Separator.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary Separator tags to\neach token.\n<p>tokens - An Array …\n"],["scan","Chronic::Sign","Chronic/Sign.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary Sign tags to each\ntoken.\n<p>tokens - An Array of tokens …\n"],["scan","Chronic::TimeZone","Chronic/TimeZone.html#method-c-scan","(tokens, options)","<p>Scan an Array of Token objects and apply any necessary TimeZone tags to\neach token.\n<p>tokens - An Array …\n"],["scan_for_all","Chronic::Grabber","Chronic/Grabber.html#method-c-scan_for_all","(token)","<p>token - The Token object to scan.\n<p>Returns a new Grabber object.\n"],["scan_for_all","Chronic::Pointer","Chronic/Pointer.html#method-c-scan_for_all","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new Pointer object.\n"],["scan_for_all","Chronic::TimeZone","Chronic/TimeZone.html#method-c-scan_for_all","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new Pointer object.\n"],["scan_for_and","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_and","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeperatorAnd Object object.\n"],["scan_for_at","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_at","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorAt object.\n"],["scan_for_colon","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_colon","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorColon object.\n"],["scan_for_commas","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_commas","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorComma object.\n"],["scan_for_dash","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_dash","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorDash object.\n"],["scan_for_day_names","Chronic::Repeater","Chronic/Repeater.html#method-c-scan_for_day_names","(token, options = {})","<p>token - The Token object we want to scan.\n<p>Returns a new Repeater object.\n"],["scan_for_day_portions","Chronic::Repeater","Chronic/Repeater.html#method-c-scan_for_day_portions","(token, options = {})","<p>token - The Token object we want to scan.\n<p>Returns a new Repeater object.\n"],["scan_for_dots","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_dots","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorDot object.\n"],["scan_for_in","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_in","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorIn object.\n"],["scan_for_minus","Chronic::Sign","Chronic/Sign.html#method-c-scan_for_minus","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SignMinus object.\n"],["scan_for_month_names","Chronic::Repeater","Chronic/Repeater.html#method-c-scan_for_month_names","(token, options = {})","<p>token - The Token object we want to scan.\n<p>Returns a new Repeater object.\n"],["scan_for_on","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_on","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorOn object.\n"],["scan_for_plus","Chronic::Sign","Chronic/Sign.html#method-c-scan_for_plus","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SignPlus object.\n"],["scan_for_quote","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_quote","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorQuote object.\n"],["scan_for_season_names","Chronic::Repeater","Chronic/Repeater.html#method-c-scan_for_season_names","(token, options = {})","<p>token - The Token object we want to scan.\n<p>Returns a new Repeater object.\n"],["scan_for_slash","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_slash","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorSlash object.\n"],["scan_for_space","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_space","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeparatorSpace object.\n"],["scan_for_t","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_t","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeperatorT Object object.\n"],["scan_for_times","Chronic::Repeater","Chronic/Repeater.html#method-c-scan_for_times","(token, options = {})","<p>token - The Token object we want to scan.\n<p>Returns a new Repeater object.\n"],["scan_for_units","Chronic::Repeater","Chronic/Repeater.html#method-c-scan_for_units","(token, options = {})","<p>token - The Token object we want to scan.\n<p>Returns a new Repeater object.\n"],["scan_for_w","Chronic::Separator","Chronic/Separator.html#method-c-scan_for_w","(token)","<p>token - The Token object we want to scan.\n<p>Returns a new SeperatorW Object object.\n"],["season_after","Chronic::Season","Chronic/Season.html#method-c-season_after","(season)",""],["season_before","Chronic::Season","Chronic/Season.html#method-c-season_before","(season)",""],["start=","Chronic::Tag","Chronic/Tag.html#method-i-start-3D","(time)","<p>time - Set the start Time for this Tag.\n"],["tag","Chronic::Token","Chronic/Token.html#method-i-tag","(new_tag)","<p>Tag this token with the specified tag.\n<p>new_tag - The new Tag object.\n<p>Returns nothing.\n"],["tagged?","Chronic::Token","Chronic/Token.html#method-i-tagged-3F","()","<p>Returns true if this token has any tags.\n"],["this","Chronic::Repeater","Chronic/Repeater.html#method-i-this","(pointer)",""],["time_with_rollover","Chronic::Handlers","Chronic/Handlers.html#method-i-time_with_rollover","(year, month, day)",""],["to_s","Chronic::Grabber","Chronic/Grabber.html#method-i-to_s","()",""],["to_s","Chronic::Ordinal","Chronic/Ordinal.html#method-i-to_s","()",""],["to_s","Chronic::Pointer","Chronic/Pointer.html#method-i-to_s","()",""],["to_s","Chronic::Repeater","Chronic/Repeater.html#method-i-to_s","()",""],["to_s","Chronic::Scalar","Chronic/Scalar.html#method-i-to_s","()",""],["to_s","Chronic::Separator","Chronic/Separator.html#method-i-to_s","()",""],["to_s","Chronic::Sign","Chronic/Sign.html#method-i-to_s","()",""],["to_s","Chronic::Span","Chronic/Span.html#method-i-to_s","()","<p>Prints this span in a nice fashion\n"],["to_s","Chronic::TimeZone","Chronic/TimeZone.html#method-i-to_s","()",""],["to_s","Chronic::Token","Chronic/Token.html#method-i-to_s","()","<p>Print this Token in a pretty way\n"],["untag","Chronic::Token","Chronic/Token.html#method-i-untag","(tag_class)","<p>Remove all tags of the given class.\n<p>tag_class - The tag Class to remove.\n<p>Returns nothing.\n"],["width","Chronic::Repeater","Chronic/Repeater.html#method-i-width","()","<p>returns the width (in seconds or months) of this repeatable.\n"],["width","Chronic::Span","Chronic/Span.html#method-i-width","()","<p>Returns the width of this span in seconds\n"],["LICENSE","","LICENSE.html","","<p>The MIT License\n<p>Copyright © Tom Preston-Werner\n<p>Permission is hereby granted, free of charge, to any person …\n"]]}}