var search_data = {"index":{"searchIndex":["fakeweb","multiplematchinguriserror","netconnectnotallowederror","net","bufferedio","http","allow_net_connect=()","allow_net_connect?()","clean_registry()","last_request()","register_uri()","registered_uri?()","license","readme"],"longSearchIndex":["fakeweb","fakeweb::multiplematchinguriserror","fakeweb::netconnectnotallowederror","net","net::bufferedio","net::http","fakeweb::allow_net_connect=()","fakeweb::allow_net_connect?()","fakeweb::clean_registry()","fakeweb::last_request()","fakeweb::register_uri()","fakeweb::registered_uri?()","",""],"info":[["FakeWeb","","FakeWeb.html","",""],["FakeWeb::MultipleMatchingURIsError","","FakeWeb/MultipleMatchingURIsError.html","","<p>This exception is raised if a Net::HTTP request matches more than one of\nthe stubs you’ve registered. …\n"],["FakeWeb::NetConnectNotAllowedError","","FakeWeb/NetConnectNotAllowedError.html","","<p>This exception is raised if you set <code>FakeWeb.allow_net_connect =\nfalse</code> and subsequently try to make a …\n"],["Net","","Net.html","",""],["Net::BufferedIO","","Net/BufferedIO.html","",""],["Net::HTTP","","Net/HTTP.html","",""],["allow_net_connect=","FakeWeb","FakeWeb.html#method-c-allow_net_connect-3D","(allowed)","<p>Enables or disables real HTTP connections for requests that don’t match\nregistered URIs.\n<p>If you set <code>FakeWeb.allow_net_connect</code> …\n"],["allow_net_connect?","FakeWeb","FakeWeb.html#method-c-allow_net_connect-3F","(uri = nil)","<p>Returns <code>true</code> if requests to URIs not registered with FakeWeb\nare passed through to Net::HTTP for normal …\n"],["clean_registry","FakeWeb","FakeWeb.html#method-c-clean_registry","()","<p>Resets the FakeWeb Registry. This will force all subsequent web requests to\nbehave as real requests. …\n"],["last_request","FakeWeb","FakeWeb.html#method-c-last_request","()","<p>Returns the request object from the last request made via Net::HTTP.\n"],["register_uri","FakeWeb","FakeWeb.html#method-c-register_uri","(*args)","<p>Register requests using the HTTP method specified by the symbol\n<code>method</code> for <code>uri</code> to be handled according …\n"],["registered_uri?","FakeWeb","FakeWeb.html#method-c-registered_uri-3F","(*args)","<p>Returns true if a <code>method</code> request for <code>uri</code> is\nregistered with FakeWeb. Specify a method of <code>:any</code> to check …\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright 2006-2010 Blaine Cook, Chris Kampmeier, and other contributors\n<p>Permission is hereby granted, …\n"],["README","","README_rdoc.html","","<p>FakeWeb\n<p>FakeWeb is a helper for faking web requests in Ruby. It works at a global\nlevel, without modifying …\n"]]}}