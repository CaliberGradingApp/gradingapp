var search_data = {"index":{"searchIndex":["debugger","linecache","linecache","object","tracelinenumbers","cache()","cached?()","cached_files()","cached_script?()","checkcache()","clear_file_cache()","empty?()","getline()","getlines()","lnums_for_file()","lnums_for_str()","lnums_for_str_array()","path()","remap_file()","remap_file_lines()","sha1()","size()","stat()","trace_line_numbers()","unmap_file()","unmap_file_line()","update_cache()","yes_no()"],"longSearchIndex":["debugger","debugger::linecache","linecache","object","tracelinenumbers","linecache::cache()","linecache::cached?()","linecache::cached_files()","linecache::cached_script?()","linecache::checkcache()","linecache::clear_file_cache()","linecache::empty?()","linecache::getline()","linecache::getlines()","tracelinenumbers::lnums_for_file()","tracelinenumbers::lnums_for_str()","tracelinenumbers::lnums_for_str_array()","linecache::path()","linecache::remap_file()","linecache::remap_file_lines()","linecache::sha1()","linecache::size()","linecache::stat()","linecache::trace_line_numbers()","linecache::unmap_file()","linecache::unmap_file_line()","linecache::update_cache()","object#yes_no()"],"info":[["Debugger","","Debugger.html","",""],["Debugger::Linecache","","Debugger/Linecache.html","",""],["LineCache","","LineCache.html","","<p>module LineCache\n<p>A module to read and cache lines of a Ruby program.\n"],["Object","","Object.html","",""],["TraceLineNumbers","","TraceLineNumbers.html","","<p>$Id$\n"],["cache","LineCache","LineCache.html#method-c-cache","(filename, reload_on_change=false)","<p>Cache filename if it’s not already cached. Return the expanded filename for\nit in the cache or nil if …\n"],["cached?","LineCache","LineCache.html#method-c-cached-3F","(filename)","<p>Return true if filename is cached\n"],["cached_files","LineCache","LineCache.html#method-c-cached_files","()","<p>Return an array of cached file names\n"],["cached_script?","LineCache","LineCache.html#method-c-cached_script-3F","(filename)",""],["checkcache","LineCache","LineCache.html#method-c-checkcache","(filename=nil, use_script_lines=false)","<p>Discard cache entries that are out of date. If <code>filename</code> is\n<code>nil</code> all entries in the file cache +@@file_cache …\n"],["clear_file_cache","LineCache","LineCache.html#method-c-clear_file_cache","()","<p>Clear the file cache entirely.\n"],["empty?","LineCache","LineCache.html#method-c-empty-3F","(filename)",""],["getline","LineCache","LineCache.html#method-c-getline","(filename, line_number, reload_on_change=true)","<p>Get line <code>line_number</code> from file named <code>filename</code>.\nReturn nil if there was a problem. If a file named filename …\n"],["getlines","LineCache","LineCache.html#method-c-getlines","(filename, reload_on_change=false)","<p>Read lines of <code>filename</code> and cache the results. However\n<code>filename</code> was previously cached use the results …\n"],["lnums_for_file","TraceLineNumbers","TraceLineNumbers.html#method-c-lnums_for_file","(file)",""],["lnums_for_str","TraceLineNumbers","TraceLineNumbers.html#method-c-lnums_for_str","(src)","<p>Return an array of lines numbers that could be stopped at given a file name\nof a Ruby program.\n"],["lnums_for_str_array","TraceLineNumbers","TraceLineNumbers.html#method-c-lnums_for_str_array","(string_array, newline='')","<p>Return an array of lines numbers that could be stopped at given a file name\nof a Ruby program. We assume …\n"],["path","LineCache","LineCache.html#method-c-path","(filename)","<p>Return full filename path for filename\n"],["remap_file","LineCache","LineCache.html#method-c-remap_file","(from_file, to_file)",""],["remap_file_lines","LineCache","LineCache.html#method-c-remap_file_lines","(from_file, to_file, range, start)",""],["sha1","LineCache","LineCache.html#method-c-sha1","(filename)","<p>Return SHA1 of filename.\n"],["size","LineCache","LineCache.html#method-c-size","(filename)","<p>Return the number of lines in filename\n"],["stat","LineCache","LineCache.html#method-c-stat","(filename)","<p>Return File.stat in the cache for filename.\n"],["trace_line_numbers","LineCache","LineCache.html#method-c-trace_line_numbers","(filename, reload_on_change=false)","<p>Return an Array of breakpoints in filename. The list will contain an entry\nfor each distinct line event …\n"],["unmap_file","LineCache","LineCache.html#method-c-unmap_file","(file)",""],["unmap_file_line","LineCache","LineCache.html#method-c-unmap_file_line","(file, line)",""],["update_cache","LineCache","LineCache.html#method-c-update_cache","(filename, use_script_lines=false)","<p>Update a cache entry.  If something’s wrong, return nil. Return true if the\ncache was updated and false …\n"],["yes_no","Object","Object.html#method-i-yes_no","(var)",""]]}}