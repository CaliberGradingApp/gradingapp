var search_data = {"index":{"searchIndex":["attributeexception","boolexception","colorexception","doubleexception","graphviz","attrs","constants","dotscript","dotscriptdata","dsl","edge","elements","ext","familytree","couple","generation","person","sibling","graphml","graphmlerror","math","coordinateerror","matrix","valueerror","node","theory","types","arrowtype","color","colorlist","common","escstring","gvbool","gvdouble","htmlstring","lblstring","rect","splinetype","utils","colors","xml","hash","object","rectexception","splinetypeexception","string","*()","-()","-()","-()","<<()","<<()","<<()","<<()","==()",">()",">()",">>()",">>()","matrix()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","add()","add_attribute()","add_edge()","add_edges()","add_graph()","add_node()","add_nodes()","add_type()","adjancy_matrix()","append()","append()","append_attributes_and_types()","attributs()","bfs()","check()","check()","check()","check()","check()","check()","check()","check()","check()","check()","cluster()","column()","columns()","complete()","complete!()","convert_base()","couple()","critical_path()","default()","degree()","dfs()","digraph()","directed?()","e()","each()","each()","each_attribut()","each_attribut()","each_attribut()","each_attribute()","each_attribute()","each_attribute()","each_edge()","each_except()","each_graph()","each_node()","edge_count()","empty?()","endp()","find()","find_node()","generation()","getattrsfor()","getkids()","get_edge_at_index()","get_graph()","get_node()","get_node_at_index()","graph()","graph()","graph_count()","graphml_data()","has_parent_graph?()","head_node()","hsv()","hsv()","hsv_string()","hsv_to_rgb()","hsv_to_rgb()","id()","id()","id()","incidence_matrix()","incidents()","index()","index()","is_a_boy()","is_a_girl()","is_a_man()","is_a_woman()","is_dead()","is_divorced_with()","is_maried_with()","is_widower_of()","key()","kids()","kids()","laplacian_matrix()","libxslt_transform()","line()","lines()","make_subgraph()","matrix()","moore_dijkstra()","n()","name()","name()","name()","name()","neighbors()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","node_count()","node_one()","node_two()","nothugly()","number()","options()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","output()","pagerank()","parse()","parse_string()","persons()","point()","prepend()","push()","random()","range()","remove_column()","remove_line()","rgb()","rgb()","rgb_to_hsv()","rgb_to_hsv()","rgba_string()","root_graph()","root_graph()","root_graph()","save()","search_node()","set()","set()","sibling()","sibling=()","size()","size()","size_of()","source()","startp()","strict()","subgraph()","subgraph()","sum_of_column()","sum_of_line()","symbolize_keys()","symmetric?()","tail_node()","to_a()","to_f()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_gv()","to_h()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_ruby()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_str()","transpose()","triples()","type()","xml_xslt_transform()","authors","changelog","copying","readme"],"longSearchIndex":["attributeexception","boolexception","colorexception","doubleexception","graphviz","graphviz::attrs","graphviz::constants","graphviz::dotscript","graphviz::dotscriptdata","graphviz::dsl","graphviz::edge","graphviz::elements","graphviz::ext","graphviz::familytree","graphviz::familytree::couple","graphviz::familytree::generation","graphviz::familytree::person","graphviz::familytree::sibling","graphviz::graphml","graphviz::graphmlerror","graphviz::math","graphviz::math::coordinateerror","graphviz::math::matrix","graphviz::math::valueerror","graphviz::node","graphviz::theory","graphviz::types","graphviz::types::arrowtype","graphviz::types::color","graphviz::types::colorlist","graphviz::types::common","graphviz::types::escstring","graphviz::types::gvbool","graphviz::types::gvdouble","graphviz::types::htmlstring","graphviz::types::lblstring","graphviz::types::rect","graphviz::types::splinetype","graphviz::utils","graphviz::utils::colors","graphviz::xml","hash","object","rectexception","splinetypeexception","string","graphviz::math::matrix#*()","graphviz#-()","graphviz::math::matrix#-()","graphviz::node#-()","graphviz#<<()","graphviz::dotscript#<<()","graphviz::dotscriptdata#<<()","graphviz::node#<<()","graphviz::math::matrix#==()","graphviz#>()","graphviz::node#>()","graphviz#>>()","graphviz::node#>>()","graphviz::math::matrix()","graphviz#[]()","graphviz::attrs#[]()","graphviz::edge#[]()","graphviz::elements#[]()","graphviz::math::matrix#[]()","graphviz::node#[]()","graphviz#[]=()","graphviz::attrs#[]=()","graphviz::edge#[]=()","graphviz::math::matrix#[]=()","graphviz::node#[]=()","graphviz#add()","graphviz::dotscriptdata#add_attribute()","graphviz#add_edge()","graphviz#add_edges()","graphviz#add_graph()","graphviz#add_node()","graphviz#add_nodes()","graphviz::dotscript#add_type()","graphviz::theory#adjancy_matrix()","graphviz::dotscript#append()","graphviz::dotscriptdata#append()","graphviz#append_attributes_and_types()","graphviz::graphml#attributs()","graphviz::theory#bfs()","graphviz::types::arrowtype#check()","graphviz::types::color#check()","graphviz::types::colorlist#check()","graphviz::types::escstring#check()","graphviz::types::gvbool#check()","graphviz::types::gvdouble#check()","graphviz::types::htmlstring#check()","graphviz::types::lblstring#check()","graphviz::types::rect#check()","graphviz::types::splinetype#check()","graphviz::dsl#cluster()","graphviz::math::matrix#column()","graphviz::math::matrix#columns()","graphviz#complete()","graphviz#complete!()","string#convert_base()","graphviz::familytree#couple()","graphviz::theory#critical_path()","graphviz::default()","graphviz::theory#degree()","graphviz::theory#dfs()","object#digraph()","graphviz#directed?()","graphviz::dsl#e()","graphviz::attrs#each()","graphviz::elements#each()","graphviz#each_attribut()","graphviz::edge#each_attribut()","graphviz::node#each_attribut()","graphviz#each_attribute()","graphviz::edge#each_attribute()","graphviz::node#each_attribute()","graphviz#each_edge()","hash#each_except()","graphviz#each_graph()","graphviz#each_node()","graphviz#edge_count()","graphviz::dotscriptdata#empty?()","graphviz::types::splinetype#endp()","graphviz::ext::find()","graphviz#find_node()","graphviz::familytree#generation()","graphviz::constants::getattrsfor()","graphviz::familytree::couple#getkids()","graphviz#get_edge_at_index()","graphviz#get_graph()","graphviz#get_node()","graphviz#get_node_at_index()","graphviz::familytree#graph()","object#graph()","graphviz#graph_count()","graphviz::graphml#graphml_data()","graphviz#has_parent_graph?()","graphviz::edge#head_node()","graphviz::utils::colors#hsv()","graphviz::utils::colors::hsv()","graphviz::utils::colors#hsv_string()","graphviz::utils::colors#hsv_to_rgb()","graphviz::utils::colors::hsv_to_rgb()","graphviz#id()","graphviz::familytree::person#id()","graphviz::node#id()","graphviz::theory#incidence_matrix()","graphviz::theory#incidents()","graphviz::edge#index()","graphviz::node#index()","graphviz::familytree::person#is_a_boy()","graphviz::familytree::person#is_a_girl()","graphviz::familytree::person#is_a_man()","graphviz::familytree::person#is_a_woman()","graphviz::familytree::person#is_dead()","graphviz::familytree::person#is_divorced_with()","graphviz::familytree::person#is_maried_with()","graphviz::familytree::person#is_widower_of()","hash#key()","graphviz::familytree::couple#kids()","graphviz::familytree::person#kids()","graphviz::theory#laplacian_matrix()","graphviz::libxslt_transform()","graphviz::math::matrix#line()","graphviz::math::matrix#lines()","graphviz::dotscript#make_subgraph()","graphviz::math::matrix#matrix()","graphviz::theory#moore_dijkstra()","graphviz::dsl#n()","graphviz#name()","graphviz::familytree::person#name()","graphviz::utils::colors#name()","graphviz::utils::colors::name()","graphviz::theory#neighbors()","graphviz::new()","graphviz::attrs::new()","graphviz::dotscript::new()","graphviz::dotscriptdata::new()","graphviz::dsl::new()","graphviz::edge::new()","graphviz::elements::new()","graphviz::familytree::new()","graphviz::familytree::sibling::new()","graphviz::graphml::new()","graphviz::math::matrix::new()","graphviz::node::new()","graphviz::theory::new()","graphviz::types::common::new()","graphviz::utils::colors::new()","graphviz::xml::new()","graphviz#node_count()","graphviz::edge#node_one()","graphviz::edge#node_two()","graphviz::nothugly()","graphviz::familytree::generation#number()","graphviz::options()","graphviz#output()","graphviz::dsl#output()","graphviz::types::arrowtype#output()","graphviz::types::color#output()","graphviz::types::colorlist#output()","graphviz::types::common#output()","graphviz::types::escstring#output()","graphviz::types::gvbool#output()","graphviz::types::gvdouble#output()","graphviz::types::htmlstring#output()","graphviz::types::lblstring#output()","graphviz::types::rect#output()","graphviz::types::splinetype#output()","graphviz::xml#output()","graphviz::theory#pagerank()","graphviz::parse()","graphviz::parse_string()","graphviz::familytree::generation#persons()","graphviz::types::splinetype#point()","graphviz::dotscript#prepend()","graphviz::elements#push()","string::random()","graphviz::theory#range()","graphviz::math::matrix#remove_column()","graphviz::math::matrix#remove_line()","graphviz::utils::colors::rgb()","graphviz::utils::colors#rgb()","graphviz::utils::colors#rgb_to_hsv()","graphviz::utils::colors::rgb_to_hsv()","graphviz::utils::colors#rgba_string()","graphviz#root_graph()","graphviz::edge#root_graph()","graphviz::node#root_graph()","graphviz#save()","graphviz#search_node()","graphviz::edge#set()","graphviz::node#set()","graphviz::familytree::person#sibling()","graphviz::familytree::person#sibling=()","graphviz::familytree#size()","graphviz::familytree::generation#size()","graphviz::elements#size_of()","graphviz::types::common#source()","graphviz::types::splinetype#startp()","object#strict()","graphviz#subgraph()","graphviz::dsl#subgraph()","graphviz::math::matrix#sum_of_column()","graphviz::math::matrix#sum_of_line()","hash#symbolize_keys()","graphviz::theory#symmetric?()","graphviz::edge#tail_node()","graphviz::math::matrix#to_a()","graphviz::types::gvdouble#to_f()","graphviz::types::arrowtype#to_gv()","graphviz::types::color#to_gv()","graphviz::types::colorlist#to_gv()","graphviz::types::escstring#to_gv()","graphviz::types::gvbool#to_gv()","graphviz::types::gvdouble#to_gv()","graphviz::types::htmlstring#to_gv()","graphviz::types::lblstring#to_gv()","graphviz::types::rect#to_gv()","graphviz::types::splinetype#to_gv()","graphviz::attrs#to_h()","graphviz::types::arrowtype#to_ruby()","graphviz::types::color#to_ruby()","graphviz::types::colorlist#to_ruby()","graphviz::types::escstring#to_ruby()","graphviz::types::gvbool#to_ruby()","graphviz::types::gvdouble#to_ruby()","graphviz::types::htmlstring#to_ruby()","graphviz::types::lblstring#to_ruby()","graphviz::types::rect#to_ruby()","object#to_ruby()","graphviz#to_s()","graphviz::dotscript#to_s()","graphviz::dotscriptdata#to_s()","graphviz::math::matrix#to_s()","graphviz::types::arrowtype#to_s()","graphviz::types::color#to_s()","graphviz::types::colorlist#to_s()","graphviz::types::escstring#to_s()","graphviz::types::gvbool#to_s()","graphviz::types::gvdouble#to_s()","graphviz::types::htmlstring#to_s()","graphviz::types::lblstring#to_s()","graphviz::types::rect#to_s()","graphviz::types::splinetype#to_s()","graphviz::dotscript#to_str()","graphviz::dotscriptdata#to_str()","graphviz::math::matrix#transpose()","graphviz::types::splinetype#triples()","graphviz#type()","graphviz::xml_xslt_transform()","","","",""],"info":[["AttributeException","","AttributeException.html","","<p>Copyright (C) 2004 - 2012 Gregoire Lejeune &lt;gregoire.lejeune@free.fr&gt;\n<p>This program is free software; …\n"],["BoolException","","BoolException.html","",""],["ColorException","","ColorException.html","",""],["DoubleException","","DoubleException.html","",""],["GraphViz","","GraphViz.html","","<p>spliteType or point\n<p>spline ( ‘;’ spline )* where spline =  (endp)? (startp)? point (triple)+\nand triple …\n"],["GraphViz::Attrs","","GraphViz/Attrs.html","",""],["GraphViz::Constants","","GraphViz/Constants.html","",""],["GraphViz::DOTScript","","GraphViz/DOTScript.html","",""],["GraphViz::DOTScriptData","","GraphViz/DOTScriptData.html","",""],["GraphViz::DSL","","GraphViz/DSL.html","",""],["GraphViz::Edge","","GraphViz/Edge.html","",""],["GraphViz::Elements","","GraphViz/Elements.html","",""],["GraphViz::Ext","","GraphViz/Ext.html","",""],["GraphViz::FamilyTree","","GraphViz/FamilyTree.html","",""],["GraphViz::FamilyTree::Couple","","GraphViz/FamilyTree/Couple.html","",""],["GraphViz::FamilyTree::Generation","","GraphViz/FamilyTree/Generation.html","",""],["GraphViz::FamilyTree::Person","","GraphViz/FamilyTree/Person.html","",""],["GraphViz::FamilyTree::Sibling","","GraphViz/FamilyTree/Sibling.html","",""],["GraphViz::GraphML","","GraphViz/GraphML.html","",""],["GraphViz::GraphMLError","","GraphViz/GraphMLError.html","",""],["GraphViz::Math","","GraphViz/Math.html","",""],["GraphViz::Math::CoordinateError","","GraphViz/Math/CoordinateError.html","",""],["GraphViz::Math::Matrix","","GraphViz/Math/Matrix.html","",""],["GraphViz::Math::ValueError","","GraphViz/Math/ValueError.html","",""],["GraphViz::Node","","GraphViz/Node.html","",""],["GraphViz::Theory","","GraphViz/Theory.html","",""],["GraphViz::Types","","GraphViz/Types.html","",""],["GraphViz::Types::ArrowType","","GraphViz/Types/ArrowType.html","",""],["GraphViz::Types::Color","","GraphViz/Types/Color.html","",""],["GraphViz::Types::ColorList","","GraphViz/Types/ColorList.html","",""],["GraphViz::Types::Common","","GraphViz/Types/Common.html","",""],["GraphViz::Types::EscString","","GraphViz/Types/EscString.html","",""],["GraphViz::Types::GvBool","","GraphViz/Types/GvBool.html","",""],["GraphViz::Types::GvDouble","","GraphViz/Types/GvDouble.html","",""],["GraphViz::Types::HtmlString","","GraphViz/Types/HtmlString.html","",""],["GraphViz::Types::LblString","","GraphViz/Types/LblString.html","",""],["GraphViz::Types::Rect","","GraphViz/Types/Rect.html","",""],["GraphViz::Types::SplineType","","GraphViz/Types/SplineType.html","",""],["GraphViz::Utils","","GraphViz/Utils.html","",""],["GraphViz::Utils::Colors","","GraphViz/Utils/Colors.html","",""],["GraphViz::XML","","GraphViz/XML.html","",""],["Hash","","Hash.html","","<p>From :\nwww.geekmade.co.uk/2008/09/ruby-tip-normalizing-hash-keys-as-symbols/\n"],["Object","","Object.html","",""],["RectException","","RectException.html","",""],["SplineTypeException","","SplineTypeException.html","",""],["String","","String.html","",""],["*","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-2A","(m)",""],["-","GraphViz","GraphViz.html#method-i-2D","( oNode )",""],["-","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-2D","(m)",""],["-","GraphViz::Node","GraphViz/Node.html#method-i-2D","( node )",""],["<<","GraphViz","GraphViz.html#method-i-3C-3C","( oNode )","<p>Create an edge between the current cluster and the node or cluster\n<code>oNode</code>\n"],["<<","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-3C-3C","(line)",""],["<<","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-i-3C-3C","(data)",""],["<<","GraphViz::Node","GraphViz/Node.html#method-i-3C-3C","( node )","<p>Create an edge between the current node and the node <code>node</code>\n"],["==","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-3D-3D","(m)",""],[">","GraphViz","GraphViz.html#method-i-3E","( oNode )",""],[">","GraphViz::Node","GraphViz/Node.html#method-i-3E","( node )",""],[">>","GraphViz","GraphViz.html#method-i-3E-3E","( oNode )",""],[">>","GraphViz::Node","GraphViz/Node.html#method-i-3E-3E","( node )",""],["Matrix","GraphViz::Math","GraphViz/Math.html#method-c-Matrix","( line, column = 0, val = 0 )",""],["[]","GraphViz","GraphViz.html#method-i-5B-5D","( xAttrName )","<p>Get the value of the graph attribute <code>xAttrName</code>\n"],["[]","GraphViz::Attrs","GraphViz/Attrs.html#method-i-5B-5D","( key )",""],["[]","GraphViz::Edge","GraphViz/Edge.html#method-i-5B-5D","( attribute_name )","<p>Set values for edge attributes or get the value of the given edge attribute\n<code>attribute_name</code>\n"],["[]","GraphViz::Elements","GraphViz/Elements.html#method-i-5B-5D","( index, type = nil )",""],["[]","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-5B-5D","(line, column)",""],["[]","GraphViz::Node","GraphViz/Node.html#method-i-5B-5D","( attribute_name )","<p>Get the value of the node attribute <code>attribute_name</code>\n"],["[]=","GraphViz","GraphViz.html#method-i-5B-5D-3D","( xAttrName, xValue )","<p>Set value <code>xValue</code> to the graph attribute <code>xAttrName</code>\n"],["[]=","GraphViz::Attrs","GraphViz/Attrs.html#method-i-5B-5D-3D","( key, value )",""],["[]=","GraphViz::Edge","GraphViz/Edge.html#method-i-5B-5D-3D","( attribute_name, attribute_value )","<p>Set value <code>attribute_value</code> to the edge attribute\n<code>attribute_name</code>\n"],["[]=","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-5B-5D-3D","( line, column, val )",""],["[]=","GraphViz::Node","GraphViz/Node.html#method-i-5B-5D-3D","( attribute_name, attribute_value )","<p>Set value <code>attribute_value</code> to the node attribute\n<code>attribute_name</code>\n"],["add","GraphViz","GraphViz.html#method-i-add","(h)","<p>Add nodes and edges defined by a Hash\n"],["add_attribute","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-i-add_attribute","(name, value)",""],["add_edge","GraphViz","GraphViz.html#method-i-add_edge","( oNodeOne, oNodeTwo, hOpts = {} )",""],["add_edges","GraphViz","GraphViz.html#method-i-add_edges","( node_one, node_two, options = {} )","<p>Create a new edge\n<p>In:\n<p>node_one : First node (or node list)\n"],["add_graph","GraphViz","GraphViz.html#method-i-add_graph","( xGraphName = nil, hOpts = {}, &block )","<p>Create a new graph\n<p>In:\n<p>xGraphName : Graph name\n"],["add_node","GraphViz","GraphViz.html#method-i-add_node","( xNodeName, hOpts = {} )",""],["add_nodes","GraphViz","GraphViz.html#method-i-add_nodes","(node_name, options = {})","<p>Create a new node\n<p>In:\n<p>xNodeName : Name of the new node\n"],["add_type","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-add_type","(type, data)",""],["adjancy_matrix","GraphViz::Theory","GraphViz/Theory.html#method-i-adjancy_matrix","()","<p>Return the adjancy matrix of the graph\n"],["append","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-append","(line)",""],["append","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-i-append","(data)",""],["append_attributes_and_types","GraphViz","GraphViz.html#method-i-append_attributes_and_types","(script)",""],["attributs","GraphViz::GraphML","GraphViz/GraphML.html#method-i-attributs","()",""],["bfs","GraphViz::Theory","GraphViz/Theory.html#method-i-bfs","(node, &b)","<p>Breadth First Search\n"],["check","GraphViz::Types::ArrowType","GraphViz/Types/ArrowType.html#method-i-check","(data)",""],["check","GraphViz::Types::Color","GraphViz/Types/Color.html#method-i-check","(data)",""],["check","GraphViz::Types::ColorList","GraphViz/Types/ColorList.html#method-i-check","(data)",""],["check","GraphViz::Types::EscString","GraphViz/Types/EscString.html#method-i-check","(data)",""],["check","GraphViz::Types::GvBool","GraphViz/Types/GvBool.html#method-i-check","(data)",""],["check","GraphViz::Types::GvDouble","GraphViz/Types/GvDouble.html#method-i-check","(data)",""],["check","GraphViz::Types::HtmlString","GraphViz/Types/HtmlString.html#method-i-check","(data)",""],["check","GraphViz::Types::LblString","GraphViz/Types/LblString.html#method-i-check","(data)",""],["check","GraphViz::Types::Rect","GraphViz/Types/Rect.html#method-i-check","(data)",""],["check","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-check","(data)",""],["cluster","GraphViz::DSL","GraphViz/DSL.html#method-i-cluster","(name, &block)",""],["column","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-column","( column )",""],["columns","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-columns","()",""],["complete","GraphViz","GraphViz.html#method-i-complete","()","<p>Return a new completed graph\n"],["complete!","GraphViz","GraphViz.html#method-i-complete-21","()","<p>Complete the current graph\n"],["convert_base","String","String.html#method-i-convert_base","(from, to)",""],["couple","GraphViz::FamilyTree","GraphViz/FamilyTree.html#method-i-couple","( x, y )","<p>Get a couple (GraphViz::FamilyTree::Couple)\n"],["critical_path","GraphViz::Theory","GraphViz/Theory.html#method-i-critical_path","()","<p>Return the critical path for a PERT network\n<p>If the given graph is not a PERT network, return nul\n"],["default","GraphViz","GraphViz.html#method-c-default","( hOpts )","<p>Change default options (:use, :path, :errors and :output)\n"],["degree","GraphViz::Theory","GraphViz/Theory.html#method-i-degree","( node )","<p>Return the degree of the given node\n"],["dfs","GraphViz::Theory","GraphViz/Theory.html#method-i-dfs","(node, &b)","<p>Depth First Search\n"],["digraph","Object","Object.html#method-i-digraph","(name, options = {}, &block)","<p>Create a new directed graph\n"],["directed?","GraphViz","GraphViz.html#method-i-directed-3F","()","<p>Return true if the graph is directed.\n"],["e","GraphViz::DSL","GraphViz/DSL.html#method-i-e","(*args)","<p>Create edges\n"],["each","GraphViz::Attrs","GraphViz/Attrs.html#method-i-each","()",""],["each","GraphViz::Elements","GraphViz/Elements.html#method-i-each","( &b )",""],["each_attribut","GraphViz","GraphViz.html#method-i-each_attribut","(&b)",""],["each_attribut","GraphViz::Edge","GraphViz/Edge.html#method-i-each_attribut","(global = true, &b)",""],["each_attribut","GraphViz::Node","GraphViz/Node.html#method-i-each_attribut","(global = true, &b)",""],["each_attribute","GraphViz","GraphViz.html#method-i-each_attribute","(&b)","<p>Calls block once for each attribute of the graph, passing the name and\nvalue to the block as a two-element …\n"],["each_attribute","GraphViz::Edge","GraphViz/Edge.html#method-i-each_attribute","(global = true, &b)","<p>Calls block once for each attribute of the edge, passing the name and value\nto the block as a two-element …\n"],["each_attribute","GraphViz::Node","GraphViz/Node.html#method-i-each_attribute","(global = true, &b)","<p>Calls block once for each attribute of the node, passing the name and value\nto the block as a two-element …\n"],["each_edge","GraphViz","GraphViz.html#method-i-each_edge","( &block )","<p>Allow you to traverse edges\n"],["each_except","Hash","Hash.html#method-i-each_except","( e, &b )","<p>x = {\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">none</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">String</span>,\n:<span class=\"ruby-identifier\">png</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;file.png&quot;</span>,\n:<span class=\"ruby-identifier\">svg</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;file.svg&quot;</span>\n</pre>\n<p>}\n"],["each_graph","GraphViz","GraphViz.html#method-i-each_graph","( &block )","<p>Allow you to traverse graphs\n"],["each_node","GraphViz","GraphViz.html#method-i-each_node","( &block )","<p>Allow you to traverse nodes\n"],["edge_count","GraphViz","GraphViz.html#method-i-edge_count","()","<p>Get the number of edges\n"],["empty?","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-i-empty-3F","()",""],["endp","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-endp","()",""],["find","GraphViz::Ext","GraphViz/Ext.html#method-c-find","( ext = nil )",""],["find_node","GraphViz","GraphViz.html#method-i-find_node","(name)","<p>Returns the first node found in the entire graph, starting from the root\ngraph\n"],["generation","GraphViz::FamilyTree","GraphViz/FamilyTree.html#method-i-generation","( &b )","<p>Add a new generation in the tree\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'graphviz/family_tree'</span>\n<span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">GraphViz</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FamilyTree</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">generation</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["getAttrsFor","GraphViz::Constants","GraphViz/Constants.html#method-c-getAttrsFor","( x )",""],["getKids","GraphViz::FamilyTree::Couple","GraphViz/FamilyTree/Couple.html#method-i-getKids","()",""],["get_edge_at_index","GraphViz","GraphViz.html#method-i-get_edge_at_index","( index )","<p>Return the edge object for the given index\n"],["get_graph","GraphViz","GraphViz.html#method-i-get_graph","( xGraphName, &block )","<p>Return the graph object for the given name (or nil)\n"],["get_node","GraphViz","GraphViz.html#method-i-get_node","( xNodeName, &block )","<p>Return the node object for the given name (or nil) in the current graph\n"],["get_node_at_index","GraphViz","GraphViz.html#method-i-get_node_at_index","( index )","<p>Return the node object for the given index\n"],["graph","GraphViz::FamilyTree","GraphViz/FamilyTree.html#method-i-graph","()","<p>Get the graph\n"],["graph","Object","Object.html#method-i-graph","(name, options = {}, &block)","<p>Create a new undirected graph\n"],["graph_count","GraphViz","GraphViz.html#method-i-graph_count","()","<p>Get the number of graphs\n"],["graphml_data","GraphViz::GraphML","GraphViz/GraphML.html#method-i-graphml_data","(node)",""],["has_parent_graph?","GraphViz","GraphViz.html#method-i-has_parent_graph-3F","()",""],["head_node","GraphViz::Edge","GraphViz/Edge.html#method-i-head_node","( with_port = true )",""],["hsv","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-hsv","(h, s, v)",""],["hsv","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-c-hsv","(h, s, v)",""],["hsv_string","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-hsv_string","(s = \", \")",""],["hsv_to_rgb","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-hsv_to_rgb","(h, s, v)",""],["hsv_to_rgb","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-c-hsv_to_rgb","(h, s, v)",""],["id","GraphViz","GraphViz.html#method-i-id","()",""],["id","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-id","()",""],["id","GraphViz::Node","GraphViz/Node.html#method-i-id","()","<p>Get the node ID\n"],["incidence_matrix","GraphViz::Theory","GraphViz/Theory.html#method-i-incidence_matrix","()","<p>Return the incidence matrix of the graph\n"],["incidents","GraphViz::Theory","GraphViz/Theory.html#method-i-incidents","(node)","<p>Return the list of nodes that are incident to the given node (in a directed\ngraph neighbors == incidents) …\n"],["index","GraphViz::Edge","GraphViz/Edge.html#method-i-index","()","<p>Return the index of the edge\n"],["index","GraphViz::Node","GraphViz/Node.html#method-i-index","()","<p>Return the node index\n"],["is_a_boy","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_a_boy","( name )","<p>Define the current person as a boy\n\n<pre>greg.is_a_boy( &quot;Greg&quot; )</pre>\n"],["is_a_girl","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_a_girl","( name )","<p>Define the current perdon as a girl\n\n<pre>maia.is_a_girl( &quot;Maia&quot; )</pre>\n"],["is_a_man","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_a_man","( name )","<p>Define the current person as a man\n\n<pre>greg.is_a_man( &quot;Greg&quot; )</pre>\n"],["is_a_woman","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_a_woman","( name )","<p>Define the current perdon as a woman\n\n<pre>mu.is_a_woman( &quot;Muriel&quot; )</pre>\n"],["is_dead","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_dead","()","<p>Define the current person as dead\n\n<pre>jack.is_dead</pre>\n"],["is_divorced_with","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_divorced_with","( x )","<p>Define that’s two persons are divorced\n\n<pre>sophie.is_divorced_with john</pre>\n"],["is_maried_with","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_maried_with","( x )","<p>Define that’s two persons are maried\n\n<pre>mu.is_maried_with greg</pre>\n"],["is_widower_of","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-is_widower_of","( x )","<p>Define that’s a person is widower of another\n\n<pre>simon.is_widower_of elisa</pre>\n"],["key","Hash","Hash.html#method-i-key","(v)","<p>Add Hash#key to Ruby &lt; 1.9\n"],["kids","GraphViz::FamilyTree::Couple","GraphViz/FamilyTree/Couple.html#method-i-kids","( *z )","<p>Add kids to a couple\n"],["kids","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-kids","( *z )","<p>Define the kids of a single person\n\n<pre>alice.kids( john, jack, julie )</pre>\n"],["laplacian_matrix","GraphViz::Theory","GraphViz/Theory.html#method-i-laplacian_matrix","()","<p>Return the laplacian matrix of the graph\n"],["libxslt_transform","GraphViz","GraphViz.html#method-c-libxslt_transform","(xml, xsl)",""],["line","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-line","( line )",""],["lines","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-lines","()",""],["make_subgraph","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-make_subgraph","(name)",""],["matrix","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-matrix","()",""],["moore_dijkstra","GraphViz::Theory","GraphViz/Theory.html#method-i-moore_dijkstra","( dep, arv )","<p>moore_dijkstra(source, destination)\n"],["n","GraphViz::DSL","GraphViz/DSL.html#method-i-n","(name)","<p>Add a new node\n"],["name","GraphViz","GraphViz.html#method-i-name","()","<p>Get the graph name\n"],["name","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-name","()",""],["name","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-name","(c = nil)",""],["name","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-c-name","(c)",""],["neighbors","GraphViz::Theory","GraphViz/Theory.html#method-i-neighbors","(node)","<p>Return the list of nodes that are directly accessible from given node\n"],["new","GraphViz","GraphViz.html#method-c-new","( xGraphName, hOpts = {}, &block )","<p>Create a new graph object\n<p>Options :\n<p>:output : Output format (GraphViz::Constants::FORMATS) (default : dot) …\n"],["new","GraphViz::Attrs","GraphViz/Attrs.html#method-c-new","( gviz, name, attributes )",""],["new","GraphViz::DOTScript","GraphViz/DOTScript.html#method-c-new","()",""],["new","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-c-new","(type = nil)",""],["new","GraphViz::DSL","GraphViz/DSL.html#method-c-new","(name, options = {}, &block)","<p>Create a new graph\n"],["new","GraphViz::Edge","GraphViz/Edge.html#method-c-new","( vNodeOne, vNodeTwo, parent_graph )","<p>Create a new edge\n<p>In:\n<p>vNodeOne : First node (can be a GraphViz::Node or a node ID)\n"],["new","GraphViz::Elements","GraphViz/Elements.html#method-c-new","()",""],["new","GraphViz::FamilyTree","GraphViz/FamilyTree.html#method-c-new","( &block )","<p>Create a new family tree\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">'graphviz/family_tree'</span>\n<span class=\"ruby-identifier\">t</span> = <span class=\"ruby-constant\">GraphViz</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">FamilyTree</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-operator\">...</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["new","GraphViz::FamilyTree::Sibling","GraphViz/FamilyTree/Sibling.html#method-c-new","( bns, parents )",""],["new","GraphViz::GraphML","GraphViz/GraphML.html#method-c-new","( file_or_str )","<p>Create a new GraphViz object from a GraphML file of string\n"],["new","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-c-new","( line_or_array, column = 0, val = 0 )",""],["new","GraphViz::Node","GraphViz/Node.html#method-c-new","( node_id, parent_graph )","<p>Create a new node\n<p>node_id : ID of the node\n<p>parent_graph : Graph\n"],["new","GraphViz::Theory","GraphViz/Theory.html#method-c-new","( graph )",""],["new","GraphViz::Types::Common","GraphViz/Types/Common.html#method-c-new","( data )",""],["new","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-c-new","()",""],["new","GraphViz::XML","GraphViz/XML.html#method-c-new","( xml_file, *options )","<p>Create a graph from a XML file\n<p>In:\n<p>xml_file : XML File\n"],["node_count","GraphViz","GraphViz.html#method-i-node_count","()","<p>Get the number of nodes\n"],["node_one","GraphViz::Edge","GraphViz/Edge.html#method-i-node_one","( with_port = true )","<p>Return the node one as string (so with port if any)\n"],["node_two","GraphViz::Edge","GraphViz/Edge.html#method-i-node_two","( with_port = true )","<p>Return the node two as string (so with port if any)\n"],["nothugly","GraphViz","GraphViz.html#method-c-nothugly","( file, save = true )","<p>Transform to pretty up the SVG output\n<p>For more information, see\nwww.hokstad.com/making-graphviz-output-pretty-with-xsl.html …\n"],["number","GraphViz::FamilyTree::Generation","GraphViz/FamilyTree/Generation.html#method-i-number","()","<p>Generation number\n"],["options","GraphViz","GraphViz.html#method-c-options","( hOpts )",""],["output","GraphViz","GraphViz.html#method-i-output","( hOpts = {} )","<p>Generate the graph\n<p>Options :\n<p>:output : Output format (GraphViz::Constants::FORMATS)\n"],["output","GraphViz::DSL","GraphViz/DSL.html#method-i-output","(options = {})","<p>Generate output\n"],["output","GraphViz::Types::ArrowType","GraphViz/Types/ArrowType.html#method-i-output","()",""],["output","GraphViz::Types::Color","GraphViz/Types/Color.html#method-i-output","()",""],["output","GraphViz::Types::ColorList","GraphViz/Types/ColorList.html#method-i-output","()",""],["output","GraphViz::Types::Common","GraphViz/Types/Common.html#method-i-output","()",""],["output","GraphViz::Types::EscString","GraphViz/Types/EscString.html#method-i-output","()",""],["output","GraphViz::Types::GvBool","GraphViz/Types/GvBool.html#method-i-output","()",""],["output","GraphViz::Types::GvDouble","GraphViz/Types/GvDouble.html#method-i-output","()",""],["output","GraphViz::Types::HtmlString","GraphViz/Types/HtmlString.html#method-i-output","()",""],["output","GraphViz::Types::LblString","GraphViz/Types/LblString.html#method-i-output","()",""],["output","GraphViz::Types::Rect","GraphViz/Types/Rect.html#method-i-output","()",""],["output","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-output","()",""],["output","GraphViz::XML","GraphViz/XML.html#method-i-output","( *options )","<p>Generate the graph\n<p>THIS METHOD IS DEPRECATED, PLEASE USE GraphViz::XML.graph.output\n"],["pagerank","GraphViz::Theory","GraphViz/Theory.html#method-i-pagerank","(damping_factor = 0.85, max_iterations = 100, min_delta = 0.00001)","<p>Return the PageRank in an directed graph.\n<p>damping_factor: PageRank dumping factor.\n<p>max_iterations: Maximum …\n"],["parse","GraphViz","GraphViz.html#method-c-parse","( xFile, hOpts = {}, &block )","<p>Create a new graph from a GraphViz File\n<p>Options :\n<p>:output : Output format (GraphViz::Constants::FORMATS …\n"],["parse_string","GraphViz","GraphViz.html#method-c-parse_string","( str, hOpts = {}, &block )","<p>Create a new graph from a GraphViz File\n<p>Options :\n<p>:output : Output format (GraphViz::Constants::FORMATS …\n"],["persons","GraphViz::FamilyTree::Generation","GraphViz/FamilyTree/Generation.html#method-i-persons","()",""],["point","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-point","()",""],["prepend","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-prepend","(line)",""],["push","GraphViz::Elements","GraphViz/Elements.html#method-i-push","( obj )",""],["random","String","String.html#method-c-random","(size)",""],["range","GraphViz::Theory","GraphViz/Theory.html#method-i-range","()","<p>Return a liste of range\n<p>If the returned array include nil values, there is one or more circuits in\nthe …\n"],["remove_column","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-remove_column","(n)",""],["remove_line","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-remove_line","(n)",""],["rgb","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-c-rgb","(r, g, b, a = nil)",""],["rgb","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-rgb","(r, g, b, a = nil)",""],["rgb_to_hsv","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-rgb_to_hsv","(r, g, b)",""],["rgb_to_hsv","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-c-rgb_to_hsv","(r, g, b)",""],["rgba_string","GraphViz::Utils::Colors","GraphViz/Utils/Colors.html#method-i-rgba_string","(c = \"\")",""],["root_graph","GraphViz","GraphViz.html#method-i-root_graph","()","<p>Return the root graph\n"],["root_graph","GraphViz::Edge","GraphViz/Edge.html#method-i-root_graph","()","<p>Return the root graph\n"],["root_graph","GraphViz::Node","GraphViz/Node.html#method-i-root_graph","()","<p>Return the root graph\n"],["save","GraphViz","GraphViz.html#method-i-save","( hOpts = {} )",""],["search_node","GraphViz","GraphViz.html#method-i-search_node","(name)","<p>Return the first node found in the current graph, and it subgraphs\n"],["set","GraphViz::Edge","GraphViz/Edge.html#method-i-set","( &b )","<p>Set edge attributes\n<p>Example :\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">e</span> = <span class=\"ruby-identifier\">graph</span>.<span class=\"ruby-identifier\">add_edges</span>( <span class=\"ruby-operator\">...</span> )\n<span class=\"ruby-operator\">...</span>\n<span class=\"ruby-identifier\">e</span>.<span class=\"ruby-identifier\">set</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">_e</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">_e</span>.<span class=\"ruby-identifier\">color</span> = <span class=\"ruby-string\">&quot;blue&quot;</span>\n  <span class=\"ruby-identifier\">_e</span>.<span class=\"ruby-identifier\">fontcolor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set","GraphViz::Node","GraphViz/Node.html#method-i-set","( &b )","<p>Set node attributes\n<p>Example :\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">n</span> = <span class=\"ruby-identifier\">graph</span>.<span class=\"ruby-identifier\">add_nodes</span>( <span class=\"ruby-operator\">...</span> )\n<span class=\"ruby-operator\">...</span>\n<span class=\"ruby-identifier\">n</span>.<span class=\"ruby-identifier\">set</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">_n</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">_n</span>.<span class=\"ruby-identifier\">color</span> = <span class=\"ruby-string\">&quot;blue&quot;</span>\n  <span class=\"ruby-identifier\">_n</span>.<span class=\"ruby-identifier\">fontcolor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sibling","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-sibling","()",""],["sibling=","GraphViz::FamilyTree::Person","GraphViz/FamilyTree/Person.html#method-i-sibling-3D","(x)",""],["size","GraphViz::FamilyTree","GraphViz/FamilyTree.html#method-i-size","()","<p>Family size\n"],["size","GraphViz::FamilyTree::Generation","GraphViz/FamilyTree/Generation.html#method-i-size","()","<p>Generation size\n"],["size_of","GraphViz::Elements","GraphViz/Elements.html#method-i-size_of","( type )",""],["source","GraphViz::Types::Common","GraphViz/Types/Common.html#method-i-source","()",""],["startp","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-startp","()",""],["strict","Object","Object.html#method-i-strict","(name, options = {}, &block)","<p>Create a new strict directed graph\n"],["subgraph","GraphViz","GraphViz.html#method-i-subgraph","( xGraphName = nil, hOpts = {}, &block )",""],["subgraph","GraphViz::DSL","GraphViz/DSL.html#method-i-subgraph","(name, &block)","<p>Add a subgraph\n"],["sum_of_column","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-sum_of_column","(n)",""],["sum_of_line","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-sum_of_line","(n)",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()",""],["symmetric?","GraphViz::Theory","GraphViz/Theory.html#method-i-symmetric-3F","()","<p>Return <code>true</code> if the graph if symmetric, <code>false</code>\notherwise\n"],["tail_node","GraphViz::Edge","GraphViz/Edge.html#method-i-tail_node","( with_port = true )",""],["to_a","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-to_a","()",""],["to_f","GraphViz::Types::GvDouble","GraphViz/Types/GvDouble.html#method-i-to_f","()",""],["to_gv","GraphViz::Types::ArrowType","GraphViz/Types/ArrowType.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::Color","GraphViz/Types/Color.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::ColorList","GraphViz/Types/ColorList.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::EscString","GraphViz/Types/EscString.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::GvBool","GraphViz/Types/GvBool.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::GvDouble","GraphViz/Types/GvDouble.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::HtmlString","GraphViz/Types/HtmlString.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::LblString","GraphViz/Types/LblString.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::Rect","GraphViz/Types/Rect.html#method-i-to_gv","()",""],["to_gv","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-to_gv","()",""],["to_h","GraphViz::Attrs","GraphViz/Attrs.html#method-i-to_h","()",""],["to_ruby","GraphViz::Types::ArrowType","GraphViz/Types/ArrowType.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::Color","GraphViz/Types/Color.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::ColorList","GraphViz/Types/ColorList.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::EscString","GraphViz/Types/EscString.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::GvBool","GraphViz/Types/GvBool.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::GvDouble","GraphViz/Types/GvDouble.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::HtmlString","GraphViz/Types/HtmlString.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::LblString","GraphViz/Types/LblString.html#method-i-to_ruby","()",""],["to_ruby","GraphViz::Types::Rect","GraphViz/Types/Rect.html#method-i-to_ruby","()",""],["to_ruby","Object","Object.html#method-i-to_ruby","()",""],["to_s","GraphViz","GraphViz.html#method-i-to_s","()",""],["to_s","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-to_s","()",""],["to_s","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-i-to_s","()",""],["to_s","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-to_s","()",""],["to_s","GraphViz::Types::ArrowType","GraphViz/Types/ArrowType.html#method-i-to_s","()",""],["to_s","GraphViz::Types::Color","GraphViz/Types/Color.html#method-i-to_s","()",""],["to_s","GraphViz::Types::ColorList","GraphViz/Types/ColorList.html#method-i-to_s","()",""],["to_s","GraphViz::Types::EscString","GraphViz/Types/EscString.html#method-i-to_s","()",""],["to_s","GraphViz::Types::GvBool","GraphViz/Types/GvBool.html#method-i-to_s","()",""],["to_s","GraphViz::Types::GvDouble","GraphViz/Types/GvDouble.html#method-i-to_s","()",""],["to_s","GraphViz::Types::HtmlString","GraphViz/Types/HtmlString.html#method-i-to_s","()",""],["to_s","GraphViz::Types::LblString","GraphViz/Types/LblString.html#method-i-to_s","()",""],["to_s","GraphViz::Types::Rect","GraphViz/Types/Rect.html#method-i-to_s","()",""],["to_s","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-to_s","()",""],["to_str","GraphViz::DOTScript","GraphViz/DOTScript.html#method-i-to_str","()",""],["to_str","GraphViz::DOTScriptData","GraphViz/DOTScriptData.html#method-i-to_str","()",""],["transpose","GraphViz::Math::Matrix","GraphViz/Math/Matrix.html#method-i-transpose","()",""],["triples","GraphViz::Types::SplineType","GraphViz/Types/SplineType.html#method-i-triples","()",""],["type","GraphViz","GraphViz.html#method-i-type","()","<p>Return the graph type (graph digraph)\n"],["xml_xslt_transform","GraphViz","GraphViz.html#method-c-xml_xslt_transform","(xml, xsl)",""],["AUTHORS","","AUTHORS_rdoc.html","","<p>Gregoire Lejeune &lt;glejeune.lejeune@free.fr&gt;\n<p>Brandon Coleman &lt;metrix1978@gmail.com&gt;\n<p>Dave Burt …\n"],["CHANGELOG","","CHANGELOG_rdoc.html","","<p>CHANGELOG\n<p>1.0.9 :\n<p>Add support for attributs\n"],["COPYING","","COPYING_rdoc.html","","<p>GNU GENERAL PUBLIC LICENSE \n<p>Version 2, June 1991\n<p>Copyright (C) 1989, 1991 Free Software Foundation, Inc …\n"],["README","","README_rdoc.html","","<p>Ruby/GraphViz\n<p><img src=\"https://secure.travis-ci.org/glejeune/Ruby-Graphviz.png\" />\n<p>Copyright (C) 2004-2012 …\n"]]}}