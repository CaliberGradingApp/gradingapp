var search_data = {"index":{"searchIndex":["marshal","rspec","mocks","allowancetarget","ambiguousreturnerror","andcalloriginalimplementation","andreturnimplementation","andyieldimplementation","anyinstance","chain","customizations","expectationchain","messagechains","positiveexpectationchain","recorder","stubchain","stubchainchain","anyinstanceallowancetarget","anyinstanceexpectationtarget","argumentlistmatcher","argumentmatchers","anyargmatcher","anyargsmatcher","booleanmatcher","ducktypematcher","equalityproxy","hashexcludingmatcher","hashincludingmatcher","instanceof","kindof","matchermatcher","noargsmatcher","regexpmatcher","configuration","constant","constantmutator","basemutator","constanthider","definedconstantreplacer","undefinedconstantsetter","constantstubber","deprecation","errorgenerator","examplemethods","expecthost","expectationtarget","implementation","instanceexec","instancemethodstasher","matchers","havereceived","receive","customization","messageexpectation","methoddouble","procwithblock","mock","mockexpectationerror","ordergroup","proxy","proxyfornil","recursiveconstmethods","space","stubchain","syntax","targetbase","testdouble","version","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","__build_mock_proxy()","a_kind_of()","actual_received_count_matters?()","add()","add_default_stub()","add_expectation()","add_message_expectation()","add_message_expectation()","add_negative_message_expectation()","add_stub()","add_stub()","add_stub()","add_stub_and_should_receive_to()","advise()","all_expectations_fulfilled?()","allow()","allow_any_instance_of()","allow_message()","allow_message_expectations_on_nil()","already_observing?()","already_proxied_respond_to()","already_proxied_respond_to?()","an_instance_of()","and_call_original()","and_raise()","and_return()","and_throw()","and_yield()","any_args()","any_instance()","any_instance_class_recorder_observing_method?()","any_instance_recorder_for()","any_instance_recorder_for()","any_number_of_times()","anything()","arg_slice_for()","args_match?()","arity()","arity()","arity()","as_null_object()","as_null_object()","as_null_object()","at_least()","at_most()","boolean()","build_alias_method_name()","build_expectation()","build_expectation()","call()","call()","call()","call()","call()","called_max_times?()","check_for_unexpected_arguments()","clear()","clear()","configuration()","configure_method()","const_defined_on?()","constants_defined_on()","constrained_to_any_of?()","consume()","default_should_syntax_host()","define_proxy_method()","delegate_to()","deprecate()","describe_expectation()","description()","description()","description()","description()","description()","description()","disable_expect()","disable_should()","disallow_negation()","does_not_match?()","does_not_match?()","double()","duck_type()","dump()","dump_with_mocks()","dump_without_mocks()","empty?()","enable_expect()","enable_should()","ensure_registered()","exactly()","expect()","expect_any_instance_of()","expect_enabled?()","expect_message()","expectation_count_type()","expectation_fulfilled!()","expectation_fulfilled?()","expectation_fulfilled?()","expectation_ordering()","expectations()","expected_args()","expected_messages_received?()","expected_part_of_expectation_error()","extend_onto()","failure_message()","find()","find()","generate_error()","get_const_defined_on()","handle_order_constraint()","has_expectation?()","has_negative_expectation?()","hash_excluding()","hash_including()","hash_not_including()","have_received()","hidden?()","hide()","hide()","hide_const()","id_for()","ignoring_args?()","included()","increase_actual_received_count!()","initial_action=()","inner_action=()","inspect()","inspect()","instance_exec()","instance_of()","instance_that_received()","invoke()","kind_of()","matches?()","matches?()","matches?()","matches_at_least_count?()","matches_at_most_count?()","matches_exact_count?()","matches_name_but_not_args()","message_received()","method_call_args_description()","method_handle_for()","method_is_stashed?()","mock()","mutate()","mutate()","mutate()","mutate()","mutate()","mutated?()","mutators()","mutators()","negative?()","negative_expectation_for?()","negative_failure_message()","never()","never()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_args()","normalize_const_name()","null_object?()","null_object?()","null_object?()","object_singleton_class()","once()","opts()","ordered()","original()","original_method()","original_method_from_ancestor()","original_method_from_ancestry()","original_method_from_superclass()","original_unrecorded_any_instance_method()","playback!()","playback!()","playback!()","playback_onto()","present?()","present?()","previously_defined?()","proxies_of()","proxies_of()","proxy_for()","proxy_for()","raise_block_failed_error()","raise_double_negation_error()","raise_expectation_error()","raise_expectation_on_mocked_method()","raise_expectation_on_unstubbed_method()","raise_method_not_stubbed_error()","raise_missing_block_error()","raise_missing_default_stub_error()","raise_missing_default_stub_error()","raise_on_invalid_const()","raise_on_invalid_const()","raise_only_valid_on_a_partial_mock()","raise_out_of_order_error()","raise_out_of_order_error()","raise_similar_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_error()","raise_unexpected_message_error()","raise_wrong_arity_error()","ready_for?()","receive()","received_expected_message!()","received_message?()","received_message?()","received_part_of_expectation_error()","record()","record_message_received()","recursive_const_defined?()","recursive_const_get()","register()","register_mutator()","register_mutator()","registered?()","remove_any_instance_recorder_for()","remove_single_stub()","remove_single_stub()","remove_stub()","remove_stub()","remove_stub_chains_for!()","replay_received_message_on()","reset()","reset()","reset_all()","reset_all()","reset_all()","respond_to?()","restore()","restore_original_method()","restore_original_visibility()","rspec_reset()","rspec_reset()","rspec_reset()","setup()","setup_allowance()","setup_any_instance_allowance()","setup_any_instance_expectation()","setup_any_instance_negative_expectation()","setup_expectation()","setup_negative_expectation()","should_enabled?()","should_not_receive()","should_not_receive()","should_receive()","should_receive()","similar_messages()","stash()","stashed_method_name()","stop_all_observation!()","stub()","stub()","stub()","stub()","stub()","stub!()","stub!()","stub_chain()","stub_chain()","stub_chain()","stub_chain_on()","stub_const()","stub_object()","stubbed?()","stubs()","syntax()","syntax=()","teardown()","terminal_action=()","times()","to_constant()","to_constant()","to_constant()","to_constant()","to_s()","to_s()","to_str()","transfer_nested_constants()","twice()","unfulfilled_expectations()","unstub()","unstub()","unstub!()","unstub!()","verify()","verify()","verify()","verify()","verify_all()","verify_constants_to_transfer!()","verify_messages_received()","visibility()","visibility_for_method()","with()"],"longSearchIndex":["marshal","rspec","rspec::mocks","rspec::mocks::allowancetarget","rspec::mocks::ambiguousreturnerror","rspec::mocks::andcalloriginalimplementation","rspec::mocks::andreturnimplementation","rspec::mocks::andyieldimplementation","rspec::mocks::anyinstance","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::chain::customizations","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::positiveexpectationchain","rspec::mocks::anyinstance::recorder","rspec::mocks::anyinstance::stubchain","rspec::mocks::anyinstance::stubchainchain","rspec::mocks::anyinstanceallowancetarget","rspec::mocks::anyinstanceexpectationtarget","rspec::mocks::argumentlistmatcher","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers::anyargmatcher","rspec::mocks::argumentmatchers::anyargsmatcher","rspec::mocks::argumentmatchers::booleanmatcher","rspec::mocks::argumentmatchers::ducktypematcher","rspec::mocks::argumentmatchers::equalityproxy","rspec::mocks::argumentmatchers::hashexcludingmatcher","rspec::mocks::argumentmatchers::hashincludingmatcher","rspec::mocks::argumentmatchers::instanceof","rspec::mocks::argumentmatchers::kindof","rspec::mocks::argumentmatchers::matchermatcher","rspec::mocks::argumentmatchers::noargsmatcher","rspec::mocks::argumentmatchers::regexpmatcher","rspec::mocks::configuration","rspec::mocks::constant","rspec::mocks::constantmutator","rspec::mocks::constantmutator::basemutator","rspec::mocks::constantmutator::constanthider","rspec::mocks::constantmutator::definedconstantreplacer","rspec::mocks::constantmutator::undefinedconstantsetter","rspec::mocks::constantstubber","rspec::mocks::deprecation","rspec::mocks::errorgenerator","rspec::mocks::examplemethods","rspec::mocks::examplemethods::expecthost","rspec::mocks::expectationtarget","rspec::mocks::implementation","rspec::mocks::instanceexec","rspec::mocks::instancemethodstasher","rspec::mocks::matchers","rspec::mocks::matchers::havereceived","rspec::mocks::matchers::receive","rspec::mocks::matchers::receive::customization","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::methoddouble::procwithblock","rspec::mocks::mock","rspec::mocks::mockexpectationerror","rspec::mocks::ordergroup","rspec::mocks::proxy","rspec::mocks::proxyfornil","rspec::mocks::recursiveconstmethods","rspec::mocks::space","rspec::mocks::stubchain","rspec::mocks::syntax","rspec::mocks::targetbase","rspec::mocks::testdouble","rspec::mocks::version","rspec::mocks::argumentmatchers::anyargmatcher#==()","rspec::mocks::argumentmatchers::booleanmatcher#==()","rspec::mocks::argumentmatchers::ducktypematcher#==()","rspec::mocks::argumentmatchers::equalityproxy#==()","rspec::mocks::argumentmatchers::hashexcludingmatcher#==()","rspec::mocks::argumentmatchers::hashincludingmatcher#==()","rspec::mocks::argumentmatchers::instanceof#==()","rspec::mocks::argumentmatchers::kindof#==()","rspec::mocks::argumentmatchers::matchermatcher#==()","rspec::mocks::argumentmatchers::regexpmatcher#==()","rspec::mocks::testdouble#==()","rspec::mocks::testdouble#__build_mock_proxy()","rspec::mocks::argumentmatchers#a_kind_of()","rspec::mocks::messageexpectation#actual_received_count_matters?()","rspec::mocks::anyinstance::messagechains#add()","rspec::mocks::methoddouble#add_default_stub()","rspec::mocks::methoddouble#add_expectation()","rspec::mocks::proxy#add_message_expectation()","rspec::mocks::proxyfornil#add_message_expectation()","rspec::mocks::proxyfornil#add_negative_message_expectation()","rspec::mocks::methoddouble#add_stub()","rspec::mocks::proxy#add_stub()","rspec::mocks::proxyfornil#add_stub()","rspec::mocks::configuration#add_stub_and_should_receive_to()","rspec::mocks::messageexpectation#advise()","rspec::mocks::anyinstance::messagechains#all_expectations_fulfilled?()","rspec::mocks::syntax#allow()","rspec::mocks::syntax#allow_any_instance_of()","rspec::mocks::allow_message()","rspec::mocks::examplemethods#allow_message_expectations_on_nil()","rspec::mocks::anyinstance::recorder#already_observing?()","rspec::mocks::proxy#already_proxied_respond_to()","rspec::mocks::proxy#already_proxied_respond_to?()","rspec::mocks::argumentmatchers#an_instance_of()","rspec::mocks::messageexpectation#and_call_original()","rspec::mocks::messageexpectation#and_raise()","rspec::mocks::messageexpectation#and_return()","rspec::mocks::messageexpectation#and_throw()","rspec::mocks::messageexpectation#and_yield()","rspec::mocks::argumentmatchers#any_args()","rspec::mocks::syntax#any_instance()","rspec::mocks::methoddouble#any_instance_class_recorder_observing_method?()","rspec::mocks::any_instance_recorder_for()","rspec::mocks::space#any_instance_recorder_for()","rspec::mocks::messageexpectation#any_number_of_times()","rspec::mocks::argumentmatchers#anything()","rspec::mocks::implementation#arg_slice_for()","rspec::mocks::argumentlistmatcher#args_match?()","rspec::mocks::andcalloriginalimplementation#arity()","rspec::mocks::andreturnimplementation#arity()","rspec::mocks::andyieldimplementation#arity()","rspec::mocks::proxy#as_null_object()","rspec::mocks::syntax#as_null_object()","rspec::mocks::testdouble#as_null_object()","rspec::mocks::messageexpectation#at_least()","rspec::mocks::messageexpectation#at_most()","rspec::mocks::argumentmatchers#boolean()","rspec::mocks::anyinstance::recorder#build_alias_method_name()","rspec::mocks::methoddouble#build_expectation()","rspec::mocks::proxy#build_expectation()","rspec::mocks::andcalloriginalimplementation#call()","rspec::mocks::andreturnimplementation#call()","rspec::mocks::andyieldimplementation#call()","rspec::mocks::implementation#call()","rspec::mocks::methoddouble::procwithblock#call()","rspec::mocks::messageexpectation#called_max_times?()","rspec::mocks::proxy#check_for_unexpected_arguments()","rspec::mocks::methoddouble#clear()","rspec::mocks::ordergroup#clear()","rspec::mocks::configuration()","rspec::mocks::methoddouble#configure_method()","rspec::mocks::recursiveconstmethods#const_defined_on?()","rspec::mocks::recursiveconstmethods#constants_defined_on()","rspec::mocks::anyinstance::chain#constrained_to_any_of?()","rspec::mocks::ordergroup#consume()","rspec::mocks::syntax::default_should_syntax_host()","rspec::mocks::methoddouble#define_proxy_method()","rspec::mocks::targetbase::delegate_to()","rspec::mocks::deprecation#deprecate()","rspec::mocks::errorgenerator#describe_expectation()","rspec::mocks::argumentmatchers::anyargsmatcher#description()","rspec::mocks::argumentmatchers::hashexcludingmatcher#description()","rspec::mocks::argumentmatchers::hashincludingmatcher#description()","rspec::mocks::argumentmatchers::noargsmatcher#description()","rspec::mocks::matchers::havereceived#description()","rspec::mocks::messageexpectation#description()","rspec::mocks::syntax::disable_expect()","rspec::mocks::syntax::disable_should()","rspec::mocks::targetbase::disallow_negation()","rspec::mocks::matchers::havereceived#does_not_match?()","rspec::mocks::matchers::receive#does_not_match?()","rspec::mocks::examplemethods#double()","rspec::mocks::argumentmatchers#duck_type()","marshal::dump()","marshal::dump_with_mocks()","marshal::dump_without_mocks()","rspec::mocks::ordergroup#empty?()","rspec::mocks::syntax::enable_expect()","rspec::mocks::syntax::enable_should()","rspec::mocks::space#ensure_registered()","rspec::mocks::messageexpectation#exactly()","rspec::mocks::syntax#expect()","rspec::mocks::syntax#expect_any_instance_of()","rspec::mocks::syntax::expect_enabled?()","rspec::mocks::expect_message()","rspec::mocks::messageexpectation#expectation_count_type()","rspec::mocks::anyinstance::chain#expectation_fulfilled!()","rspec::mocks::anyinstance::expectationchain#expectation_fulfilled?()","rspec::mocks::anyinstance::stubchain#expectation_fulfilled?()","rspec::mocks::space#expectation_ordering()","rspec::mocks::methoddouble#expectations()","rspec::mocks::messageexpectation#expected_args()","rspec::mocks::messageexpectation#expected_messages_received?()","rspec::mocks::errorgenerator#expected_part_of_expectation_error()","rspec::mocks::testdouble::extend_onto()","rspec::mocks::matchers::havereceived#failure_message()","rspec::mocks::constantmutator::find()","rspec::mocks::constantmutator::find()","rspec::mocks::messageexpectation#generate_error()","rspec::mocks::recursiveconstmethods#get_const_defined_on()","rspec::mocks::ordergroup#handle_order_constraint()","rspec::mocks::anyinstance::messagechains#has_expectation?()","rspec::mocks::proxy#has_negative_expectation?()","rspec::mocks::argumentmatchers#hash_excluding()","rspec::mocks::argumentmatchers#hash_including()","rspec::mocks::argumentmatchers#hash_not_including()","rspec::mocks::examplemethods#have_received()","rspec::mocks::constant#hidden?()","rspec::mocks::constantmutator::hide()","rspec::mocks::constantmutator::hide()","rspec::mocks::examplemethods#hide_const()","rspec::mocks::space#id_for()","rspec::mocks::messageexpectation#ignoring_args?()","rspec::mocks::examplemethods::included()","rspec::mocks::messageexpectation#increase_actual_received_count!()","rspec::mocks::andcalloriginalimplementation#initial_action=()","rspec::mocks::andcalloriginalimplementation#inner_action=()","rspec::mocks::constant#inspect()","rspec::mocks::testdouble#inspect()","rspec::mocks::instanceexec#instance_exec()","rspec::mocks::argumentmatchers#instance_of()","rspec::mocks::anyinstance::recorder#instance_that_received()","rspec::mocks::messageexpectation#invoke()","rspec::mocks::argumentmatchers#kind_of()","rspec::mocks::matchers::havereceived#matches?()","rspec::mocks::matchers::receive#matches?()","rspec::mocks::messageexpectation#matches?()","rspec::mocks::messageexpectation#matches_at_least_count?()","rspec::mocks::messageexpectation#matches_at_most_count?()","rspec::mocks::messageexpectation#matches_exact_count?()","rspec::mocks::messageexpectation#matches_name_but_not_args()","rspec::mocks::proxy#message_received()","rspec::mocks::errorgenerator#method_call_args_description()","rspec::mocks::method_handle_for()","rspec::mocks::instancemethodstasher#method_is_stashed?()","rspec::mocks::examplemethods#mock()","rspec::mocks::constantmutator::mutate()","rspec::mocks::constantmutator::mutate()","rspec::mocks::constantmutator::constanthider#mutate()","rspec::mocks::constantmutator::definedconstantreplacer#mutate()","rspec::mocks::constantmutator::undefinedconstantsetter#mutate()","rspec::mocks::constant#mutated?()","rspec::mocks::constantmutator::mutators()","rspec::mocks::constantmutator::mutators()","rspec::mocks::messageexpectation#negative?()","rspec::mocks::messageexpectation#negative_expectation_for?()","rspec::mocks::matchers::havereceived#negative_failure_message()","rspec::mocks::anyinstance::chain#never()","rspec::mocks::messageexpectation#never()","rspec::mocks::andcalloriginalimplementation::new()","rspec::mocks::andreturnimplementation::new()","rspec::mocks::andyieldimplementation::new()","rspec::mocks::anyinstance::chain::new()","rspec::mocks::anyinstance::expectationchain::new()","rspec::mocks::anyinstance::messagechains::new()","rspec::mocks::anyinstance::recorder::new()","rspec::mocks::argumentlistmatcher::new()","rspec::mocks::argumentmatchers::anyargmatcher::new()","rspec::mocks::argumentmatchers::booleanmatcher::new()","rspec::mocks::argumentmatchers::ducktypematcher::new()","rspec::mocks::argumentmatchers::equalityproxy::new()","rspec::mocks::argumentmatchers::hashexcludingmatcher::new()","rspec::mocks::argumentmatchers::hashincludingmatcher::new()","rspec::mocks::argumentmatchers::instanceof::new()","rspec::mocks::argumentmatchers::kindof::new()","rspec::mocks::argumentmatchers::matchermatcher::new()","rspec::mocks::argumentmatchers::regexpmatcher::new()","rspec::mocks::constant::new()","rspec::mocks::constantmutator::basemutator::new()","rspec::mocks::errorgenerator::new()","rspec::mocks::instancemethodstasher::new()","rspec::mocks::matchers::havereceived::new()","rspec::mocks::matchers::receive::new()","rspec::mocks::matchers::receive::customization::new()","rspec::mocks::messageexpectation::new()","rspec::mocks::methoddouble::new()","rspec::mocks::ordergroup::new()","rspec::mocks::proxy::new()","rspec::mocks::proxyfornil::new()","rspec::mocks::space::new()","rspec::mocks::stubchain::new()","rspec::mocks::targetbase::new()","rspec::mocks::testdouble::new()","rspec::mocks::argumentmatchers#no_args()","rspec::mocks::recursiveconstmethods#normalize_const_name()","rspec::mocks::proxy#null_object?()","rspec::mocks::syntax#null_object?()","rspec::mocks::testdouble#null_object?()","rspec::mocks::methoddouble#object_singleton_class()","rspec::mocks::messageexpectation#once()","rspec::mocks::errorgenerator#opts()","rspec::mocks::messageexpectation#ordered()","rspec::mocks::constant::original()","rspec::mocks::methoddouble#original_method()","rspec::mocks::methoddouble#original_method_from_ancestor()","rspec::mocks::methoddouble#original_method_from_ancestry()","rspec::mocks::methoddouble#original_method_from_superclass()","rspec::mocks::methoddouble#original_unrecorded_any_instance_method()","rspec::mocks::anyinstance::chain#playback!()","rspec::mocks::anyinstance::messagechains#playback!()","rspec::mocks::anyinstance::recorder#playback!()","rspec::mocks::matchers::receive::customization#playback_onto()","rspec::mocks::andcalloriginalimplementation#present?()","rspec::mocks::implementation#present?()","rspec::mocks::constant#previously_defined?()","rspec::mocks::proxies_of()","rspec::mocks::space#proxies_of()","rspec::mocks::proxy_for()","rspec::mocks::space#proxy_for()","rspec::mocks::errorgenerator#raise_block_failed_error()","rspec::mocks::errorgenerator::raise_double_negation_error()","rspec::mocks::errorgenerator#raise_expectation_error()","rspec::mocks::errorgenerator#raise_expectation_on_mocked_method()","rspec::mocks::errorgenerator#raise_expectation_on_unstubbed_method()","rspec::mocks::methoddouble#raise_method_not_stubbed_error()","rspec::mocks::errorgenerator#raise_missing_block_error()","rspec::mocks::errorgenerator#raise_missing_default_stub_error()","rspec::mocks::proxy#raise_missing_default_stub_error()","rspec::mocks::constantmutator::raise_on_invalid_const()","rspec::mocks::constantmutator::raise_on_invalid_const()","rspec::mocks::errorgenerator#raise_only_valid_on_a_partial_mock()","rspec::mocks::errorgenerator#raise_out_of_order_error()","rspec::mocks::messageexpectation#raise_out_of_order_error()","rspec::mocks::errorgenerator#raise_similar_message_args_error()","rspec::mocks::errorgenerator#raise_unexpected_message_args_error()","rspec::mocks::proxy#raise_unexpected_message_args_error()","rspec::mocks::errorgenerator#raise_unexpected_message_error()","rspec::mocks::proxy#raise_unexpected_message_error()","rspec::mocks::errorgenerator#raise_wrong_arity_error()","rspec::mocks::ordergroup#ready_for?()","rspec::mocks::syntax#receive()","rspec::mocks::anyinstance::messagechains#received_expected_message!()","rspec::mocks::proxy#received_message?()","rspec::mocks::syntax#received_message?()","rspec::mocks::errorgenerator#received_part_of_expectation_error()","rspec::mocks::anyinstance::chain::customizations::record()","rspec::mocks::proxy#record_message_received()","rspec::mocks::recursiveconstmethods#recursive_const_defined?()","rspec::mocks::recursiveconstmethods#recursive_const_get()","rspec::mocks::ordergroup#register()","rspec::mocks::constantmutator::register_mutator()","rspec::mocks::constantmutator::register_mutator()","rspec::mocks::space#registered?()","rspec::mocks::space#remove_any_instance_recorder_for()","rspec::mocks::methoddouble#remove_single_stub()","rspec::mocks::proxy#remove_single_stub()","rspec::mocks::methoddouble#remove_stub()","rspec::mocks::proxy#remove_stub()","rspec::mocks::anyinstance::messagechains#remove_stub_chains_for!()","rspec::mocks::proxy#replay_received_message_on()","rspec::mocks::methoddouble#reset()","rspec::mocks::proxy#reset()","rspec::mocks::constantmutator::reset_all()","rspec::mocks::constantmutator::reset_all()","rspec::mocks::space#reset_all()","rspec::mocks::testdouble#respond_to?()","rspec::mocks::instancemethodstasher#restore()","rspec::mocks::methoddouble#restore_original_method()","rspec::mocks::methoddouble#restore_original_visibility()","rspec::mocks::constantmutator::constanthider#rspec_reset()","rspec::mocks::constantmutator::definedconstantreplacer#rspec_reset()","rspec::mocks::constantmutator::undefinedconstantsetter#rspec_reset()","rspec::mocks::setup()","rspec::mocks::matchers::receive#setup_allowance()","rspec::mocks::matchers::receive#setup_any_instance_allowance()","rspec::mocks::matchers::receive#setup_any_instance_expectation()","rspec::mocks::matchers::receive#setup_any_instance_negative_expectation()","rspec::mocks::matchers::receive#setup_expectation()","rspec::mocks::matchers::receive#setup_negative_expectation()","rspec::mocks::syntax::should_enabled?()","rspec::mocks::anyinstance::recorder#should_not_receive()","rspec::mocks::syntax#should_not_receive()","rspec::mocks::anyinstance::recorder#should_receive()","rspec::mocks::syntax#should_receive()","rspec::mocks::messageexpectation#similar_messages()","rspec::mocks::instancemethodstasher#stash()","rspec::mocks::instancemethodstasher#stashed_method_name()","rspec::mocks::anyinstance::recorder#stop_all_observation!()","rspec::mocks::anyinstance::recorder#stub()","rspec::mocks::constantmutator::stub()","rspec::mocks::constantmutator::stub()","rspec::mocks::examplemethods#stub()","rspec::mocks::syntax#stub()","rspec::mocks::anyinstance::recorder#stub!()","rspec::mocks::syntax#stub!()","rspec::mocks::anyinstance::recorder#stub_chain()","rspec::mocks::stubchain#stub_chain()","rspec::mocks::syntax#stub_chain()","rspec::mocks::stubchain::stub_chain_on()","rspec::mocks::examplemethods#stub_const()","rspec::mocks::syntax::stub_object()","rspec::mocks::constant#stubbed?()","rspec::mocks::methoddouble#stubs()","rspec::mocks::configuration#syntax()","rspec::mocks::configuration#syntax=()","rspec::mocks::teardown()","rspec::mocks::andcalloriginalimplementation#terminal_action=()","rspec::mocks::messageexpectation#times()","rspec::mocks::constantmutator::basemutator#to_constant()","rspec::mocks::constantmutator::constanthider#to_constant()","rspec::mocks::constantmutator::definedconstantreplacer#to_constant()","rspec::mocks::constantmutator::undefinedconstantsetter#to_constant()","rspec::mocks::constant#to_s()","rspec::mocks::testdouble#to_s()","rspec::mocks::testdouble#to_str()","rspec::mocks::constantmutator::definedconstantreplacer#transfer_nested_constants()","rspec::mocks::messageexpectation#twice()","rspec::mocks::anyinstance::messagechains#unfulfilled_expectations()","rspec::mocks::anyinstance::recorder#unstub()","rspec::mocks::syntax#unstub()","rspec::mocks::anyinstance::recorder#unstub!()","rspec::mocks::syntax#unstub!()","rspec::mocks::verify()","rspec::mocks::anyinstance::recorder#verify()","rspec::mocks::methoddouble#verify()","rspec::mocks::proxy#verify()","rspec::mocks::space#verify_all()","rspec::mocks::constantmutator::definedconstantreplacer#verify_constants_to_transfer!()","rspec::mocks::messageexpectation#verify_messages_received()","rspec::mocks::methoddouble#visibility()","rspec::mocks::methoddouble#visibility_for_method()","rspec::mocks::messageexpectation#with()"],"info":[["Marshal","","Marshal.html","",""],["RSpec","","RSpec.html","",""],["RSpec::Mocks","","RSpec/Mocks.html","",""],["RSpec::Mocks::AllowanceTarget","","RSpec/Mocks/AllowanceTarget.html","",""],["RSpec::Mocks::AmbiguousReturnError","","RSpec/Mocks/AmbiguousReturnError.html","","<p>@private\n"],["RSpec::Mocks::AndCallOriginalImplementation","","RSpec/Mocks/AndCallOriginalImplementation.html","","<p>Represents an `and_call_original` implementation. @private\n"],["RSpec::Mocks::AndReturnImplementation","","RSpec/Mocks/AndReturnImplementation.html","","<p>Handles the implementation of an `and_return` implementation. @private\n"],["RSpec::Mocks::AndYieldImplementation","","RSpec/Mocks/AndYieldImplementation.html","","<p>Handles the implementation of an `and_yield` declaration. @private\n"],["RSpec::Mocks::AnyInstance","","RSpec/Mocks/AnyInstance.html","",""],["RSpec::Mocks::AnyInstance::Chain","","RSpec/Mocks/AnyInstance/Chain.html","",""],["RSpec::Mocks::AnyInstance::Chain::Customizations","","RSpec/Mocks/AnyInstance/Chain/Customizations.html","",""],["RSpec::Mocks::AnyInstance::ExpectationChain","","RSpec/Mocks/AnyInstance/ExpectationChain.html","","<p>@api private\n"],["RSpec::Mocks::AnyInstance::MessageChains","","RSpec/Mocks/AnyInstance/MessageChains.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::PositiveExpectationChain","","RSpec/Mocks/AnyInstance/PositiveExpectationChain.html","","<p>@api private\n"],["RSpec::Mocks::AnyInstance::Recorder","","RSpec/Mocks/AnyInstance/Recorder.html","","<p>Given a class `TheClass`, `TheClass.any_instance` returns a `Recorder`,\nwhich records stubs and message …\n"],["RSpec::Mocks::AnyInstance::StubChain","","RSpec/Mocks/AnyInstance/StubChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::StubChainChain","","RSpec/Mocks/AnyInstance/StubChainChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstanceAllowanceTarget","","RSpec/Mocks/AnyInstanceAllowanceTarget.html","",""],["RSpec::Mocks::AnyInstanceExpectationTarget","","RSpec/Mocks/AnyInstanceExpectationTarget.html","",""],["RSpec::Mocks::ArgumentListMatcher","","RSpec/Mocks/ArgumentListMatcher.html","","<p>Wrapper for matching arguments against a list of expected values. Used by\nthe `with` method on a `MessageExpectation`: …\n"],["RSpec::Mocks::ArgumentMatchers","","RSpec/Mocks/ArgumentMatchers.html","","<p>ArgumentMatchers are placeholders that you can include in message\nexpectations to match arguments against …\n"],["RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","","RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","","RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::BooleanMatcher","","RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::EqualityProxy","","RSpec/Mocks/ArgumentMatchers/EqualityProxy.html","",""],["RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::InstanceOf","","RSpec/Mocks/ArgumentMatchers/InstanceOf.html","",""],["RSpec::Mocks::ArgumentMatchers::KindOf","","RSpec/Mocks/ArgumentMatchers/KindOf.html","",""],["RSpec::Mocks::ArgumentMatchers::MatcherMatcher","","RSpec/Mocks/ArgumentMatchers/MatcherMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","","RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html","",""],["RSpec::Mocks::ArgumentMatchers::RegexpMatcher","","RSpec/Mocks/ArgumentMatchers/RegexpMatcher.html","",""],["RSpec::Mocks::Configuration","","RSpec/Mocks/Configuration.html","","<p>Provides configuration options for rspec-mocks.\n"],["RSpec::Mocks::Constant","","RSpec/Mocks/Constant.html","","<p>Provides information about constants that may (or may not) have been\nmutated by rspec-mocks.\n"],["RSpec::Mocks::ConstantMutator","","RSpec/Mocks/ConstantMutator.html","","<p>Provides a means to stub constants.\n"],["RSpec::Mocks::ConstantMutator::BaseMutator","","RSpec/Mocks/ConstantMutator/BaseMutator.html","","<p>Contains common functionality used by all of the constant mutators.\n<p>@api private\n"],["RSpec::Mocks::ConstantMutator::ConstantHider","","RSpec/Mocks/ConstantMutator/ConstantHider.html","","<p>Hides a defined constant for the duration of an example.\n<p>@api private\n"],["RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html","","<p>Replaces a defined constant for the duration of an example.\n<p>@api private\n"],["RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","","RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html","","<p>Sets an undefined constant for the duration of an example.\n<p>@api private\n"],["RSpec::Mocks::ConstantStubber","","RSpec/Mocks/ConstantMutator.html","","<p>Provides a means to stub constants.\n"],["RSpec::Mocks::Deprecation","","RSpec/Mocks/Deprecation.html","",""],["RSpec::Mocks::ErrorGenerator","","RSpec/Mocks/ErrorGenerator.html","","<p>@private\n"],["RSpec::Mocks::ExampleMethods","","RSpec/Mocks/ExampleMethods.html","",""],["RSpec::Mocks::ExampleMethods::ExpectHost","","RSpec/Mocks/ExampleMethods/ExpectHost.html","","<p>This module exists to host the `expect` method for cases where rspec-mocks\nis used w/o rspec-expectations. …\n"],["RSpec::Mocks::ExpectationTarget","","RSpec/Mocks/ExpectationTarget.html","",""],["RSpec::Mocks::Implementation","","RSpec/Mocks/Implementation.html","","<p>Represents a configured implementation. Takes into account any number of\nsub-implementations. @private …\n"],["RSpec::Mocks::InstanceExec","","RSpec/Mocks/InstanceExec.html","","<p>@private\n"],["RSpec::Mocks::InstanceMethodStasher","","RSpec/Mocks/InstanceMethodStasher.html","","<p>@private\n"],["RSpec::Mocks::Matchers","","RSpec/Mocks/Matchers.html","",""],["RSpec::Mocks::Matchers::HaveReceived","","RSpec/Mocks/Matchers/HaveReceived.html","",""],["RSpec::Mocks::Matchers::Receive","","RSpec/Mocks/Matchers/Receive.html","",""],["RSpec::Mocks::Matchers::Receive::Customization","","RSpec/Mocks/Matchers/Receive/Customization.html","",""],["RSpec::Mocks::MessageExpectation","","RSpec/Mocks/MessageExpectation.html","",""],["RSpec::Mocks::MethodDouble","","RSpec/Mocks/MethodDouble.html","","<p>@private\n"],["RSpec::Mocks::MethodDouble::ProcWithBlock","","RSpec/Mocks/MethodDouble/ProcWithBlock.html","",""],["RSpec::Mocks::Mock","","RSpec/Mocks/Mock.html","",""],["RSpec::Mocks::MockExpectationError","","RSpec/Mocks/MockExpectationError.html","","<p>@private\n"],["RSpec::Mocks::OrderGroup","","RSpec/Mocks/OrderGroup.html","","<p>@private\n"],["RSpec::Mocks::Proxy","","RSpec/Mocks/Proxy.html","","<p>@private\n"],["RSpec::Mocks::ProxyForNil","","RSpec/Mocks/ProxyForNil.html","","<p>@private\n"],["RSpec::Mocks::RecursiveConstMethods","","RSpec/Mocks/RecursiveConstMethods.html","","<p>Provides recursive constant lookup methods useful for constant stubbing.\n@api private\n"],["RSpec::Mocks::Space","","RSpec/Mocks/Space.html","","<p>@api private\n"],["RSpec::Mocks::StubChain","","RSpec/Mocks/StubChain.html","","<p>@private\n"],["RSpec::Mocks::Syntax","","RSpec/Mocks/Syntax.html","","<p>@api private Provides methods for enabling and disabling the available\nsyntaxes provided by rspec-mocks. …\n"],["RSpec::Mocks::TargetBase","","RSpec/Mocks/TargetBase.html","",""],["RSpec::Mocks::TestDouble","","RSpec/Mocks/TestDouble.html","","<p>Implements the methods needed for a pure test double.  RSpec::Mocks::Mock\nincludes this module, and it …\n"],["RSpec::Mocks::Version","","RSpec/Mocks/Version.html","",""],["==","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#method-i-3D-3D","(other)",""],["==","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#method-i-3D-3D","(value)",""],["==","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-i-3D-3D","(value)",""],["==","RSpec::Mocks::ArgumentMatchers::EqualityProxy","RSpec/Mocks/ArgumentMatchers/EqualityProxy.html#method-i-3D-3D","(expected)",""],["==","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-i-3D-3D","(actual)",""],["==","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-i-3D-3D","(actual)",""],["==","RSpec::Mocks::ArgumentMatchers::InstanceOf","RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-i-3D-3D","(actual)",""],["==","RSpec::Mocks::ArgumentMatchers::KindOf","RSpec/Mocks/ArgumentMatchers/KindOf.html#method-i-3D-3D","(actual)",""],["==","RSpec::Mocks::ArgumentMatchers::MatcherMatcher","RSpec/Mocks/ArgumentMatchers/MatcherMatcher.html#method-i-3D-3D","(value)",""],["==","RSpec::Mocks::ArgumentMatchers::RegexpMatcher","RSpec/Mocks/ArgumentMatchers/RegexpMatcher.html#method-i-3D-3D","(value)",""],["==","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-3D-3D","(other)","<p>This allows for comparing the mock to other objects that proxy such as\nActiveRecords belongs_to proxy …\n"],["__build_mock_proxy","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-__build_mock_proxy","()","<p>@private\n"],["a_kind_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-a_kind_of","(klass)",""],["actual_received_count_matters?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-actual_received_count_matters-3F","()","<p>@private\n"],["add","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-add","(method_name, chain)","<p>@private\n"],["add_default_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_default_stub","(*args, &implementation)","<p>@private\n"],["add_expectation","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_expectation","(error_generator, expectation_ordering, expected_from, opts, &implementation)","<p>@private\n"],["add_message_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-add_message_expectation","(location, method_name, opts={}, &block)","<p>@private\n"],["add_message_expectation","RSpec::Mocks::ProxyForNil","RSpec/Mocks/ProxyForNil.html#method-i-add_message_expectation","(location, method_name, opts={}, &block)",""],["add_negative_message_expectation","RSpec::Mocks::ProxyForNil","RSpec/Mocks/ProxyForNil.html#method-i-add_negative_message_expectation","(location, method_name, &implementation)",""],["add_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_stub","(error_generator, expectation_ordering, expected_from, opts={}, &implementation)","<p>@private\n"],["add_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-add_stub","(location, method_name, opts={}, &implementation)","<p>@private\n"],["add_stub","RSpec::Mocks::ProxyForNil","RSpec/Mocks/ProxyForNil.html#method-i-add_stub","(location, method_name, opts={}, &implementation)",""],["add_stub_and_should_receive_to","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-add_stub_and_should_receive_to","(*modules)","<p>Adds `stub` and `should_receive` to the given modules or classes. This is\nusually only necessary if you …\n"],["advise","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-advise","(*args)","<p>@private\n"],["all_expectations_fulfilled?","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-all_expectations_fulfilled-3F","()","<p>@private\n"],["allow","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-allow","(target)",""],["allow_any_instance_of","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-allow_any_instance_of","(klass)",""],["allow_message","RSpec::Mocks","RSpec/Mocks.html#method-c-allow_message","(subject, message, opts={}, &block)","<p>Adds an allowance (stub) on `subject`\n<p>@param subject the subject to which the message will be added @param …\n"],["allow_message_expectations_on_nil","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-allow_message_expectations_on_nil","()","<p>Disables warning messages about expectations being set on nil.\n<p>By default warning messages are issued …\n"],["already_observing?","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-already_observing-3F","(method_name)",""],["already_proxied_respond_to","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-already_proxied_respond_to","()","<p>@private\n"],["already_proxied_respond_to?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-already_proxied_respond_to-3F","()","<p>@private\n"],["an_instance_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-an_instance_of","(klass)",""],["and_call_original","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-and_call_original","()","<p>Tells the object to delegate to the original unmodified method when it\nreceives the message.\n<p>@note This …\n"],["and_raise","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-and_raise","(exception = RuntimeError, message = nil)","<p>@overload and_raise @overload and_raise(ExceptionClass) @overload\nand_raise(ExceptionClass, message) …\n"],["and_return","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-and_return","(*values, &implementation)","<p>@overload and_return(value) @overload and_return(first_value, second_value)\n@overload and_return(&amp;block) …\n"],["and_throw","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-and_throw","(*args)","<p>@overload and_throw(symbol) @overload and_throw(symbol, object)\n<p>Tells the object to throw a symbol (with …\n"],["and_yield","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-and_yield","(*args, &block)","<p>Tells the object to yield one or more args to a block when the message is\nreceived.\n<p>@example\n\n<pre>stream.stub(:open).and_yield(StringIO.new)</pre>\n"],["any_args","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-any_args","()","<p>Matches any args at all. Supports a more explicit variation of\n`object.should_receive(:message)`\n<p>@example …\n"],["any_instance","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-any_instance","()",""],["any_instance_class_recorder_observing_method?","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-any_instance_class_recorder_observing_method-3F","(klass)",""],["any_instance_recorder_for","RSpec::Mocks","RSpec/Mocks.html#method-c-any_instance_recorder_for","(klass)",""],["any_instance_recorder_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-any_instance_recorder_for","(klass)",""],["any_number_of_times","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-any_number_of_times","(&block)","<p>Allows an expected message to be received any number of times.\n"],["anything","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-anything","()","<p>Matches any argument at all.\n<p>@example\n\n<pre>object.should_receive(:message).with(anything)</pre>\n"],["arg_slice_for","RSpec::Mocks::Implementation","RSpec/Mocks/Implementation.html#method-i-arg_slice_for","(args, arity)",""],["args_match?","RSpec::Mocks::ArgumentListMatcher","RSpec/Mocks/ArgumentListMatcher.html#method-i-args_match-3F","(*args)","<p>@api public @param [Array] *args\n<p>Matches each element in the `expected_args` against the element in the …\n"],["arity","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-i-arity","()",""],["arity","RSpec::Mocks::AndReturnImplementation","RSpec/Mocks/AndReturnImplementation.html#method-i-arity","()",""],["arity","RSpec::Mocks::AndYieldImplementation","RSpec/Mocks/AndYieldImplementation.html#method-i-arity","()",""],["as_null_object","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-as_null_object","()","<p>@private Tells the object to ignore any messages that aren’t explicitly set\nas stubs or message expectations. …\n"],["as_null_object","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-as_null_object","()",""],["as_null_object","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-as_null_object","()","<p>Tells the object to respond to all messages. If specific stub values are\ndeclared, they’ll work as expected. …\n"],["at_least","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-at_least","(n, &block)","<p>Constrain a message expectation to be received at least a specific number\nof times.\n<p>@example\n\n<pre>dealer.should_receive(:deal_card).at_least(9).times</pre>\n"],["at_most","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-at_most","(n, &block)","<p>Constrain a message expectation to be received at most a specific number of\ntimes.\n<p>@example\n\n<pre>dealer.should_receive(:deal_card).at_most(10).times</pre>\n"],["boolean","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-boolean","()","<p>Matches a boolean value.\n<p>@example\n\n<pre>object.should_receive(:message).with(boolean())</pre>\n"],["build_alias_method_name","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-build_alias_method_name","(method_name)",""],["build_expectation","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-build_expectation","(error_generator, expectation_ordering)","<p>@private\n"],["build_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-build_expectation","(method_name)","<p>@private\n"],["call","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-i-call","(*args, &block)",""],["call","RSpec::Mocks::AndReturnImplementation","RSpec/Mocks/AndReturnImplementation.html#method-i-call","(*args_to_ignore, &block)",""],["call","RSpec::Mocks::AndYieldImplementation","RSpec/Mocks/AndYieldImplementation.html#method-i-call","(*args_to_ignore, &block)",""],["call","RSpec::Mocks::Implementation","RSpec/Mocks/Implementation.html#method-i-call","(*args, &block)",""],["call","RSpec::Mocks::MethodDouble::ProcWithBlock","RSpec/Mocks/MethodDouble/ProcWithBlock.html#method-i-call","(*args, &block)",""],["called_max_times?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-called_max_times-3F","()","<p>@private\n"],["check_for_unexpected_arguments","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-check_for_unexpected_arguments","(expectation)","<p>@private\n"],["clear","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-clear","()","<p>@private\n"],["clear","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-clear","()",""],["configuration","RSpec::Mocks","RSpec/Mocks.html#method-c-configuration","()",""],["configure_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-configure_method","()","<p>@private\n"],["const_defined_on?","RSpec::Mocks::RecursiveConstMethods","RSpec/Mocks/RecursiveConstMethods.html#method-i-const_defined_on-3F","(mod, const_name)",""],["constants_defined_on","RSpec::Mocks::RecursiveConstMethods","RSpec/Mocks/RecursiveConstMethods.html#method-i-constants_defined_on","(mod)",""],["constrained_to_any_of?","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-constrained_to_any_of-3F","(*constraints)","<p>@private\n"],["consume","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-consume","()","<p>@private\n"],["default_should_syntax_host","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-default_should_syntax_host","()","<p>@api private Determines where the methods like `should_receive`, and `stub`\nare added.\n"],["define_proxy_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-define_proxy_method","()","<p>@private\n"],["delegate_to","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-delegate_to","(matcher_method, options = {})",""],["deprecate","RSpec::Mocks::Deprecation","RSpec/Mocks/Deprecation.html#method-i-deprecate","(deprecated, options={})","<p>@private\n<p>Used internally to print deprecation warnings\n"],["describe_expectation","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-describe_expectation","(message, expected_received_count, actual_received_count, *args)","<p>@private\n"],["description","RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-description","()",""],["description","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-description","()","<p>@private\n"],["disable_expect","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-disable_expect","(syntax_host = ::RSpec::Mocks::ExampleMethods)","<p>@api private Disables the expect syntax (`expect(dbl).to receive`,\n`allow(dbl).to receive`, etc).\n"],["disable_should","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-disable_should","(syntax_host = default_should_syntax_host)","<p>@api private Disables the should syntax (`dbl.stub`, `dbl.should_receive`,\netc).\n"],["disallow_negation","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-disallow_negation","(method)",""],["does_not_match?","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-does_not_match-3F","(subject)",""],["does_not_match?","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-does_not_match-3F","(subject, &block)",""],["double","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-double","(*args)","<p>@overload double() @overload double(name) @overload double(stubs) @overload\ndouble(name, stubs) @param …\n"],["duck_type","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-duck_type","(*args)","<p>Matches if the actual argument responds to the specified messages.\n<p>@example\n\n<pre>object.should_receive(:message).with(duck_type(:hello)) ...</pre>\n"],["dump","Marshal","Marshal.html#method-c-dump","(object, *rest)",""],["dump_with_mocks","Marshal","Marshal.html#method-c-dump_with_mocks","(object, *rest)","<p>Duplicates any mock objects before serialization. Otherwise, serialization\nwill fail because methods …\n"],["dump_without_mocks","Marshal","Marshal.html#method-c-dump_without_mocks","(object, *rest)",""],["empty?","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-empty-3F","()",""],["enable_expect","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-enable_expect","(syntax_host = ::RSpec::Mocks::ExampleMethods)","<p>@api private Enables the expect syntax (`expect(dbl).to receive`,\n`allow(dbl).to receive`, etc).\n"],["enable_should","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-enable_should","(syntax_host = default_should_syntax_host)","<p>@api private Enables the should syntax (`dbl.stub`, `dbl.should_receive`,\netc).\n"],["ensure_registered","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-ensure_registered","(object)",""],["exactly","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-exactly","(n, &block)","<p>Constrain a message expectation to be received a specific number of times.\n<p>@example\n\n<pre>dealer.should_receive(:deal_card).exactly(10).times</pre>\n"],["expect","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-expect","(target)",""],["expect_any_instance_of","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-expect_any_instance_of","(klass)",""],["expect_enabled?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-expect_enabled-3F","(syntax_host = ::RSpec::Mocks::ExampleMethods)","<p>@api private Indicates whether or not the expect syntax is enabled.\n"],["expect_message","RSpec::Mocks","RSpec/Mocks.html#method-c-expect_message","(subject, message, opts={}, &block)","<p>Sets a message expectation on `subject`. @param subject the subject on\nwhich the message will be expected …\n"],["expectation_count_type","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-expectation_count_type","()",""],["expectation_fulfilled!","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-expectation_fulfilled-21","()","<p>@private\n"],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::ExpectationChain","RSpec/Mocks/AnyInstance/ExpectationChain.html#method-i-expectation_fulfilled-3F","()",""],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::StubChain","RSpec/Mocks/AnyInstance/StubChain.html#method-i-expectation_fulfilled-3F","()","<p>@private\n"],["expectation_ordering","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-expectation_ordering","()",""],["expectations","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-expectations","()","<p>@private\n"],["expected_args","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-expected_args","()","<p>@private\n"],["expected_messages_received?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-expected_messages_received-3F","()","<p>@private\n"],["expected_part_of_expectation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-expected_part_of_expectation_error","(expected_received_count, expectation_count_type, argument_list_matcher)","<p>@private\n"],["extend_onto","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-c-extend_onto","(object, name=nil, stubs_and_options={})","<p>Extends the TestDouble module onto the given object and initializes it as a\ntest double.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["failure_message","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-failure_message","()",""],["find","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-find","(name)",""],["find","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-find","(name)",""],["generate_error","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-generate_error","()","<p>@private\n"],["get_const_defined_on","RSpec::Mocks::RecursiveConstMethods","RSpec/Mocks/RecursiveConstMethods.html#method-i-get_const_defined_on","(mod, const_name)",""],["handle_order_constraint","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-handle_order_constraint","(expectation)","<p>@private\n"],["has_expectation?","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-has_expectation-3F","(method_name)","<p>@private\n"],["has_negative_expectation?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-has_negative_expectation-3F","(message)","<p>@private\n"],["hash_excluding","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-hash_excluding","(*args)","<p>Matches a hash that doesn’t include the specified key(s) or key/value.\n<p>@example\n\n<pre>object.should_receive(:message).with(hash_excluding(:key ...</pre>\n"],["hash_including","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-hash_including","(*args)","<p>Matches a hash that includes the specified key(s) or key/value pairs.\nIgnores any additional keys.\n<p>@example …\n"],["hash_not_including","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-hash_not_including","(*args)",""],["have_received","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-have_received","(method_name)","<p>Verifies that the given object received the expected message during the\ncourse of the test. The method …\n"],["hidden?","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-i-hidden-3F","()","<p>@return [Boolean] Whether or not rspec-mocks has hidden\n\n<pre>this constant.</pre>\n"],["hide","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-hide","(constant_name)","<p>Hides a constant.\n<p>@param (see ExampleMethods#hide_const)\n<p>@see ExampleMethods#hide_const @note It’s recommended …\n"],["hide","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-hide","(constant_name)","<p>Hides a constant.\n<p>@param (see ExampleMethods#hide_const)\n<p>@see ExampleMethods#hide_const @note It’s recommended …\n"],["hide_const","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-hide_const","(constant_name)","<p>Hides the named constant with the given value. The constant will be\nundefined for the duration of the …\n"],["id_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-id_for","(object)",""],["ignoring_args?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-ignoring_args-3F","()","<p>@private\n"],["included","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-c-included","(klass)",""],["increase_actual_received_count!","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-increase_actual_received_count-21","()","<p>@private\n"],["initial_action=","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-i-initial_action-3D","(value)",""],["inner_action=","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-i-inner_action-3D","(value)",""],["inspect","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-i-inspect","()",""],["inspect","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-inspect","()","<p>@private\n"],["instance_exec","RSpec::Mocks::InstanceExec","RSpec/Mocks/InstanceExec.html#method-i-instance_exec","(*args, &block)","<p>@private\n<p>based on Bounded Spec InstanceExec (Mauricio Fernandez)\neigenclass.org/hiki/bounded+space+instance_exec …\n"],["instance_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-instance_of","(klass)","<p>Matches if `arg.instance_of?(klass)`\n<p>@example\n\n<pre>object.should_receive(:message).with(instance_of(Thing))</pre>\n"],["instance_that_received","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-instance_that_received","(method_name)","<p>@private\n"],["invoke","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-invoke","(parent_stub, *args, &block)","<p>@private\n"],["kind_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-kind_of","(klass)","<p>Matches if `arg.kind_of?(klass)` @example\n\n<pre>object.should_receive(:message).with(kind_of(Thing))</pre>\n"],["matches?","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-matches-3F","(subject)",""],["matches?","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-matches-3F","(subject, &block)",""],["matches?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-matches-3F","(message, *args)","<p>@private\n"],["matches_at_least_count?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-matches_at_least_count-3F","()","<p>@private\n"],["matches_at_most_count?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-matches_at_most_count-3F","()","<p>@private\n"],["matches_exact_count?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-matches_exact_count-3F","()","<p>@private\n"],["matches_name_but_not_args","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-matches_name_but_not_args","(message, *args)","<p>@private\n"],["message_received","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-message_received","(message, *args, &block)","<p>@private\n"],["method_call_args_description","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-method_call_args_description","(args)","<p>@private\n"],["method_handle_for","RSpec::Mocks","RSpec/Mocks.html#method-c-method_handle_for","(object, method_name)","<p>@api private Used internally to get a method handle for a particular object\nand method name.\n<p>Includes …\n"],["method_is_stashed?","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-method_is_stashed-3F","()","<p>@private\n"],["mock","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-mock","(*args)","<p>Deprecated: Use [double](#double-instance_method).\n"],["mutate","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-mutate","(mutator)","<p>Uses the mutator to mutate (stub or hide) a constant. Ensures that the\nmutator is correctly registered …\n"],["mutate","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-mutate","(mutator)","<p>Uses the mutator to mutate (stub or hide) a constant. Ensures that the\nmutator is correctly registered …\n"],["mutate","RSpec::Mocks::ConstantMutator::ConstantHider","RSpec/Mocks/ConstantMutator/ConstantHider.html#method-i-mutate","()",""],["mutate","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-mutate","()",""],["mutate","RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html#method-i-mutate","()",""],["mutated?","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-i-mutated-3F","()","<p>@return [Boolean] Whether or not rspec-mocks has mutated\n\n<pre>(stubbed or hidden) this constant.</pre>\n"],["mutators","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-mutators","()","<p>The list of constant mutators that have been used for the current example.\n<p>@api private\n"],["mutators","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-mutators","()","<p>The list of constant mutators that have been used for the current example.\n<p>@api private\n"],["negative?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-negative-3F","()","<p>@private\n"],["negative_expectation_for?","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-negative_expectation_for-3F","(message)","<p>@private\n"],["negative_failure_message","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-negative_failure_message","()",""],["never","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-never","()",""],["never","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-never","()","<p>Expect a message not to be received at all.\n<p>@example\n\n<pre>car.should_receive(:stop).never</pre>\n"],["new","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-c-new","(method)",""],["new","RSpec::Mocks::AndReturnImplementation","RSpec/Mocks/AndReturnImplementation.html#method-c-new","(values_to_return)",""],["new","RSpec::Mocks::AndYieldImplementation","RSpec/Mocks/AndYieldImplementation.html#method-c-new","(args_to_yield, eval_context, error_generator)",""],["new","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-c-new","(recorder, *args, &block)",""],["new","RSpec::Mocks::AnyInstance::ExpectationChain","RSpec/Mocks/AnyInstance/ExpectationChain.html#method-c-new","(*args, &block)",""],["new","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-c-new","()",""],["new","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-c-new","(klass)",""],["new","RSpec::Mocks::ArgumentListMatcher","RSpec/Mocks/ArgumentListMatcher.html#method-c-new","(*expected_args, &block)","<p>@api public @param [Array] *expected_args a list of expected literals\nand/or argument matchers @param …\n"],["new","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#method-c-new","(ignore)",""],["new","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#method-c-new","(ignore)",""],["new","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-c-new","(*methods_to_respond_to)",""],["new","RSpec::Mocks::ArgumentMatchers::EqualityProxy","RSpec/Mocks/ArgumentMatchers/EqualityProxy.html#method-c-new","(given)",""],["new","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-c-new","(expected)",""],["new","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-c-new","(expected)",""],["new","RSpec::Mocks::ArgumentMatchers::InstanceOf","RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-c-new","(klass)",""],["new","RSpec::Mocks::ArgumentMatchers::KindOf","RSpec/Mocks/ArgumentMatchers/KindOf.html#method-c-new","(klass)",""],["new","RSpec::Mocks::ArgumentMatchers::MatcherMatcher","RSpec/Mocks/ArgumentMatchers/MatcherMatcher.html#method-c-new","(matcher)",""],["new","RSpec::Mocks::ArgumentMatchers::RegexpMatcher","RSpec/Mocks/ArgumentMatchers/RegexpMatcher.html#method-c-new","(regexp)",""],["new","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-c-new","(name)","<p>@api private\n"],["new","RSpec::Mocks::ConstantMutator::BaseMutator","RSpec/Mocks/ConstantMutator/BaseMutator.html#method-c-new","(full_constant_name, mutated_value, transfer_nested_constants)",""],["new","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-c-new","(target, name, options={})",""],["new","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-c-new","(klass, method)",""],["new","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-c-new","(method_name)",""],["new","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-c-new","(message, block)",""],["new","RSpec::Mocks::Matchers::Receive::Customization","RSpec/Mocks/Matchers/Receive/Customization.html#method-c-new","(method_name, args, block)",""],["new","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-c-new","(error_generator, expectation_ordering, expected_from, method_double, expected_received_count=1, opts={}, &implementation_block)","<p>@private\n"],["new","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-c-new","(object, method_name, proxy)","<p>@private\n"],["new","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-c-new","()",""],["new","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-c-new","(object, name=nil, options={})","<p>@private\n"],["new","RSpec::Mocks::ProxyForNil","RSpec/Mocks/ProxyForNil.html#method-c-new","()",""],["new","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-c-new","()",""],["new","RSpec::Mocks::StubChain","RSpec/Mocks/StubChain.html#method-c-new","(object, *chain, &blk)",""],["new","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-new","(target)",""],["new","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-c-new","(name=nil, stubs_and_options={})","<p>Creates a new test double with a `name` (that will be used in error\nmessages only)\n"],["no_args","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-no_args","()","<p>Matches no arguments.\n<p>@example\n\n<pre>object.should_receive(:message).with(no_args)</pre>\n"],["normalize_const_name","RSpec::Mocks::RecursiveConstMethods","RSpec/Mocks/RecursiveConstMethods.html#method-i-normalize_const_name","(const_name)",""],["null_object?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-null_object-3F","()","<p>@private\n"],["null_object?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-null_object-3F","()",""],["null_object?","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-null_object-3F","()","<p>Returns true if this object has received `as_null_object`\n"],["object_singleton_class","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-object_singleton_class","()","<p>@private\n"],["once","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-once","(&block)","<p>Expect a message to be received exactly one time.\n<p>@example\n\n<pre>car.should_receive(:go).once</pre>\n"],["opts","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-opts","()","<p>@private\n"],["ordered","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-ordered","(&block)","<p>Expect messages to be received in a specific order.\n<p>@example\n\n<pre>api.should_receive(:prepare).ordered\napi.should_receive(:run).ordered ...</pre>\n"],["original","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-c-original","(name)","<p>Queries rspec-mocks to find out information about the named constant.\n<p>@param [String] name the name of …\n"],["original_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-original_method","()","<p>@private\n"],["original_method_from_ancestor","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-original_method_from_ancestor","(ancestors)",""],["original_method_from_ancestry","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-original_method_from_ancestry","()","<p>In Ruby 2.1, ancestors include the correct ancestors, including the\nsingleton classes\n"],["original_method_from_superclass","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-original_method_from_superclass","()","<p>@private\n"],["original_unrecorded_any_instance_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-original_unrecorded_any_instance_method","()",""],["playback!","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-playback-21","(instance)","<p>@private\n"],["playback!","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-playback-21","(instance, method_name)","<p>@private\n"],["playback!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-playback-21","(instance, method_name)","<p>@private\n"],["playback_onto","RSpec::Mocks::Matchers::Receive::Customization","RSpec/Mocks/Matchers/Receive/Customization.html#method-i-playback_onto","(expectation)",""],["present?","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-i-present-3F","()",""],["present?","RSpec::Mocks::Implementation","RSpec/Mocks/Implementation.html#method-i-present-3F","()",""],["previously_defined?","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-i-previously_defined-3F","()","<p>@return [Boolean] Whether or not the constant was defined\n\n<pre>before the current example.</pre>\n"],["proxies_of","RSpec::Mocks","RSpec/Mocks.html#method-c-proxies_of","(klass)",""],["proxies_of","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-proxies_of","(klass)",""],["proxy_for","RSpec::Mocks","RSpec/Mocks.html#method-c-proxy_for","(object)",""],["proxy_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-proxy_for","(object)",""],["raise_block_failed_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_block_failed_error","(message, detail)","<p>@private\n"],["raise_double_negation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-c-raise_double_negation_error","(wrapped_expression)",""],["raise_expectation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_error","(message, expected_received_count, argument_list_matcher, actual_received_count, expectation_count_type, *args)","<p>@private\n"],["raise_expectation_on_mocked_method","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_mocked_method","(method)","<p>@private\n"],["raise_expectation_on_unstubbed_method","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_unstubbed_method","(method)","<p>@private\n"],["raise_method_not_stubbed_error","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-raise_method_not_stubbed_error","()","<p>@private\n"],["raise_missing_block_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_missing_block_error","(args_to_yield)","<p>@private\n"],["raise_missing_default_stub_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_missing_default_stub_error","(expectation, *args)","<p>@private\n"],["raise_missing_default_stub_error","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-raise_missing_default_stub_error","(expectation, *args)","<p>@private\n"],["raise_on_invalid_const","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-raise_on_invalid_const","()","<p>Used internally by the constant stubbing to raise a helpful error when a\nconstant like “A::B::C” …\n"],["raise_on_invalid_const","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-raise_on_invalid_const","()","<p>Used internally by the constant stubbing to raise a helpful error when a\nconstant like “A::B::C” …\n"],["raise_only_valid_on_a_partial_mock","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_only_valid_on_a_partial_mock","(method)","<p>@private\n"],["raise_out_of_order_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_out_of_order_error","(message)","<p>@private\n"],["raise_out_of_order_error","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-raise_out_of_order_error","()",""],["raise_similar_message_args_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_similar_message_args_error","(expectation, *args_for_multiple_calls)","<p>@private\n"],["raise_unexpected_message_args_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_unexpected_message_args_error","(expectation, *args)","<p>@private\n"],["raise_unexpected_message_args_error","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-raise_unexpected_message_args_error","(expectation, *args)","<p>@private\n"],["raise_unexpected_message_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_unexpected_message_error","(message, *args)","<p>@private\n"],["raise_unexpected_message_error","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-raise_unexpected_message_error","(method_name, *args)","<p>@private\n"],["raise_wrong_arity_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_wrong_arity_error","(args_to_yield, arity)","<p>@private\n"],["ready_for?","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-ready_for-3F","(expectation)","<p>@private\n"],["receive","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-receive","(method_name, &block)",""],["received_expected_message!","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-received_expected_message-21","(method_name)","<p>@private\n"],["received_message?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-received_message-3F","(method_name, *args, &block)","<p>@private\n"],["received_message?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-received_message-3F","(message, *args, &block)",""],["received_part_of_expectation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-received_part_of_expectation_error","(actual_received_count, *args)","<p>@private\n"],["record","RSpec::Mocks::AnyInstance::Chain::Customizations","RSpec/Mocks/AnyInstance/Chain/Customizations.html#method-c-record","(method_name)","<p>@macro [attach] record\n\n<pre>@method $1(*args, &amp;block)\nRecords the `$1` message for playback against an instance ...</pre>\n"],["record_message_received","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-record_message_received","(message, *args, &block)","<p>@private\n"],["recursive_const_defined?","RSpec::Mocks::RecursiveConstMethods","RSpec/Mocks/RecursiveConstMethods.html#method-i-recursive_const_defined-3F","(const_name)",""],["recursive_const_get","RSpec::Mocks::RecursiveConstMethods","RSpec/Mocks/RecursiveConstMethods.html#method-i-recursive_const_get","(const_name)",""],["register","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-register","(expectation)","<p>@private\n"],["register_mutator","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-register_mutator","(mutator)","<p>@api private\n"],["register_mutator","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-register_mutator","(mutator)","<p>@api private\n"],["registered?","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-registered-3F","(object)",""],["remove_any_instance_recorder_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-remove_any_instance_recorder_for","(klass)",""],["remove_single_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-remove_single_stub","(stub)","<p>@private\n"],["remove_single_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-remove_single_stub","(method_name, stub)",""],["remove_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-remove_stub","()","<p>@private\n"],["remove_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-remove_stub","(method_name)","<p>@private\n"],["remove_stub_chains_for!","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-remove_stub_chains_for-21","(method_name)","<p>@private\n"],["replay_received_message_on","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-replay_received_message_on","(expectation)","<p>@private\n"],["reset","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-reset","()","<p>@private\n"],["reset","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-reset","()","<p>@private\n"],["reset_all","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-reset_all","()","<p>Resets all stubbed constants. This is called automatically by rspec-mocks\nwhen an example finishes.\n<p>@api …\n"],["reset_all","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-reset_all","()","<p>Resets all stubbed constants. This is called automatically by rspec-mocks\nwhen an example finishes.\n<p>@api …\n"],["reset_all","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-reset_all","()",""],["respond_to?","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-respond_to-3F","(message, incl_private=false)","<p>@private\n"],["restore","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-restore","()","<p>@private\n"],["restore_original_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-restore_original_method","()","<p>@private\n"],["restore_original_visibility","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-restore_original_visibility","()","<p>@private\n"],["rspec_reset","RSpec::Mocks::ConstantMutator::ConstantHider","RSpec/Mocks/ConstantMutator/ConstantHider.html#method-i-rspec_reset","()",""],["rspec_reset","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-rspec_reset","()",""],["rspec_reset","RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html#method-i-rspec_reset","()",""],["setup","RSpec::Mocks","RSpec/Mocks.html#method-c-setup","(host)",""],["setup_allowance","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-setup_allowance","(subject, &block)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-setup_any_instance_allowance","(subject, &block)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-setup_any_instance_expectation","(subject, &block)",""],["setup_any_instance_negative_expectation","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-setup_any_instance_negative_expectation","(subject, &block)",""],["setup_expectation","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-setup_expectation","(subject, &block)",""],["setup_negative_expectation","RSpec::Mocks::Matchers::Receive","RSpec/Mocks/Matchers/Receive.html#method-i-setup_negative_expectation","(subject, &block)",""],["should_enabled?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-should_enabled-3F","(syntax_host = default_should_syntax_host)","<p>@api private Indicates whether or not the should syntax is enabled.\n"],["should_not_receive","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-should_not_receive","(method_name, &block)",""],["should_not_receive","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-should_not_receive","(message, &block)",""],["should_receive","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-should_receive","(method_name, &block)","<p>Initializes the recording a message expectation to be played back against\nany instance of this object …\n"],["should_receive","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-should_receive","(message, opts={}, &block)",""],["similar_messages","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-similar_messages","()","<p>@private\n"],["stash","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-stash","()","<p>@private\n"],["stashed_method_name","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-stashed_method_name","()","<p>@private\n"],["stop_all_observation!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stop_all_observation-21","()","<p>@private\n"],["stub","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub","(method_name_or_method_map, &block)","<p>Initializes the recording a stub to be played back against any instance of\nthis object that invokes the …\n"],["stub","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-stub","(constant_name, value, options = {})","<p>Stubs a constant.\n<p>@param (see ExampleMethods#stub_const) @option (see\nExampleMethods#stub_const) @return …\n"],["stub","RSpec::Mocks::ConstantMutator","RSpec/Mocks/ConstantMutator.html#method-c-stub","(constant_name, value, options = {})","<p>Stubs a constant.\n<p>@param (see ExampleMethods#stub_const) @option (see\nExampleMethods#stub_const) @return …\n"],["stub","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-stub","(*args)","<p>Deprecated: Use [double](#double-instance_method).\n"],["stub","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-stub","(message_or_hash, opts={}, &block)",""],["stub!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub-21","(*)","<p>@private\n"],["stub!","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-stub-21","(message_or_hash, opts={}, &block)",""],["stub_chain","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub_chain","(*method_names_and_optional_return_values, &block)","<p>Initializes the recording a stub chain to be played back against any\ninstance of this object that invokes …\n"],["stub_chain","RSpec::Mocks::StubChain","RSpec/Mocks/StubChain.html#method-i-stub_chain","()",""],["stub_chain","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-stub_chain","(*chain, &blk)",""],["stub_chain_on","RSpec::Mocks::StubChain","RSpec/Mocks/StubChain.html#method-c-stub_chain_on","(object, *chain, &blk)",""],["stub_const","RSpec::Mocks::ExampleMethods","RSpec/Mocks/ExampleMethods.html#method-i-stub_const","(constant_name, value, options = {})","<p>Stubs the named constant with the given value. Like method stubs, the\nconstant will be restored to its …\n"],["stub_object","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-stub_object","(object, message_or_hash, opts = {}, &block)","<p>@api private\n<p>Common stubbing logic for both `stub` and `stub!`. This used to live in\n`stub`, and `stub!` …\n"],["stubbed?","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-i-stubbed-3F","()","<p>@return [Boolean] Whether or not rspec-mocks has stubbed\n\n<pre>this constant.</pre>\n"],["stubs","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-stubs","()","<p>@private\n"],["syntax","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-syntax","()",""],["syntax=","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-syntax-3D","(values)",""],["teardown","RSpec::Mocks","RSpec/Mocks.html#method-c-teardown","()",""],["terminal_action=","RSpec::Mocks::AndCallOriginalImplementation","RSpec/Mocks/AndCallOriginalImplementation.html#method-i-terminal_action-3D","(value)",""],["times","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-times","(&block)","<p>Syntactic sugar for `exactly`, `at_least` and `at_most`\n<p>@example\n\n<pre>dealer.should_receive(:deal_card).exactly(10).times ...</pre>\n"],["to_constant","RSpec::Mocks::ConstantMutator::BaseMutator","RSpec/Mocks/ConstantMutator/BaseMutator.html#method-i-to_constant","()",""],["to_constant","RSpec::Mocks::ConstantMutator::ConstantHider","RSpec/Mocks/ConstantMutator/ConstantHider.html#method-i-to_constant","()",""],["to_constant","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-to_constant","()",""],["to_constant","RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html#method-i-to_constant","()",""],["to_s","RSpec::Mocks::Constant","RSpec/Mocks/Constant.html#method-i-to_s","()",""],["to_s","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-to_s","()","<p>@private\n"],["to_str","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-to_str","()",""],["transfer_nested_constants","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-transfer_nested_constants","(constants)",""],["twice","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-twice","(&block)","<p>Expect a message to be received exactly two times.\n<p>@example\n\n<pre>car.should_receive(:go).twice</pre>\n"],["unfulfilled_expectations","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-unfulfilled_expectations","()","<p>@private\n"],["unstub","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-unstub","(method_name)","<p>Removes any previously recorded stubs, stub_chains or message expectations\nthat use `method_name`.\n<p>@see …\n"],["unstub","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-unstub","(message)",""],["unstub!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-unstub-21","(*)","<p>@private\n"],["unstub!","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-unstub-21","(message)",""],["verify","RSpec::Mocks","RSpec/Mocks.html#method-c-verify","()",""],["verify","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-verify","()","<p>@api private\n<p>Used internally to verify that message expectations have been fulfilled.\n"],["verify","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-verify","()","<p>@private\n"],["verify","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-verify","()","<p>@private\n"],["verify_all","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-verify_all","()",""],["verify_constants_to_transfer!","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-verify_constants_to_transfer-21","()",""],["verify_messages_received","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-verify_messages_received","()","<p>@private\n"],["visibility","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-visibility","()","<p>@private\n"],["visibility_for_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-visibility_for_method","()","<p>@private\n"],["with","RSpec::Mocks::MessageExpectation","RSpec/Mocks/MessageExpectation.html#method-i-with","(*args, &block)","<p>Constrains a stub or message expectation to invocations with specific\narguments.\n<p>With a stub, if the message …\n"]]}}