var search_data = {"index":{"searchIndex":["array","diff","lcs","balancedcallbacks","block","change","contextchange","contextdiffcallbacks","defaultcallbacks","diffcallbacks","htmldiff","callbacks","hunk","ldiff","sdiffcallbacks","sequencecallbacks","string","<=>()","<=>()","==()","==()","lcs()","adding?()","callbacks_for()","change()","change()","change()","change()","change()","changed?()","deleting?()","diff()","diff()","diff()","diff_size()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","finish()","finished_a?()","finished_b?()","from_a()","from_a()","inspect()","inspect()","lcs()","lcs()","match()","match()","match()","match()","match()","match()","merge()","new()","new()","new()","new()","new()","new()","new()","new()","op()","overlaps?()","patch()","patch()","patch!()","patch!()","patch_me()","run()","sdiff()","sdiff()","simplify()","to_a()","to_a()","traverse_balanced()","traverse_balanced()","traverse_sequences()","traverse_sequences()","unchanged?()","unpatch()","unpatch!()","unpatch!()","unpatch_me()","unshift()","valid_action?()","contributing","history","license","manifest","readme","copying","artistic"],"longSearchIndex":["array","diff","diff::lcs","diff::lcs::balancedcallbacks","diff::lcs::block","diff::lcs::change","diff::lcs::contextchange","diff::lcs::contextdiffcallbacks","diff::lcs::defaultcallbacks","diff::lcs::diffcallbacks","diff::lcs::htmldiff","diff::lcs::htmldiff::callbacks","diff::lcs::hunk","diff::lcs::ldiff","diff::lcs::sdiffcallbacks","diff::lcs::sequencecallbacks","string","diff::lcs::change#<=>()","diff::lcs::contextchange#<=>()","diff::lcs::change#==()","diff::lcs::contextchange#==()","diff::lcs::lcs()","diff::lcs::change#adding?()","diff::lcs::callbacks_for()","diff::lcs::contextdiffcallbacks#change()","diff::lcs::defaultcallbacks::change()","diff::lcs::defaultcallbacks::change()","diff::lcs::defaultcallbacks::change()","diff::lcs::sdiffcallbacks#change()","diff::lcs::change#changed?()","diff::lcs::change#deleting?()","diff::lcs::diff()","diff::lcs#diff()","diff::lcs::hunk#diff()","diff::lcs::block#diff_size()","diff::lcs::contextdiffcallbacks#discard_a()","diff::lcs::defaultcallbacks::discard_a()","diff::lcs::defaultcallbacks::discard_a()","diff::lcs::defaultcallbacks::discard_a()","diff::lcs::diffcallbacks#discard_a()","diff::lcs::htmldiff::callbacks#discard_a()","diff::lcs::sdiffcallbacks#discard_a()","diff::lcs::contextdiffcallbacks#discard_b()","diff::lcs::defaultcallbacks::discard_b()","diff::lcs::defaultcallbacks::discard_b()","diff::lcs::defaultcallbacks::discard_b()","diff::lcs::diffcallbacks#discard_b()","diff::lcs::htmldiff::callbacks#discard_b()","diff::lcs::sdiffcallbacks#discard_b()","diff::lcs::diffcallbacks#finish()","diff::lcs::change#finished_a?()","diff::lcs::change#finished_b?()","diff::lcs::change::from_a()","diff::lcs::contextchange::from_a()","diff::lcs::change#inspect()","diff::lcs::contextchange#inspect()","diff::lcs#lcs()","diff::lcs::lcs()","diff::lcs::defaultcallbacks::match()","diff::lcs::defaultcallbacks::match()","diff::lcs::defaultcallbacks::match()","diff::lcs::diffcallbacks#match()","diff::lcs::htmldiff::callbacks#match()","diff::lcs::sdiffcallbacks#match()","diff::lcs::hunk#merge()","diff::lcs::block::new()","diff::lcs::change::new()","diff::lcs::contextchange::new()","diff::lcs::diffcallbacks::new()","diff::lcs::htmldiff::new()","diff::lcs::htmldiff::callbacks::new()","diff::lcs::hunk::new()","diff::lcs::sdiffcallbacks::new()","diff::lcs::block#op()","diff::lcs::hunk#overlaps?()","diff::lcs#patch()","diff::lcs::patch()","diff::lcs::patch!()","diff::lcs#patch!()","diff::lcs#patch_me()","diff::lcs::htmldiff#run()","diff::lcs#sdiff()","diff::lcs::sdiff()","diff::lcs::contextchange::simplify()","diff::lcs::change#to_a()","diff::lcs::contextchange#to_a()","diff::lcs::traverse_balanced()","diff::lcs#traverse_balanced()","diff::lcs#traverse_sequences()","diff::lcs::traverse_sequences()","diff::lcs::change#unchanged?()","diff::lcs#unpatch()","diff::lcs#unpatch!()","diff::lcs::unpatch!()","diff::lcs#unpatch_me()","diff::lcs::hunk#unshift()","diff::lcs::change::valid_action?()","","","","","","",""],"info":[["Array","","Array.html","",""],["Diff","","Diff.html","",""],["Diff::LCS","","Diff/LCS.html","","<p>Diff::LCS 1.2.4\n<p>Computes “intelligent” differences between two sequenced Enumerables. This\nis …\n"],["Diff::LCS::BalancedCallbacks","","Diff/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which\nonly returns the event itself. …\n"],["Diff::LCS::Block","","Diff/LCS/Block.html","","<p>A block is an operation removing, adding, or changing a group of items.\nBasically, this is just a list …\n"],["Diff::LCS::Change","","Diff/LCS/Change.html","","<p>Represents a simplistic (non-contextual) change. Represents the removal or\naddition of an element from …\n"],["Diff::LCS::ContextChange","","Diff/LCS/ContextChange.html","","<p>Represents a contextual change. Contains the position and values of the\nelements in the old and the new …\n"],["Diff::LCS::ContextDiffCallbacks","","Diff/LCS/ContextDiffCallbacks.html","","<p>This will produce a compound array of contextual diff change objects. Each\nelement in the #diffs array …\n"],["Diff::LCS::DefaultCallbacks","","Diff/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which\nonly returns the event itself. …\n"],["Diff::LCS::DiffCallbacks","","Diff/LCS/DiffCallbacks.html","","<p>This will produce a compound array of simple diff change objects. Each\nelement in the #diffs array is …\n"],["Diff::LCS::HTMLDiff","","Diff/LCS/HTMLDiff.html","",""],["Diff::LCS::HTMLDiff::Callbacks","","Diff/LCS/HTMLDiff/Callbacks.html","",""],["Diff::LCS::Hunk","","Diff/LCS/Hunk.html","","<p>A Hunk is a group of Blocks which overlap because of the context\nsurrounding each block. (So if we’re …\n"],["Diff::LCS::Ldiff","","Diff/LCS/Ldiff.html","","<p>ldiff Usage\n\n<pre>ldiff [options] oldfile newfile</pre>\n<p>-c &mdash; Displays a context diff with 3 lines of context.\n"],["Diff::LCS::SDiffCallbacks","","Diff/LCS/SDiffCallbacks.html","","<p>This will produce a simple array of diff change objects. Each element in\nthe #diffs array is a single …\n"],["Diff::LCS::SequenceCallbacks","","Diff/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which\nonly returns the event itself. …\n"],["String","","String.html","",""],["<=>","Diff::LCS::Change","Diff/LCS/Change.html#method-i-3C-3D-3E","(other)",""],["<=>","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-3C-3D-3E","(other)",""],["==","Diff::LCS::Change","Diff/LCS/Change.html#method-i-3D-3D","(other)",""],["==","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-3D-3D","(other)",""],["LCS","Diff::LCS","Diff/LCS.html#method-c-LCS","(seq1, seq2, &block)",""],["adding?","Diff::LCS::Change","Diff/LCS/Change.html#method-i-adding-3F","()",""],["callbacks_for","Diff::LCS","Diff/LCS.html#method-c-callbacks_for","(callbacks)",""],["change","Diff::LCS::ContextDiffCallbacks","Diff/LCS/ContextDiffCallbacks.html#method-i-change","(event)",""],["change","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-change","(event)",""],["changed?","Diff::LCS::Change","Diff/LCS/Change.html#method-i-changed-3F","()",""],["deleting?","Diff::LCS::Change","Diff/LCS/Change.html#method-i-deleting-3F","()",""],["diff","Diff::LCS","Diff/LCS.html#method-c-diff","(seq1, seq2, callbacks = nil, &block)","<p>#diff computes the smallest set of additions and deletions necessary to\nturn the first sequence into …\n"],["diff","Diff::LCS","Diff/LCS.html#method-i-diff","(other, callbacks = nil, &block)","<p>Returns the difference set between <code>self</code> and\n<code>other</code>. See Diff::LCS#diff.\n"],["diff","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-diff","(format)","<p>Returns a diff string based on a format.\n"],["diff_size","Diff::LCS::Block","Diff/LCS/Block.html#method-i-diff_size","()",""],["discard_a","Diff::LCS::ContextDiffCallbacks","Diff/LCS/ContextDiffCallbacks.html#method-i-discard_a","(event)",""],["discard_a","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-discard_a","(event)",""],["discard_a","Diff::LCS::HTMLDiff::Callbacks","Diff/LCS/HTMLDiff/Callbacks.html#method-i-discard_a","(event)","<p>This will be called when there is a line in A that isn’t in B\n"],["discard_a","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-discard_a","(event)",""],["discard_b","Diff::LCS::ContextDiffCallbacks","Diff/LCS/ContextDiffCallbacks.html#method-i-discard_b","(event)",""],["discard_b","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-discard_b","(event)",""],["discard_b","Diff::LCS::HTMLDiff::Callbacks","Diff/LCS/HTMLDiff/Callbacks.html#method-i-discard_b","(event)","<p>This will be called when there is a line in B that isn’t in A\n"],["discard_b","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-discard_b","(event)",""],["finish","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-finish","()","<p>Finalizes the diff process. If an unprocessed hunk still exists, then it is\nappended to the diff list. …\n"],["finished_a?","Diff::LCS::Change","Diff/LCS/Change.html#method-i-finished_a-3F","()",""],["finished_b?","Diff::LCS::Change","Diff/LCS/Change.html#method-i-finished_b-3F","()",""],["from_a","Diff::LCS::Change","Diff/LCS/Change.html#method-c-from_a","(arr)",""],["from_a","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-c-from_a","(arr)",""],["inspect","Diff::LCS::Change","Diff/LCS/Change.html#method-i-inspect","()",""],["inspect","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-inspect","(*args)",""],["lcs","Diff::LCS","Diff/LCS.html#method-i-lcs","(other, &block)","<p>Returns an Array containing the longest common subsequence(s) between\n<code>self</code> and <code>other</code>. See Diff::LCS# …\n"],["lcs","Diff::LCS","Diff/LCS.html#method-c-lcs","(seq1, seq2, &block)",""],["match","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","Diff::LCS::DefaultCallbacks","Diff/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-i-match","(event)",""],["match","Diff::LCS::HTMLDiff::Callbacks","Diff/LCS/HTMLDiff/Callbacks.html#method-i-match","(event)","<p>This will be called with both lines are the same\n"],["match","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-i-match","(event)",""],["merge","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-merge","(hunk)","<p>Merges this hunk and the provided hunk together if they overlap. Returns a\ntruthy value so that if there …\n"],["new","Diff::LCS::Block","Diff/LCS/Block.html#method-c-new","(chunk)",""],["new","Diff::LCS::Change","Diff/LCS/Change.html#method-c-new","(*args)",""],["new","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-c-new","(*args)",""],["new","Diff::LCS::DiffCallbacks","Diff/LCS/DiffCallbacks.html#method-c-new","()",""],["new","Diff::LCS::HTMLDiff","Diff/LCS/HTMLDiff.html#method-c-new","(left, right, options = nil)",""],["new","Diff::LCS::HTMLDiff::Callbacks","Diff/LCS/HTMLDiff/Callbacks.html#method-c-new","(output, options = {})",""],["new","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-c-new","(data_old, data_new, piece, flag_context, file_length_difference)","<p>Create a hunk using references to both the old and new data, as well as the\npiece of data.\n"],["new","Diff::LCS::SDiffCallbacks","Diff/LCS/SDiffCallbacks.html#method-c-new","()",""],["op","Diff::LCS::Block","Diff/LCS/Block.html#method-i-op","()",""],["overlaps?","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-overlaps-3F","(hunk)","<p>Determines whether there is an overlap between this hunk and the provided\nhunk. This will be true if …\n"],["patch","Diff::LCS","Diff/LCS.html#method-i-patch","(patchset)","<p>Attempts to patch <code>self</code> with the provided\n<code>patchset</code>. A new sequence based on <code>self</code> and the\n<code>patchset</code> will …\n"],["patch","Diff::LCS","Diff/LCS.html#method-c-patch","(src, patchset, direction = nil)","<p>Applies a <code>patchset</code> to the sequence <code>src</code> according\nto the <code>direction</code> (<code>:patch</code> or\n<code>:unpatch</code>), producing a new …\n"],["patch!","Diff::LCS","Diff/LCS.html#method-c-patch-21","(src, patchset)","<p>Given a set of patchset, convert the current version to the next version.\nDoes no auto-discovery.\n"],["patch!","Diff::LCS","Diff/LCS.html#method-i-patch-21","(patchset)","<p>Attempts to patch <code>self</code> with the provided\n<code>patchset</code>. A new sequence based on <code>self</code> and the\n<code>patchset</code> will …\n"],["patch_me","Diff::LCS","Diff/LCS.html#method-i-patch_me","(patchset)","<p>Attempts to patch <code>self</code> with the provided\n<code>patchset</code>, using #patch!. If the sequence this is used on\nsupports …\n"],["run","Diff::LCS::HTMLDiff","Diff/LCS/HTMLDiff.html#method-i-run","()",""],["sdiff","Diff::LCS","Diff/LCS.html#method-i-sdiff","(other, callbacks = nil, &block)","<p>Returns the balanced (“side-by-side”) difference set between\n<code>self</code> and <code>other</code>. See Diff::LCS#sdiff …\n"],["sdiff","Diff::LCS","Diff/LCS.html#method-c-sdiff","(seq1, seq2, callbacks = nil, &block)","<p>#sdiff computes all necessary components to show two sequences and their\nminimized differences side by …\n"],["simplify","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-c-simplify","(event)","<p>Simplifies a context change for use in some diff callbacks. ‘&lt;’ actions\nare converted to ‘-’ and ‘&gt;’ …\n"],["to_a","Diff::LCS::Change","Diff/LCS/Change.html#method-i-to_a","()",""],["to_a","Diff::LCS::ContextChange","Diff/LCS/ContextChange.html#method-i-to_a","()",""],["traverse_balanced","Diff::LCS","Diff/LCS.html#method-c-traverse_balanced","(seq1, seq2, callbacks = Diff::LCS::BalancedCallbacks)","<p>#traverse_balanced is an alternative to #traverse_sequences. It uses a\ndifferent algorithm to iterate …\n"],["traverse_balanced","Diff::LCS","Diff/LCS.html#method-i-traverse_balanced","(other, callbacks = nil, &block)","<p>Traverses the discovered longest common subsequences between\n<code>self</code> and <code>other</code> using the alternate, balanced …\n"],["traverse_sequences","Diff::LCS","Diff/LCS.html#method-i-traverse_sequences","(other, callbacks = nil, &block)","<p>Traverses the discovered longest common subsequences between\n<code>self</code> and <code>other</code>. See Diff::LCS#traverse_sequences\n…\n"],["traverse_sequences","Diff::LCS","Diff/LCS.html#method-c-traverse_sequences","(seq1, seq2, callbacks = Diff::LCS::SequenceCallbacks, &block)","<p>#traverse_sequences is the most general facility provided by this module;\n#diff and #lcs are implemented …\n"],["unchanged?","Diff::LCS::Change","Diff/LCS/Change.html#method-i-unchanged-3F","()",""],["unpatch","Diff::LCS","Diff/LCS.html#method-i-unpatch","(patchset)",""],["unpatch!","Diff::LCS","Diff/LCS.html#method-i-unpatch-21","(patchset)","<p>Attempts to unpatch <code>self</code> with the provided\n<code>patchset</code>. A new sequence based on <code>self</code> and the\n<code>patchset</code> will …\n"],["unpatch!","Diff::LCS","Diff/LCS.html#method-c-unpatch-21","(src, patchset)","<p>Given a set of patchset, convert the current version to the prior version.\nDoes no auto-discovery.\n"],["unpatch_me","Diff::LCS","Diff/LCS.html#method-i-unpatch_me","(patchset)","<p>Attempts to unpatch <code>self</code> with the provided\n<code>patchset</code>, using #unpatch!. If the sequence this is used on …\n"],["unshift","Diff::LCS::Hunk","Diff/LCS/Hunk.html#method-i-unshift","(hunk)",""],["valid_action?","Diff::LCS::Change","Diff/LCS/Change.html#method-c-valid_action-3F","(action)",""],["Contributing","","Contributing_rdoc.html","","<p>Contributing\n<p>I value any contribution to Diff::LCS you can provide: a bug report, a\nfeature request, or …\n"],["History","","History_rdoc.html","","<p>1.2.4 / 2013-04-20\n<p>Bugs fixed:\n<p>A bug was introduced after 1.1.3 when pruning common sequences at the start\n…\n"],["License","","License_rdoc.html","","<p>License\n<p>This software is available under three licenses: the GNU GPL version 2 (or\nat your option, a later …\n"],["Manifest","","Manifest_txt.html","","<p>.autotest .gemtest .hoerc .rspec .travis.yml Contributing.rdoc Gemfile\nHistory.rdoc License.rdoc Manifest.txt …\n"],["README","","README_rdoc.html","","<p>Diff::LCS\n<p>home   &mdash; diff-lcs.rubyforge.org/\n<p>code   &mdash; github.com/halostatue/diff-lcs\n"],["COPYING","","docs/COPYING_txt.html","","\n<pre>                   GNU GENERAL PUBLIC LICENSE\n                      Version 2, June 1991\n\nCopyright (C) ...</pre>\n"],["artistic","","docs/artistic_txt.html","","<p>The “Artistic License”\n\n<pre>Preamble</pre>\n<p>The intent of this document is to state the conditions under …\n"]]}}