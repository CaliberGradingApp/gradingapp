var search_data = {"index":{"searchIndex":["multijson","adapter","adapters","gson","jrjackson","jsoncommon","jsongem","jsonpure","nsjsonserialization","parseerror","oj","okjson","parseerror","yajl","convertiblehashkeys","loaderror","okjson","error","utf8error","options","version","adapter()","adapter=()","cache()","cached_options()","collect_dump_options()","collect_load_options()","collect_options()","current_adapter()","decode()","decode()","default_adapter()","default_dump_options()","default_engine()","default_load_options()","default_options=()","defaults()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump_options()","dump_options=()","encode()","encode()","engine()","engine=()","load()","load()","load()","load()","load()","load()","load()","load()","load_adapter()","load_options()","load_options=()","new()","reset_cached_options!()","to_s()","use()","valenc()","with_adapter()","with_engine()"],"longSearchIndex":["multijson","multijson::adapter","multijson::adapters","multijson::adapters::gson","multijson::adapters::jrjackson","multijson::adapters::jsoncommon","multijson::adapters::jsongem","multijson::adapters::jsonpure","multijson::adapters::nsjsonserialization","multijson::adapters::nsjsonserialization::parseerror","multijson::adapters::oj","multijson::adapters::okjson","multijson::adapters::okjson::parseerror","multijson::adapters::yajl","multijson::convertiblehashkeys","multijson::loaderror","multijson::okjson","multijson::okjson::error","multijson::okjson::utf8error","multijson::options","multijson::version","multijson#adapter()","multijson#adapter=()","multijson::adapter::cache()","multijson::cached_options()","multijson::adapter::collect_dump_options()","multijson::adapter::collect_load_options()","multijson::adapter::collect_options()","multijson#current_adapter()","multijson#decode()","multijson::okjson#decode()","multijson#default_adapter()","multijson::options#default_dump_options()","multijson#default_engine()","multijson::options#default_load_options()","multijson#default_options=()","multijson::adapter::defaults()","multijson#dump()","multijson::adapter::dump()","multijson::adapters::gson#dump()","multijson::adapters::jsoncommon#dump()","multijson::adapters::nsjsonserialization#dump()","multijson::adapters::oj#dump()","multijson::adapters::okjson#dump()","multijson::adapters::yajl#dump()","multijson::options#dump_options()","multijson::options#dump_options=()","multijson#encode()","multijson::okjson#encode()","multijson#engine()","multijson#engine=()","multijson#load()","multijson::adapter::load()","multijson::adapters::gson#load()","multijson::adapters::jsoncommon#load()","multijson::adapters::nsjsonserialization#load()","multijson::adapters::oj#load()","multijson::adapters::okjson#load()","multijson::adapters::yajl#load()","multijson#load_adapter()","multijson::options#load_options()","multijson::options#load_options=()","multijson::loaderror::new()","multijson::reset_cached_options!()","multijson::version::to_s()","multijson#use()","multijson::okjson#valenc()","multijson#with_adapter()","multijson#with_engine()"],"info":[["MultiJson","","MultiJson.html","",""],["MultiJson::Adapter","","MultiJson/Adapter.html","",""],["MultiJson::Adapters","","MultiJson/Adapters.html","",""],["MultiJson::Adapters::Gson","","MultiJson/Adapters/Gson.html","","<p>Use the gson.rb library to dump/load.\n"],["MultiJson::Adapters::JrJackson","","MultiJson/Adapters/JrJackson.html","","<p>Use the jrjackson.rb library to dump/load.\n"],["MultiJson::Adapters::JsonCommon","","MultiJson/Adapters/JsonCommon.html","",""],["MultiJson::Adapters::JsonGem","","MultiJson/Adapters/JsonGem.html","","<p>Use the JSON gem to dump/load.\n"],["MultiJson::Adapters::JsonPure","","MultiJson/Adapters/JsonPure.html","","<p>Use JSON pure to dump/load.\n"],["MultiJson::Adapters::Nsjsonserialization","","MultiJson/Adapters/Nsjsonserialization.html","",""],["MultiJson::Adapters::Nsjsonserialization::ParseError","","MultiJson/OkJson/Error.html","",""],["MultiJson::Adapters::Oj","","MultiJson/Adapters/Oj.html","","<p>Use the Oj library to dump/load.\n"],["MultiJson::Adapters::OkJson","","MultiJson/Adapters/OkJson.html","",""],["MultiJson::Adapters::OkJson::ParseError","","MultiJson/OkJson/Error.html","",""],["MultiJson::Adapters::Yajl","","MultiJson/Adapters/Yajl.html","","<p>Use the Yajl-Ruby library to dump/load.\n"],["MultiJson::ConvertibleHashKeys","","MultiJson/ConvertibleHashKeys.html","",""],["MultiJson::LoadError","","MultiJson/LoadError.html","",""],["MultiJson::OkJson","","MultiJson/OkJson.html","","<p>Some parts adapted from golang.org/src/pkg/json/decode.go and\ngolang.org/src/pkg/utf8/utf8.go\n"],["MultiJson::OkJson::Error","","MultiJson/OkJson/Error.html","",""],["MultiJson::OkJson::Utf8Error","","MultiJson/OkJson/Utf8Error.html","",""],["MultiJson::Options","","MultiJson/Options.html","",""],["MultiJson::Version","","MultiJson/Version.html","",""],["adapter","MultiJson","MultiJson.html#method-i-adapter","()","<p>Get the current adapter class.\n"],["adapter=","MultiJson","MultiJson.html#method-i-adapter-3D","(new_adapter)",""],["cache","MultiJson::Adapter","MultiJson/Adapter.html#method-c-cache","(method, options)",""],["cached_options","MultiJson","MultiJson.html#method-c-cached_options","()",""],["collect_dump_options","MultiJson::Adapter","MultiJson/Adapter.html#method-c-collect_dump_options","(options)",""],["collect_load_options","MultiJson::Adapter","MultiJson/Adapter.html#method-c-collect_load_options","(options)",""],["collect_options","MultiJson::Adapter","MultiJson/Adapter.html#method-c-collect_options","(method, *args)",""],["current_adapter","MultiJson","MultiJson.html#method-i-current_adapter","(options={})",""],["decode","MultiJson","MultiJson.html#method-i-decode","(string, options={})",""],["decode","MultiJson::OkJson","MultiJson/OkJson.html#method-i-decode","(s)","<p>Decodes a json document in string s and returns the corresponding ruby\nvalue. String s must be valid …\n"],["default_adapter","MultiJson","MultiJson.html#method-i-default_adapter","()","<p>The default adapter based on what you currently have loaded and installed.\nFirst checks to see if any …\n"],["default_dump_options","MultiJson::Options","MultiJson/Options.html#method-i-default_dump_options","()",""],["default_engine","MultiJson","MultiJson.html#method-i-default_engine","()",""],["default_load_options","MultiJson::Options","MultiJson/Options.html#method-i-default_load_options","()",""],["default_options=","MultiJson","MultiJson.html#method-i-default_options-3D","(value)",""],["defaults","MultiJson::Adapter","MultiJson/Adapter.html#method-c-defaults","(action, value)",""],["dump","MultiJson","MultiJson.html#method-i-dump","(object, options={})","<p>Encodes a Ruby object as JSON.\n"],["dump","MultiJson::Adapter","MultiJson/Adapter.html#method-c-dump","(object, options={})",""],["dump","MultiJson::Adapters::Gson","MultiJson/Adapters/Gson.html#method-i-dump","(object, options={})",""],["dump","MultiJson::Adapters::JsonCommon","MultiJson/Adapters/JsonCommon.html#method-i-dump","(object, options={})",""],["dump","MultiJson::Adapters::Nsjsonserialization","MultiJson/Adapters/Nsjsonserialization.html#method-i-dump","(object, options={})",""],["dump","MultiJson::Adapters::Oj","MultiJson/Adapters/Oj.html#method-i-dump","(object, options={})",""],["dump","MultiJson::Adapters::OkJson","MultiJson/Adapters/OkJson.html#method-i-dump","(object, options={})",""],["dump","MultiJson::Adapters::Yajl","MultiJson/Adapters/Yajl.html#method-i-dump","(object, options={})",""],["dump_options","MultiJson::Options","MultiJson/Options.html#method-i-dump_options","(*args)",""],["dump_options=","MultiJson::Options","MultiJson/Options.html#method-i-dump_options-3D","(options)",""],["encode","MultiJson","MultiJson.html#method-i-encode","(object, options={})",""],["encode","MultiJson::OkJson","MultiJson/OkJson.html#method-i-encode","(x)","<p>Encodes x into a json text. It may contain only Array, Hash, String,\nNumeric, true, false, nil. (Note …\n"],["engine","MultiJson","MultiJson.html#method-i-engine","()",""],["engine=","MultiJson","MultiJson.html#method-i-engine-3D","(new_adapter)",""],["load","MultiJson","MultiJson.html#method-i-load","(string, options={})","<p>Decode a JSON string into Ruby.\n<p><strong>Options</strong>\n<p>:symbolize_keys  &mdash; If true, will use symbols instead of strings for …\n"],["load","MultiJson::Adapter","MultiJson/Adapter.html#method-c-load","(string, options={})",""],["load","MultiJson::Adapters::Gson","MultiJson/Adapters/Gson.html#method-i-load","(string, options={})",""],["load","MultiJson::Adapters::JsonCommon","MultiJson/Adapters/JsonCommon.html#method-i-load","(string, options={})",""],["load","MultiJson::Adapters::Nsjsonserialization","MultiJson/Adapters/Nsjsonserialization.html#method-i-load","(string, options={})",""],["load","MultiJson::Adapters::Oj","MultiJson/Adapters/Oj.html#method-i-load","(string, options={})",""],["load","MultiJson::Adapters::OkJson","MultiJson/Adapters/OkJson.html#method-i-load","(string, options={})",""],["load","MultiJson::Adapters::Yajl","MultiJson/Adapters/Yajl.html#method-i-load","(string, options={})",""],["load_adapter","MultiJson","MultiJson.html#method-i-load_adapter","(new_adapter)",""],["load_options","MultiJson::Options","MultiJson/Options.html#method-i-load_options","(*args)",""],["load_options=","MultiJson::Options","MultiJson/Options.html#method-i-load_options-3D","(options)",""],["new","MultiJson::LoadError","MultiJson/LoadError.html#method-c-new","(message='', backtrace=[], data='')",""],["reset_cached_options!","MultiJson","MultiJson.html#method-c-reset_cached_options-21","()",""],["to_s","MultiJson::Version","MultiJson/Version.html#method-c-to_s","()","<p>@return [String]\n"],["use","MultiJson","MultiJson.html#method-i-use","(new_adapter)","<p>Set the JSON parser utilizing a symbol, string, or class. Supported by\ndefault are:\n<p><code>:oj</code>\n<p><code>:json_gem</code>\n"],["valenc","MultiJson::OkJson","MultiJson/OkJson.html#method-i-valenc","(x)",""],["with_adapter","MultiJson","MultiJson.html#method-i-with_adapter","(new_adapter)","<p>Executes passed block using specified adapter.\n"],["with_engine","MultiJson","MultiJson.html#method-i-with_engine","(new_adapter)",""]]}}